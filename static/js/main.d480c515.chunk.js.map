{"version":3,"sources":["localstorageUtils.js","uiRepo.js","dataUtils.js","repoUtils.js","localBudgetCache.js","ynabRepo.js","components/typeComponents.js","components/Loading.js","components/EnsureBudgetLoaded.js","styleVariables.js","components/Button.js","components/Icon.js","pages.js","components/SidebarMenuContent.js","components/SidebarMenu.js","components/PageWrapper.js","budgetUtils.js","commonHooks.js","components/Scroller.js","components/PageBreadcrumbs.js","components/PageActions.js","components/PageLayout.js","components/Collapsible.js","components/CollapsibleSection.js","components/Chart.js","components/CurrencyContext.js","components/Amount.js","components/ChartNumbers.js","components/SpendingChart.js","components/Modal.js","components/ChartSettingsModal.js","components/DayByDaySection.js","components/ListItem.js","components/EmptyText.js","components/NoTransactions.js","components/LabelWithMinorText.js","components/LabelWithTransactionCount.js","components/AmountWithPercentage.js","components/SeeAll.js","components/GenericEntitiesSection.js","components/DateSummaryTransaction.js","components/ToggleNode.js","components/DateSummary.js","components/RecentSpending.js","components/CurrentMonthPage.js","components/MonthlyChart.js","components/Toggle.js","components/ToggleWithLabel.js","components/MonthByMonthSettingsModal.js","components/MonthByMonthSection.js","components/IncomePage.js","components/Transaction.js","components/TransactionsSection.js","components/CurrentMonthGroupPage.js","components/CurrentMonthCategoryPage.js","components/GroupsPage.js","components/TransactionsByMonthSection.js","components/GroupPage.js","components/CategoriesState.js","components/CategoryPage.js","components/CategoryPayeePage.js","components/IncomeVsExpensesChart.js","components/BreakdownNode.js","components/Breakdown.js","components/ExpensesBreakdown.js","components/IncomeBreakdown.js","components/Breakdowns.js","components/IncomeVsExpensesPage.js","components/NetWorthChart.js","components/NetWorthAccounts.js","components/NetWorthChanges.js","components/NetWorthPage.js","components/InvestmentsPage.js","components/ProjectionsChart.js","components/ClickOff.js","components/ProjectionsSlider.js","components/ProjectionsPage.js","projectionUtils.js","components/Section.js","components/AccountsSelectionForm.js","components/SettingsInvestmentAccounts.js","components/SettingsMortgageAccounts.js","components/SettingsPage.js","components/PageContent.js","components/Unauthorized.js","components/ErrorPage.js","components/NotFound.js","components/ErrorBoundary.js","components/Budgets.js","components/App.js","index.js"],"names":["cache","getStorage","key","raw","localStorage","getItem","parsed","JSON","parse","setStorage","obj","setItem","stringify","e","getBigStorage","a","localforage","SETTINGS","excludeFirstMonth","localStorageKey","default","excludeLastMonth","investmentAccounts","lastUpdated","mortgageAccounts","netWorthHiddenAccounts","spendingMonthsToCompare","trendsShowAverage","getSetting","settingsKey","budgetId","setting","Error","get","setSetting","value","previousSetting","groupBy","func","arr","grouped","forEach","push","groupByProp","keyByProp","reduce","acc","curr","sumByProp","simpleMemoize","lastArgs","lastResult","args","length","every","index","notAny","predicates","arg","predicate","upsertBy","updater","prev","exists","newArr","map","item","concat","formatCurrency","utils","convertMilliUnitsToCurrencyAmount","GROUPS_TO_HIDE","sanitizeBudget","budget","transactionIdsFromSub","uniq","subtransactions","transaction","transaction_id","categoryGroups","category_groups","filter","group","includes","name","categories","category","deleted","activity","balance","budgeted","categoriesById","earliestDate","moment","subtract","MAX_MONTHS_TO_SHOW","format","currencyFormat","symbol","currency_format","currency_symbol","omit","accountsById","accounts","categoryGroupsById","payeesById","payees","months","sortBy","transactions","compose","amount","category_id","flatMap","id","subs","sub","payee_id","matchesProperty","reverse","dropWhile","date","applyDeltas","deltas","arraysToUpdate","mergeBudgets","BUDGET_DETAILS_STORAGE_KEY","cachedDetails","getAllBudgetDetails","getBudgetDetails","allDetails","setBudgetDetails","server_knowledge","details","newDetails","TOKEN_STORAGE_KEY","BUDGETS_STORAGE_KEY","LAST_LOCATION_KEY","AUTHORIZE_URL","api","getBudgets","budgets","then","data","catch","matches","error","message","removeItem","getBudget","getBudgetById","valueOf","authorized","getUpdatedBudget","budgetDetails","setLastLocation","window","location","hash","PageTitle","styled","div","LargeNumber","StrongText","SecondaryText","MinorText","Loading","style","height","display","flexDirection","alignItems","justifyContent","EnsureBudgetLoaded","this","props","budgetLoaded","onRequestBudget","children","Component","primaryColor","negativeColor","selectedPlotBandColor","tinyColor","lighten","desaturate","toHexString","lighterPrimaryColor","lightPrimaryColor","negativeChartColor","Button","PrimaryButton","library","add","faArrowLeft","faBars","faCaretDown","faChevronRight","faCog","faEllipsisV","faEye","faEyeSlash","faPencilAlt","faTimes","ICONS","bars","cog","pencil","eye","times","PRESET_STYLES","faded","fontWeight","color","fontSize","Icon","icon","other","makeLink","path","params","replace","_","part","pages","currentMonth","title","currentMonthGroup","categoryGroupId","paramProps","breadcrumbs","currentMonthCategory","categoryId","groups","categoryPayee","payeeId","income","incomeVsExpenses","netWorth","investments","projections","settings","Header","IconWrapper","StyledLink","NavLink","active","SidebarMenuContent","hasMultipleBudgets","onCloseSidebar","page","to","matchPath","onClick","PureComponent","PureHeader","PureStyledLink","SidebarMenu","state","open","handleSetOpen","setState","handleTriggerClick","handleCloseSidebar","sidebar","onSetOpen","styles","backgroundColor","width","pointerEvents","sidebarTrigger","Trigger","alignSelf","Container","PageWrapper","onAuthorize","padding","flexShrink","borderTop","mapRaw","convert","cap","isStartingBalanceOrReconciliation","startingBalancePayee","find","reconciliationPayee","isIncome","toBeBudgeted","match","isTransfer","Boolean","transfer_account_id","getTransactionMonth","slice","rejectNonCategoryTransations","tran","getFirstMonth","filteredTransactions","last","undefined","getPayeeNodes","divideBy","pick","sanitizeName","trim","useSelectedMonth","useState","selectedMonth","setSelectedMonth","selectedMonthRef","useRef","current","month","useSelectedEntityId","selectedEntityId","setSelectedEntityId","entityId","useTrendsShowAverage","showAverage","setShowAverage","useMonthExclusions","setExcludeFirstMonth","setExcludeLastMonth","firstBudgetMonth","firstMonth","lastMonth","m","getMonths","onSetExclusion","exclude","useFlagState","initial","flag","setFlag","Scroller","toBeScrolled","raf","scrollPositions","scrollTop","prevProps","prevState","snapshot","action","requestAnimationFrame","cancelAnimationFrame","ref","el","routes","values","pageKey","PageBreadcrumbs","exact","render","lineHeight","whiteSpace","paddingBottom","PageActions","Body","PageLayout","historyAction","fixedContent","content","flexGrow","MeasureContainer","Collapsible","stage","setStage","targetHeight","setTargetHeight","useEffect","setTimeout","Wrapper","heights","closed","openMeasuring","openMeasured","opening","opened","closeMeasured","closing","opacity","onTransitionEnd","bounds","onResize","contentRect","measureRef","fullWidth","SettingsContainer","CollapsibleSection","actions","hasSettings","noPadding","onClickSettings","expanded","setExpanded","transform","rotate","marginLeft","CHART_DEFAULTS","chart","spacing","credits","enabled","legend","text","subtitle","tooltip","xAxis","tickLength","Chart","options","highcharts","Highcharts","CurrencyContext","React","createContext","addCommas","nStr","x","split","x1","x2","rgx","test","Amount","amountAfterDecimal","expectNegative","expectPositive","showCurrencySymbol","Consumer","red","Math","abs","toFixed","defaultProps","ChartNumbers","numbers","alwaysRound","smallNumbers","some","textAlign","marginBottom","label","isMoney","decimalsToRound","isNumber","DateLabels","getData","transactionsByDate","today","cumulative","range","daysInMonth","numDays","padCharsStart","sumBy","SpendingChart","total","highlightFunction","monthsToCompare","highlightedTransactions","highlightSeries","type","enableMouseTracking","marker","animation","lineWidth","fillOpacity","firstDate","lastDate","lineData","day","firstDayOfWeek","parseInt","plotBands","num","from","comparisonSeries","numMonths","mix","toHex","spent","takeWhile","chartNumbers","labels","yAxis","visible","endOnTick","startOnTick","series","dashStyle","Overlay","ModalContent","ensureNextTick","callback","Modal","handleTransitionEnd","animationState","document","createElement","body","appendChild","removeChild","onClose","shouldShow","createPortal","marginTop","ChartSettingsModal","onDecrementMonths","onIncrementMonths","marginRight","DayByDaySection","modalOpen","onCloseModal","onOpenModal","setMonthsToCompare","newMonths","max","min","useMonthsToCompare","ListItem","isContinuing","EmptyText","NoTransactions","LabelWithMinorText","minorText","inLink","bold","overflow","textOverflow","LabelWithTransactionCount","count","selected","showCount","AmountWithPercentage","SeeAll","pluralizedName","showAll","onToggle","mapWithKeys","keyToPluralizedName","category_group_id","GenericEntitiesSection","allMounted","handleToggleShowAll","emptyName","entityKey","entityFunction","entitiesById","linkFunction","limitShowingProp","limitShowing","showAverageToggle","showTransactionCount","onClickEntity","onToggleAverage","entities","LIMIT","topEntities","otherEntities","MaybeLink","GenericItemLink","evt","stopPropagation","StyledListItem","DateSummaryTransaction","payee","memo","NodeWrapper","isCompact","ToggleNode","valueRenderer","DateSummary","onToggleExpanded","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","paddingLeft","margin","RecentSpending","recentDays","n","startsWith","CurrentMonthPage","selectedGroupId","onSelectGroupId","selectedGroup","transactionsThisMonth","groupId","MonthlyChart","average","stacked","onSelectMonth","yearLines","d","highlights","zIndex","findIndex","events","click","event","round","plotLines","gridLineColor","align","y","tickPixelInterval","plotOptions","stacking","s","valueFunction","radius","borderWidth","states","hover","brightness","Track","HEIGHT","on","Handle","WIDTH","Toggle","Label","ToggleWithLabel","checked","onChange","target","MonthByMonthSettingsModal","MonthByMonthSection","settingsModalOpen","setSettingsModalOpen","selectedMonthTotal","transactionsByMonth","false","highlighted","true","getFilteredTransactions","getFilteredIncomeTransactions","IncomePage","selectedPayeeId","onSelectPayeeId","onToggleShowAverage","transactionsInSelectedMonth","Transaction","TransactionsSection","CurrentMonthGroupPage","selectedCategoryId","onSelectCategoryId","allCategories","allTransactions","selectedCategory","categoryIds","transactionsInGroup","transactionsInGroupForMonth","available","CurrentMonthCategoryPage","transactionsInCategory","transactionsInCategoryForMonth","GroupsPage","onSelectGroup","transactionsForMonth","TransactionsByMonthSection","selectedPayee","topTransactions","otherTransactions","GroupPage","onSelectCategory","categoryGroup","INITIAL_STATE","CategoriesState","cachedStates","handleSelectMonth","handleSelectGroup","handleSelectCategory","handleSelectPayee","onSelectPayee","handleSetExclusion","CategoryPage","transactionsForCategory","CategoryPayeePage","transactionsForCategoryAndPayee","IncomeVsExpensesChart","expenses","BreakdownNode","childrenMounted","handleToggleExpand","nodes","isTopLevel","hasChildNodes","Nodes","node","LeafNode","Breakdown","ExpensesBreakdown","totalIncome","categoryNodes","payeeNodes","groupNodes","rootPayeeNodes","IncomeBreakdown","Breakdowns","expenseTransactions","incomeTransactions","getSummaries","IncomeVsExpensesPage","showTotals","setShowTotals","allSummaries","summaries","summary","compact","totalExpenses","denominator","CREDIT_ACCOUNTS","NetWorthChart","groupedData","getStack","monthlyData","assets","asset","liabilities","liability","AccountBreakdown","hiddenAccounts","onToggleAccounts","propEq","ids","account","NetWorthAccounts","keyBy","accountsByGroup","startCase","getNodes","NetWorthChanges","accountSummaries","totals","changes","t","i","year","change","years","Object","keys","sort","v","positiveColor","groupByMonthAndAccount","mapValues","identity","getSummaryByAccount","groupedTransactions","getSelectedBalances","selectedMonthIndex","eq","NetWorthPage","setHiddenAccounts","onToggleHiddenAccounts","shouldHide","newHiddenAccounts","useHiddenAccounts","selectedBalances","filterHidden","omitBy","selectedLiabilities","sum","b","selectedAssets","constant","isContribution","account_id","isCapitalGainOrLoss","InvestmentsPage","selectedBreakdown","onSelectBreakdown","investmentTransactions","isInvestmentTransaction","transactionsInMonth","contribution","capitalGain","positiveIsRed","ProjectionsChart","investmentsProjection","mortgageProjection","amountNeededToRetire","yearsUntilRetirement","floor","isDescendant","parent","child","parentNode","ClickOff","handleBodyClick","onClickOff","addEventListener","removeEventListener","bodyEl","getElementsByTagName","ProjectionsSlider","formatter","onBlur","onReset","rangeOptions","val","Range","adjustableEntries","adjustableEntriesByName","getInitialState","mortgageAccount","lastMonthTransactions","takeRightWhile","P","P1","c","prop","r","N","log","rate","paymentsLeft","projection","mortgagePayment","principalProjection","getMortgageRate","remainingMortgagePayments","returnOnInvestments","investmentAccountIds","tr","reject","startForMonth","returnRates","trs","contributions","gains","returns","totalReturn","multiply","getReturnOnInvestments","averageContribution","transferAccountId","accountId","diff","head","getAverageContribution","currentInvestments","getCurrentInvestments","averageExpenses","startingBalanceId","mortgageAccountIds","getAverageExpensesWithoutMortgage","retirementReturns","retirementTaxRate","maxAverageExpenses","ceil","maxAverageContribution","ProjectionsPage","handleChange","parseFloat","handleSelectAdjusting","adjustingName","handleClearSelection","handleResetCalculation","calculation","monthlyRate","getProjection","YEARS_TO_PROJECT","monthlyRetirementReturn","remainingMortgage","projectionWithRetirement","monthsBeforeRetirement","monthlyExpenses","getProjectionWithRetirement","hasMortgage","projectionByYear","chunk","mortgageProjectionByYear","nameToRangeOptions","step","isAdjusting","onSelect","AdjustableEntry","highlightValue","isAdjustable","Entry","borderRadius","Section","top","AccountsSelectionForm","SectionHeader","SettingsInvestmentAccounts","onUpdateAccounts","investmentModalOpen","closeInvestmentModal","openInvestmentModal","potentialInvestmentAccounts","on_budget","investmentAccountsList","accountsObject","SettingsMortgageAccounts","mortgageModalOpen","closeMortgageModal","openMortgageModal","potentialMortageAccounts","mortgageAccountList","Space","SettingsPage","getFilteredSpendingTransactions","PageContent","areEqual","nextProps","Unauthorized","ErrorPage","NotFound","ErrorBoundary","hasError","Rollbar","token","Budgets","budgetsLoaded","onRequestBudgets","App","budgetIds","handleRequestBudgets","handleRequestBudget","handleAuthorize","hasToken","history","pathname","Provider","forceUpdate","component","search","substring","decodeURIComponent","getAuthorizeToken","ynab","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.d480c515.chunk.js","sourcesContent":["import localforage from \"localforage\";\n\nconst cache = {};\n\nexport const getStorage = (key) => {\n  if (cache[key]) {\n    return cache[key];\n  }\n  const raw = localStorage.getItem(key);\n  if (raw) {\n    const parsed = JSON.parse(raw);\n    cache[key] = parsed;\n    return parsed;\n  }\n  return null;\n};\n\nexport const setStorage = (key, obj) => {\n  delete cache[key];\n\n  try {\n    localStorage.setItem(key, JSON.stringify(obj));\n  } catch (e) {\n    // Most likely exceeds storage quota\n  }\n};\n\nexport const getBigStorage = async (key) => {\n  return await localforage.getItem(key);\n};\n\nexport const setBigStorage = (key, obj) => {\n  localforage.setItem(key, obj);\n};\n","import { getStorage, setStorage } from \"./localstorageUtils\";\nimport get from \"lodash/get\";\n\nconst SETTINGS = {\n  excludeFirstMonth: {\n    localStorageKey: \"budget-reports-exclude-first-month\",\n    default: false\n  },\n  excludeLastMonth: {\n    localStorageKey: \"budget-reports-exclude-last-month\",\n    default: false\n  },\n  investmentAccounts: {\n    localStorageKey: \"budget-reports-investment-accounts\",\n    default: {}\n  },\n  lastUpdated: {\n    localStorageKey: \"budget-reports-last-updated\",\n    default: null\n  },\n  mortgageAccounts: {\n    localStorageKey: \"budget-reports-mortgage-accounts\",\n    default: {}\n  },\n  netWorthHiddenAccounts: {\n    localStorageKey: \"budget-reports-networth-hidden-accounts\",\n    default: {}\n  },\n  spendingMonthsToCompare: {\n    localStorageKey: \"budget-reports-spending-months-to-compare\",\n    default: 3\n  },\n  trendsShowAverage: {\n    localStorageKey: \"budget-reports-trends-show-average\",\n    default: true\n  }\n};\n\nexport const getSetting = (settingsKey, budgetId) => {\n  const setting = SETTINGS[settingsKey];\n\n  if (!setting) {\n    throw new Error(\"not a valid settings key\");\n  }\n\n  return get(getStorage(setting.localStorageKey), budgetId, setting.default);\n};\n\nexport const setSetting = (settingsKey, budgetId, value) => {\n  const setting = SETTINGS[settingsKey];\n\n  if (!setting) {\n    throw new Error(\"not a valid settings key\");\n  }\n\n  const previousSetting = getStorage(setting.localStorageKey);\n\n  setStorage(setting.localStorageKey, {\n    ...previousSetting,\n    [budgetId]: value\n  });\n};\n","export const groupBy = func => arr => {\n  const grouped = {};\n  arr.forEach(obj => {\n    const key = func(obj);\n    if (!grouped[key]) {\n      grouped[key] = [];\n    }\n    grouped[key].push(obj);\n  });\n  return grouped;\n};\n\nexport const groupByProp = key => arr => {\n  const grouped = {};\n  arr.forEach(obj => {\n    if (!grouped[obj[key]]) {\n      grouped[obj[key]] = [];\n    }\n    grouped[obj[key]].push(obj);\n  });\n  return grouped;\n};\n\nexport const keyByProp = key => arr =>\n  arr.reduce((acc, curr) => ({ ...acc, [curr[key]]: curr }), {});\n\nexport const sumBy = func => arr =>\n  arr.reduce((acc, curr) => acc + func(curr), 0);\n\nexport const sumByProp = key => arr =>\n  arr.reduce((acc, curr) => acc + curr[key], 0);\n\nexport const simpleMemoize = func => {\n  let lastArgs = null;\n  let lastResult = null;\n  return (...args) => {\n    if (\n      lastArgs !== null &&\n      lastArgs.length === args.length &&\n      args.every((value, index) => value === lastArgs[index])\n    ) {\n      return lastResult;\n    }\n    lastArgs = args;\n    lastResult = func(...args);\n    return lastResult;\n  };\n};\n\nexport const notAny = predicates => arg =>\n  predicates.every(predicate => !predicate(arg));\n\nexport const upsertBy = (arr, key, obj, updater = (prev, curr) => curr) => {\n  let exists = false;\n  const newArr = arr.map(item => {\n    if (item[key] === obj[key]) {\n      exists = true;\n      return updater(item, obj);\n    }\n    return item;\n  });\n  return exists ? newArr : newArr.concat(obj);\n};\n","import { utils } from \"ynab\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport flatMap from \"lodash/fp/flatMap\";\nimport dropWhile from \"lodash/fp/dropWhile\";\nimport matchesProperty from \"lodash/fp/matchesProperty\";\nimport omit from \"lodash/fp/omit\";\nimport reverse from \"lodash/fp/reverse\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport uniq from \"lodash/fp/uniq\";\nimport { upsertBy, keyByProp } from \"./dataUtils\";\n\nconst formatCurrency = utils.convertMilliUnitsToCurrencyAmount;\n\nconst GROUPS_TO_HIDE = [\"Internal Master Category\", \"Credit Card Payments\"];\n\nconst MAX_MONTHS_TO_SHOW = 240;\n\nexport const sanitizeBudget = budget => {\n  const transactionIdsFromSub = uniq(\n    budget.subtransactions.map(transaction => transaction.transaction_id)\n  );\n  const categoryGroups = budget.category_groups.filter(\n    group => !GROUPS_TO_HIDE.includes(group.name)\n  );\n  const categories = budget.categories\n    .filter(category => !category.deleted)\n    .map(category => ({\n      ...category,\n      activity: formatCurrency(category.activity),\n      balance: formatCurrency(category.balance),\n      budgeted: formatCurrency(category.budgeted)\n    }));\n  const categoriesById = keyByProp(\"id\")(categories);\n  const earliestDate = moment()\n    .subtract(MAX_MONTHS_TO_SHOW - 1, \"months\")\n    .format(\"YYYY-MM-01\");\n  const currencyFormat = {\n    symbol: budget.currency_format.currency_symbol\n  };\n\n  return {\n    ...omit([\"category_groups\", \"currency_format\"])(budget),\n    accountsById: keyByProp(\"id\")(budget.accounts),\n    categoryGroups,\n    categoryGroupsById: keyByProp(\"id\")(categoryGroups),\n    categories,\n    categoriesById,\n    currencyFormat,\n    payeesById: keyByProp(\"id\")(budget.payees),\n    months: sortBy(\"month\")(budget.months),\n    transactions: compose([\n      transactions =>\n        transactions.map(transaction => ({\n          ...transaction,\n          amount: formatCurrency(transaction.amount)\n        })),\n      // Not sure how this would happen, but seeing it in production\n      transactions =>\n        transactions.filter(\n          transaction =>\n            !transaction.category_id ||\n            !!categoriesById[transaction.category_id]\n        ),\n      flatMap(transaction =>\n        transactionIdsFromSub.includes(transaction.id)\n          ? compose([\n              subs =>\n                subs.map(sub =>\n                  omit(\"transaction_id\")({\n                    ...transaction,\n                    ...sub,\n                    payee_id: sub.payee_id || transaction.payee_id\n                  })\n                ),\n              subs =>\n                subs.filter(matchesProperty(\"transaction_id\", transaction.id))\n            ])(budget.subtransactions)\n          : transaction\n      ),\n      reverse,\n      dropWhile(transaction => transaction.date < earliestDate),\n      sortBy(\"date\"),\n      transactions =>\n        transactions.filter(\n          transaction => transaction.amount !== 0 && !transaction.deleted\n        )\n    ])(budget.transactions)\n  };\n};\n\nconst applyDeltas = (arr, deltas, key = \"id\", updater) =>\n  deltas.reduce((acc, curr) => upsertBy(acc, key, curr, updater), arr);\n\nconst arraysToUpdate = [\n  \"accounts\",\n  \"categories\",\n  \"category_groups\",\n  \"payee_locations\",\n  \"payees\",\n  \"scheduled_subtransactions\",\n  \"scheduled_transactions\",\n  \"subtransactions\",\n  \"transactions\"\n];\n\nexport const mergeBudgets = (budget, deltas) => ({\n  ...budget,\n  ...deltas,\n  ...arraysToUpdate.reduce(\n    (acc, curr) => ({\n      ...acc,\n      [curr]: applyDeltas(budget[curr], deltas[curr])\n    }),\n    {}\n  ),\n  months: applyDeltas(budget.months, deltas.months, \"month\", (prev, curr) => ({\n    ...prev,\n    ...curr,\n    categories: applyDeltas(prev.categories, curr.categories)\n  }))\n});\n","import get from \"lodash/get\";\nimport { getBigStorage, setBigStorage } from \"./localstorageUtils\";\n\nconst BUDGET_DETAILS_STORAGE_KEY = \"ynab_budget_details\";\n\nlet cachedDetails = null;\n\nconst getAllBudgetDetails = async () => {\n  if (cachedDetails) {\n    return cachedDetails;\n  }\n  cachedDetails = await getBigStorage(BUDGET_DETAILS_STORAGE_KEY);\n  return cachedDetails;\n};\n\nexport const getBudgetDetails = async (id) => {\n  const allDetails = await getAllBudgetDetails();\n  return get(allDetails, id);\n};\n\nexport const setBudgetDetails = async ({ id, budget, server_knowledge }) => {\n  const details = await getAllBudgetDetails();\n  const newDetails = {\n    ...details,\n    [id]: { budget, server_knowledge },\n  };\n  setBigStorage(BUDGET_DETAILS_STORAGE_KEY, newDetails);\n  cachedDetails = newDetails;\n};\n","import * as ynab from \"ynab\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport matches from \"lodash/fp/matches\";\nimport { getStorage, setStorage } from \"./localstorageUtils\";\nimport { setSetting, getSetting } from \"./uiRepo\";\nimport { sanitizeBudget, mergeBudgets } from \"./repoUtils\";\nimport { getBudgetDetails, setBudgetDetails } from \"./localBudgetCache\";\nimport { clientId, redirectUri } from \"./ynabConfig\";\n\nconst TOKEN_STORAGE_KEY = \"ynab_access_token\";\nconst BUDGETS_STORAGE_KEY = \"ynab_budgets\";\nconst LAST_LOCATION_KEY = \"budget-reports-last-location\";\n\nconst TIME_LIMIT_FOR_FULL_REFRESH = 8 * 1000;\n\nexport const AUTHORIZE_URL =\n  \"https://api.youneedabudget.com/oauth/authorize?client_id=\" +\n  clientId +\n  \"&redirect_uri=\" +\n  redirectUri +\n  \"&response_type=token\" +\n  \"&scope=read-only\";\n\nexport const getAuthorizeToken = () => {\n  // check for hash route\n  if (window.location.hash[1] === \"/\") {\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\n  }\n\n  const search = window.location.hash\n    .substring(1)\n    .replace(/&/g, '\",\"')\n    .replace(/=/g, '\":\"');\n\n  if (!search) {\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\n  }\n\n  const token = get(\"access_token\")(\n    JSON.parse(\n      '{\"' + search + '\"}',\n      (key, value) => (key === \"\" ? value : decodeURIComponent(value))\n    )\n  );\n  localStorage.setItem(TOKEN_STORAGE_KEY, token);\n  window.location.hash = localStorage.getItem(LAST_LOCATION_KEY) || \"\";\n  localStorage.removeItem(LAST_LOCATION_KEY);\n\n  return token;\n};\n\nlet api = null;\n\nexport const initializeYnabApi = token => {\n  api = new ynab.api(token);\n};\n\nexport const getBudgets = () =>\n  api.budgets\n    .getBudgets()\n    .then(({ data }) => {\n      setStorage(BUDGETS_STORAGE_KEY, data);\n      return data;\n    })\n    .catch(e => {\n      if (\n        matches({\n          id: \"401\",\n          name: \"unauthorized\"\n        })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\n        return getStorage(BUDGETS_STORAGE_KEY) || { budgets: [] };\n      }\n\n      throw e;\n    });\n\nconst getBudget = id =>\n  api.budgets\n    .getBudgetById(id)\n    .then(({ data }) => {\n      const { budget, server_knowledge } = data;\n\n      setBudgetDetails({ id, budget, server_knowledge });\n      setSetting(\"lastUpdated\", id, moment().valueOf());\n\n      return { budget: sanitizeBudget(budget), authorized: true };\n    })\n    .catch(e => {\n      if (\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\n        return {\n          budget: { categories: [], transactions: [], payees: [] },\n          authorized: false\n        };\n      }\n\n      throw e;\n    });\n\nexport const getUpdatedBudget = async id => {\n  const budgetDetails = await getBudgetDetails(id);\n\n  if (!budgetDetails) {\n    return getBudget(id);\n  }\n\n  if (\n    moment().valueOf() - getSetting(\"lastUpdated\", id) <\n    TIME_LIMIT_FOR_FULL_REFRESH\n  ) {\n    return getBudget(id);\n  }\n\n  return api.budgets\n    .getBudgetById(id, budgetDetails.server_knowledge)\n    .then(({ data }) => {\n      try {\n        const budget = mergeBudgets(budgetDetails.budget, data.budget);\n\n        setBudgetDetails({ id, budget, server_knowledge: data.server_knowledge });\n        setSetting(\"lastUpdated\", id, moment().valueOf());\n\n        return { budget: sanitizeBudget(budget), authorized: true };\n      } catch (e) {\n        return getBudget(id);\n      }\n    })\n    .catch(e => {\n      if (\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        return {\n          budget: sanitizeBudget(budgetDetails.budget),\n          authorized: false\n        };\n      }\n\n      throw e;\n    });\n};\n\nexport const setLastLocation = () => {\n  localStorage.setItem(LAST_LOCATION_KEY, window.location.hash);\n};\n","import styled from \"styled-components\";\n\nexport const PageTitle = styled.div`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 24px;\n  color: #222;\n`;\n\nexport const LargeNumber = styled.div`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 24px;\n  color: #222;\n`;\n\nexport const StrongText = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: 500;\n  color: #222;\n`;\n\nexport const SecondaryText = styled.div`\n  font-size: 13px;\n  line-height: 21px;\n  font-weight: 400;\n  color: #666;\n`;\n\nexport const MinorText = styled.div`\n  font-size: 11px;\n  line-height: 16px;\n  font-weight: 400;\n  color: #999;\n`;\n","import React from \"react\";\nimport { StrongText, SecondaryText } from \"./typeComponents\";\n\nconst Loading = () => (\n  <div\n    style={{\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }}\n  >\n    <StrongText>Loading&hellip;</StrongText>\n    <SecondaryText>beep, beep, boop</SecondaryText>\n  </div>\n);\n\nLoading.propTypes = {};\n\nexport default Loading;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Loading from \"./Loading\";\n\nclass EnsureBudgetLoaded extends Component {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    budgetLoaded: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onRequestBudget: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    const { budgetId, budgetLoaded, onRequestBudget } = this.props;\n\n    if (!budgetLoaded) {\n      onRequestBudget(budgetId);\n    }\n  }\n\n  render() {\n    if (!this.props.budgetLoaded) {\n      return <Loading />\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default EnsureBudgetLoaded;\n","import tinyColor from \"tinycolor2\";\n\nexport const primaryColor = \"#4399ff\";\nexport const positiveColor = \"#2cbc2f\";\nexport const plotBandColor = \"#f2f2f2\";\nexport const negativeColor = \"red\";\nexport const selectedPlotBandColor = tinyColor(primaryColor)\n  .lighten(32)\n  .desaturate()\n  .toHexString();\nexport const lighterPrimaryColor = tinyColor(primaryColor)\n  .lighten(5)\n  .desaturate()\n  .toHexString();\nexport const lightPrimaryColor = tinyColor(primaryColor)\n  .lighten(25)\n  .desaturate()\n  .toHexString();\nexport const negativeChartColor = tinyColor(negativeColor)\n  .lighten(30)\n  .desaturate(60)\n  .toHexString();\n\nexport const iconWidth = 60;\n","import styled from \"styled-components\";\nimport { SecondaryText } from \"./typeComponents\";\nimport { primaryColor } from \"../styleVariables\";\n\nconst Button = styled(SecondaryText)`\n  display: inline-block;\n  user-select: none;\n  border: 1px solid #ccc;\n  padding: 4px 12px;\n  border-radius: 2px;\n\n  & + & {\n    margin-left: 5px;\n  }\n`;\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${primaryColor};\n  border-color: ${primaryColor};\n  color: #fff;\n`;\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport keys from \"lodash/fp/keys\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons/faBars\";\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons/faCaretDown\";\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons/faChevronRight\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons/faCog\";\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons/faEllipsisV\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faEyeSlash } from \"@fortawesome/free-solid-svg-icons/faEyeSlash\";\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons/faPencilAlt\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons/faTimes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nlibrary.add(\n  faArrowLeft,\n  faBars,\n  faCaretDown,\n  faChevronRight,\n  faCog,\n  faEllipsisV,\n  faEye,\n  faEyeSlash,\n  faPencilAlt,\n  faTimes\n);\n\nconst ICONS = {\n  \"arrow-left\": faArrowLeft,\n  bars: faBars,\n  \"caret-down\": faCaretDown,\n  \"chevron-right\": faChevronRight,\n  cog: faCog,\n  pencil: faPencilAlt,\n  \"ellipsis-v\": faEllipsisV,\n  eye: faEye,\n  \"eye-slash\": faEyeSlash,\n  times: faTimes\n};\n\nconst PRESET_STYLES = {\n  faded: {\n    fontWeight: 400,\n    color: \"#aaa\",\n    fontSize: 10\n  }\n};\n\nconst Icon = ({ icon, style, faded, ...other }) => (\n  <FontAwesomeIcon\n    {...other}\n    icon={ICONS[icon]}\n    style={{ ...style, ...(faded && PRESET_STYLES.faded) }}\n  />\n);\n\nIcon.propTypes = {\n  icon: PropTypes.oneOf(keys(ICONS)).isRequired,\n  faded: PropTypes.bool\n};\n\nexport default Icon;\n","import get from \"lodash/fp/get\";\n\nexport const makeLink = (path, params) =>\n  path.replace(/:([a-zA-Z]*)/g, (_, part) => params[part]);\n\nconst pages = {\n  currentMonth: {\n    path: \"/budgets/:budgetId/current\",\n    title: \"Current Month Spending\",\n    props: [\"budget\", \"currentMonth\", \"investmentAccounts\"]\n  },\n  currentMonthGroup: {\n    path: \"/budgets/:budgetId/current/:categoryGroupId\",\n    title: (params, budget) =>\n      budget.categoryGroupsById[params.categoryGroupId].name,\n    props: [\"budget\", \"currentMonth\"],\n    paramProps: [\"categoryGroupId\"],\n    breadcrumbs: [\"currentMonth\"]\n  },\n  currentMonthCategory: {\n    path: \"/budgets/:budgetId/current/:categoryGroupId/:categoryId\",\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\n    props: [\"budget\", \"currentMonth\"],\n    paramProps: [\"categoryId\", \"categoryGroupId\"],\n    breadcrumbs: [\"currentMonth\", \"currentMonthGroup\"]\n  },\n  groups: {\n    path: \"/budgets/:budgetId/groups\",\n    title: \"Spending Trends\",\n    props: [\"budget\"]\n  },\n  group: {\n    path: \"/budgets/:budgetId/groups/:categoryGroupId\",\n    title: (params, budget) =>\n      budget.categoryGroupsById[params.categoryGroupId].name,\n    props: [\"budget\"],\n    paramProps: [\"categoryGroupId\"],\n    breadcrumbs: [\"groups\"]\n  },\n  category: {\n    path: \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId\",\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\n    props: [\"budget\"],\n    paramProps: [\"categoryId\"],\n    breadcrumbs: [\"groups\", \"group\"]\n  },\n  categoryPayee: {\n    path:\n      \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId/payees/:payeeId\",\n    title: (params, budget) =>\n      get([\"payeesById\", params.payeeId, \"name\"], budget) || \"Payee Not Found\",\n    props: [\"budget\"],\n    paramProps: [\"categoryId\", \"payeeId\"],\n    breadcrumbs: [\"groups\", \"group\", \"category\"]\n  },\n  income: {\n    path: \"/budgets/:budgetId/income\",\n    title: \"Income Trends\",\n    props: [\"budget\"]\n  },\n  incomeVsExpenses: {\n    path: \"/budgets/:budgetId/income-vs-expenses\",\n    title: \"Income vs Expenses\",\n    props: [\"budget\", \"investmentAccounts\"]\n  },\n  netWorth: {\n    path: \"/budgets/:budgetId/net-worth\",\n    title: \"Net Worth\",\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\n  },\n  investments: {\n    path: \"/budgets/:budgetId/investments\",\n    title: \"Investments\",\n    props: [\"budget\", \"investmentAccounts\"]\n  },\n  projections: {\n    path: \"/budgets/:budgetId/projections\",\n    title: \"Retirement Calculator\",\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\n  },\n  settings: {\n    path: \"/budgets/:budgetId/settings\",\n    title: \"Budget Settings\",\n    props: [\n      \"budget\",\n      \"investmentAccounts\",\n      \"mortgageAccounts\",\n      \"onUpdateAccounts\"\n    ]\n  }\n};\n\nexport default pages;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { matchPath } from \"react-router\";\nimport styled from \"styled-components\";\nimport pages, { makeLink } from \"../pages\";\nimport Icon from \"./Icon\";\nimport { selectedPlotBandColor, iconWidth } from \"../styleVariables\";\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n  height: 60px;\n`;\n\nconst IconWrapper = styled.div`\n  width: ${iconWidth}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledLink = styled(NavLink)`\n  color: inherit;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  padding: 0 20px;\n  background-color: ${props => props.active && selectedPlotBandColor};\n`;\n\nclass SidebarMenuContent extends PureComponent {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    hasMultipleBudgets: PropTypes.bool.isRequired,\n    location: PropTypes.string.isRequired,\n    onCloseSidebar: PropTypes.func.isRequired\n  };\n\n  render() {\n    const { budgetId, hasMultipleBudgets, location, onCloseSidebar } = this.props;\n\n    return (\n      <Fragment>\n        <PureHeader onCloseSidebar={onCloseSidebar} budgetId={budgetId} />\n        {[\n          \"currentMonth\",\n          \"groups\",\n          \"income\",\n          \"incomeVsExpenses\",\n          \"netWorth\",\n          \"investments\",\n          \"projections\"\n        ].map(page => {\n          const { path, title } = pages[page];\n\n          return (\n            <PureStyledLink\n              key={path}\n              to={makeLink(path, { budgetId })}\n              active={matchPath(location, { path })}\n              onClick={onCloseSidebar}\n            >\n              {title}\n            </PureStyledLink>\n          );\n        })}\n        {hasMultipleBudgets && (\n          <PureStyledLink to=\"/\">Switch Budgets</PureStyledLink>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nclass PureHeader extends PureComponent {\n  render() {\n    const { onCloseSidebar, budgetId } = this.props;\n    return (\n      <Header>\n        <IconWrapper onClick={onCloseSidebar}>\n          <Icon icon=\"times\" />\n        </IconWrapper>\n        <Link\n          to={makeLink(pages.settings.path, { budgetId })}\n          style={{ display: \"flex\", color: \"inherit\" }}\n          onClick={onCloseSidebar}\n        >\n          <IconWrapper>\n            <Icon icon=\"cog\" />\n          </IconWrapper>\n        </Link>\n      </Header>\n    );\n  }\n}\n\nclass PureStyledLink extends PureComponent {\n  render() {\n    return <StyledLink {...this.props} />;\n  }\n}\n\nexport default SidebarMenuContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Sidebar from \"react-sidebar\";\nimport { iconWidth } from \"../styleVariables\";\nimport Icon from \"./Icon\";\nimport SidebarMenuContent from \"./SidebarMenuContent\";\n\nclass SidebarMenu extends Component {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    children: PropTypes.func.isRequired,\n    hasMultipleBudgets: PropTypes.bool.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  state = { open: false };\n\n  handleSetOpen = open => {\n    this.setState({ open });\n  };\n\n  handleTriggerClick = () => {\n    this.setState({ open: true });\n  };\n\n  handleCloseSidebar = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { budgetId, children, hasMultipleBudgets, location } = this.props;\n    const { open } = this.state;\n\n    return (\n      <Sidebar\n        sidebar={\n          <SidebarMenuContent\n            budgetId={budgetId}\n            hasMultipleBudgets={hasMultipleBudgets}\n            location={location}\n            onCloseSidebar={this.handleCloseSidebar}\n          />\n        }\n        open={open}\n        onSetOpen={this.handleSetOpen}\n        styles={{\n          sidebar: {\n            backgroundColor: \"#fff\",\n            width: 280,\n            pointerEvents: !open && \"none\"\n          }\n        }}\n      >\n        {children({\n          sidebarTrigger: <Trigger onClick={this.handleTriggerClick} />\n        })}\n      </Sidebar>\n    );\n  }\n}\n\nconst Trigger = ({ onClick }) => (\n  <div\n    onClick={onClick}\n    style={{\n      alignSelf: \"stretch\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: iconWidth\n    }}\n  >\n    <Icon icon=\"bars\" />\n  </div>\n);\n\nexport default SidebarMenu;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport EnsureBudgetLoaded from \"./EnsureBudgetLoaded\";\nimport { PrimaryButton } from \"./Button\";\nimport SidebarMenu from \"./SidebarMenu\";\n\nconst Container = styled.div`\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PageWrapper = ({\n  authorized,\n  budgetId,\n  budgetLoaded,\n  children,\n  hasMultipleBudgets,\n  location,\n  onAuthorize,\n  onRequestBudget\n}) => (\n  <EnsureBudgetLoaded\n    budgetId={budgetId}\n    budgetLoaded={budgetLoaded}\n    onRequestBudget={onRequestBudget}\n  >\n    <SidebarMenu\n      budgetId={budgetId}\n      location={location}\n      hasMultipleBudgets={hasMultipleBudgets}\n    >\n      {({ sidebarTrigger }) => (\n        <Container>\n          {children({ sidebarTrigger })}\n          {!authorized && (\n            <div\n              style={{\n                padding: \"15px 20px\",\n                backgroundColor: \"#fff\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                flexShrink: 0,\n                borderTop: \"1px solid #ccc\"\n              }}\n            >\n              Your authorization expired.\n              <PrimaryButton onClick={onAuthorize}>Reauthorize</PrimaryButton>\n            </div>\n          )}\n        </Container>\n      )}\n    </SidebarMenu>\n  </EnsureBudgetLoaded>\n);\n\nPageWrapper.propTypes = {\n  authorized: PropTypes.bool.isRequired,\n  budgetId: PropTypes.string.isRequired,\n  budgetLoaded: PropTypes.bool.isRequired,\n  children: PropTypes.func.isRequired,\n  hasMultipleBudgets: PropTypes.bool.isRequired,\n  location: PropTypes.string.isRequired,\n  onAuthorize: PropTypes.func.isRequired,\n  onRequestBudget: PropTypes.func.isRequired\n};\n\nexport default PageWrapper;\n","import compose from \"lodash/fp/compose\";\nimport find from \"lodash/fp/find\";\nimport pick from \"lodash/fp/pick\";\nimport mapRaw from \"lodash/fp/map\";\nimport last from \"lodash/fp/last\";\nimport { groupByProp, simpleMemoize, sumByProp } from \"./dataUtils\";\n\nconst map = mapRaw.convert({ cap: false });\n\nexport const isStartingBalanceOrReconciliation = simpleMemoize((budget) => {\n  const startingBalancePayee = find({ name: \"Starting Balance\" })(\n    budget.payees\n  );\n  const reconciliationPayee = find({\n    name: \"Reconciliation Balance Adjustment\",\n  })(budget.payees);\n\n  return (transaction) =>\n    transaction.payee_id === startingBalancePayee?.id ||\n    transaction.payee_id === reconciliationPayee?.id;\n});\n\nexport const isIncome = simpleMemoize((budget) => {\n  const toBeBudgeted = find((category) => category.name.match(/^Inflow: /))(\n    budget.categories\n  );\n  return (transaction) => transaction.category_id === toBeBudgeted?.id;\n});\n\nexport const isTransfer =\n  (investmentAccounts = {}) =>\n  (transaction) =>\n    !transaction.category_id ||\n    Boolean(investmentAccounts[transaction.transfer_account_id]);\n\nexport const getTransactionMonth = (transaction) =>\n  transaction.date.slice(0, 7);\n\nconst rejectNonCategoryTransations = simpleMemoize((transactions) =>\n  transactions.filter((tran) => tran.category_id)\n);\n\nexport const getFirstMonth = (budget) => {\n  const filteredTransactions = rejectNonCategoryTransations(\n    budget.transactions\n  );\n\n  return filteredTransactions.length\n    ? getTransactionMonth(last(filteredTransactions))\n    : undefined;\n};\n\nexport const getPayeeNodes = ({ payeesById, transactions }, divideBy = 1) =>\n  compose([\n    map((transactions, payeeId) => ({\n      ...(payeesById[payeeId]\n        ? pick([\"id\", \"name\"])(payeesById[payeeId])\n        : { id: \"no-payee\", name: \"(no payee)\" }),\n      amount: sumByProp(\"amount\")(transactions) / divideBy,\n    })),\n    groupByProp(\"payee_id\"),\n  ])(transactions);\n\nexport const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9 ]/g, \"\").trim();\n","import { useRef, useState } from \"react\";\nimport moment from \"moment\";\nimport { getSetting, setSetting } from \"./uiRepo\";\nimport { getFirstMonth } from \"./budgetUtils\";\n\nconst MAX_MONTHS_TO_COMPARE = 12;\n\nexport const useSelectedMonth = () => {\n  const [selectedMonth, setSelectedMonth] = useState(null);\n  const selectedMonthRef = useRef(selectedMonth);\n  selectedMonthRef.current = selectedMonth;\n\n  const onSelectMonth = month => {\n    setSelectedMonth(month === selectedMonthRef.current ? null : month);\n  };\n\n  return [selectedMonth, onSelectMonth];\n};\n\nexport const useSelectedEntityId = () => {\n  const [selectedEntityId, setSelectedEntityId] = useState(null);\n  const onSelectEntityId = entityId => {\n    setSelectedEntityId(entityId === selectedEntityId ? null : entityId);\n  };\n\n  return [selectedEntityId, onSelectEntityId];\n};\n\nexport const useTrendsShowAverage = budgetId => {\n  const [showAverage, setShowAverage] = useState(\n    getSetting(\"trendsShowAverage\", budgetId)\n  );\n  const onToggleShowAverage = () => {\n    setShowAverage(!showAverage);\n    setSetting(\"trendsShowAverage\", budgetId, !showAverage);\n  };\n\n  return [showAverage, onToggleShowAverage];\n};\n\nconst getMonths = (firstMonth, lastMonth) => {\n  const months = [firstMonth];\n  let m = firstMonth;\n\n  while (m !== lastMonth) {\n    m = moment(m)\n      .add(1, \"months\")\n      .format(\"YYYY-MM\");\n    months.push(m);\n  }\n\n  return months;\n};\n\nexport const useMonthExclusions = budget => {\n  const [excludeFirstMonth, setExcludeFirstMonth] = useState(\n    getSetting(\"excludeFirstMonth\", budget.id)\n  );\n  const [excludeLastMonth, setExcludeLastMonth] = useState(\n    getSetting(\"excludeLastMonth\", budget.id)\n  );\n\n  const firstBudgetMonth = getFirstMonth(budget);\n  const firstMonth = excludeFirstMonth\n    ? moment(firstBudgetMonth)\n        .add(1, \"months\")\n        .format(\"YYYY-MM\")\n    : firstBudgetMonth;\n  const lastMonth = excludeLastMonth\n    ? moment()\n        .subtract(1, \"months\")\n        .format(\"YYYY-MM\")\n    : moment().format(\"YYYY-MM\");\n  const months = getMonths(firstMonth, lastMonth);\n\n  const onSetExclusion = ({ month, exclude }) => {\n    if (month === \"first\") {\n      setExcludeFirstMonth(exclude);\n      setSetting(\"excludeFirstMonth\", budget.id, exclude);\n    } else {\n      setExcludeLastMonth(exclude);\n      setSetting(\"excludeLastMonth\", budget.id, exclude);\n    }\n  };\n\n  return { excludeFirstMonth, excludeLastMonth, months, onSetExclusion };\n};\n\nexport const useMonthsToCompare = budgetId => {\n  const [monthsToCompare, setMonthsToCompare] = useState(\n    getSetting(\"spendingMonthsToCompare\", budgetId)\n  );\n\n  const onDecrementMonths = () => {\n    const newMonths = Math.max(monthsToCompare - 1, 0);\n    setMonthsToCompare(newMonths);\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\n  };\n\n  const onIncrementMonths = () => {\n    const newMonths = Math.min(monthsToCompare + 1, MAX_MONTHS_TO_COMPARE);\n    setMonthsToCompare(newMonths);\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\n  };\n\n  return { monthsToCompare, onDecrementMonths, onIncrementMonths };\n};\n\nexport const useFlagState = initial => {\n  const [flag, setFlag] = useState(initial);\n\n  return [\n    flag,\n    () => {\n      setFlag(false);\n    },\n    () => {\n      setFlag(true);\n    },\n    () => {\n      setFlag(!flag);\n    }\n  ];\n};\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Scroller extends Component {\n  static propTypes = {\n    action: PropTypes.string.isRequired,\n    children: PropTypes.func.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  toBeScrolled = null;\n\n  raf = null;\n\n  scrollPositions = {};\n\n  getSnapshotBeforeUpdate() {\n    return { scrollTop: this.toBeScrolled.scrollTop };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { action, location } = this.props;\n\n    if (location === prevProps.location) {\n      return;\n    }\n\n    if (action === \"POP\") {\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = this.scrollPositions[location] || 0;\n      });\n    }\n\n    if (action === \"PUSH\") {\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = 0;\n      });\n    }\n\n    if (action === \"REPLACE\") {\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = 0;\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.raf);\n  }\n\n  render() {\n    return this.props.children({\n      ref: el => {\n        this.toBeScrolled = el;\n      }\n    });\n  }\n}\n\nexport default Scroller;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport values from \"lodash/fp/values\";\nimport pages, { makeLink } from \"../pages\";\nimport { MinorText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\n\nconst routes = values(pages)\n  .filter(page => !!page.breadcrumbs)\n  .map(page => ({\n    path: page.path,\n    breadcrumbs: page.breadcrumbs.map(pageKey => ({\n      title: pages[pageKey].title,\n      path: pages[pageKey].path\n    }))\n  }));\n\nconst PageBreadcrumbs = ({ budget }) =>\n  budget ? (\n    <Switch>\n      {routes.map(({ path, breadcrumbs }) => (\n        <Route\n          key={path}\n          path={path}\n          exact\n          render={props => (\n            <MinorText style={{ lineHeight: 1, whiteSpace: \"normal\" }}>\n              {breadcrumbs.map(({ title, path }, index) => (\n                <Fragment key={path}>\n                  <Link\n                    to={makeLink(path, props.match.params)}\n                    style={{\n                      paddingBottom: 8,\n                      display: \"inline-block\"\n                    }}\n                  >\n                    {typeof title === \"function\"\n                      ? title(props.match.params, budget)\n                      : title}\n                  </Link>\n                  {index !== breadcrumbs.length - 1 && (\n                    <Icon\n                      icon=\"chevron-right\"\n                      style={{ padding: \"0 5px\", fontSize: 8 }}\n                    />\n                  )}\n                </Fragment>\n              ))}\n            </MinorText>\n          )}\n        />\n      ))}\n    </Switch>\n  ) : null;\n\nPageBreadcrumbs.propTypes = {\n  budget: PropTypes.object\n};\n\nexport default PageBreadcrumbs;\n","import React from \"react\";\nimport pages, { makeLink } from \"../pages\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { SecondaryText } from \"./typeComponents\";\n\nconst PageActions = () => (\n  <Switch>\n    <Route\n      path={pages.currentMonth.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.groups.path, match.params)}>\n            Past Months\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.currentMonthGroup.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.group.path, match.params)}>Past Months</Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.currentMonthCategory.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.category.path, match.params)}>\n            Past Months\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.groups.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonth.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.group.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonthGroup.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.category.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonthCategory.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n  </Switch>\n);\n\nPageActions.propTypes = {};\n\nexport default PageActions;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { PageTitle } from \"./typeComponents\";\nimport Scroller from \"./Scroller\";\nimport PageBreadcrumbs from \"./PageBreadcrumbs\";\nimport PageActions from \"./PageActions\";\n\nconst Header = styled.div`\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  padding-left: 0;\n  padding-right: 20px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border-bottom: 2px solid rgba(0, 0, 0, 0.1);\n  white-space: pre;\n  user-select: none;\n`;\n\nconst Body = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n`;\n\nconst PageLayout = ({\n  sidebarTrigger, // from PageWrapper\n  historyAction, // from PageWrapper\n  location, // from PageWrapper\n  budget,\n  title,\n  breadcrumbs,\n  fixedContent,\n  content\n}) => (\n  <Fragment>\n    <Header>\n      {sidebarTrigger}\n      <div style={{ flexGrow: 1 }}>\n        <PageBreadcrumbs budget={budget} />\n        <PageTitle style={{ lineHeight: 1 }}>{title}</PageTitle>\n      </div>\n      <PageActions />\n    </Header>\n    {fixedContent}\n    <Scroller action={historyAction} location={location}>\n      {({ ref }) => <Body ref={ref}>{content}</Body>}\n    </Scroller>\n  </Fragment>\n);\n\nPageLayout.propTypes = {\n  sidebarTrigger: PropTypes.node.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  budget: PropTypes.object,\n  breadcrumbs: PropTypes.node,\n  fixedContent: PropTypes.node,\n  content: PropTypes.node\n};\n\nexport default PageLayout;\n","import React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Measure from \"react-measure\";\n\nconst Container = styled.div`\n  transition: height 0.15s ease-in-out, opacity 0.15s linear 0.1s;\n  overflow: hidden;\n`;\n\nconst MeasureContainer = styled.div`\n  opacity: 0;\n  pointer-events: none;\n  height: 0;\n`;\n\nconst Collapsible = ({ open, children }) => {\n  const [stage, setStage] = useState(open ? \"opened\" : \"closed\");\n  const [targetHeight, setTargetHeight] = useState(open ? \"auto\" : 0);\n\n  useEffect(() => {\n    if (open && stage === \"closed\") {\n      setStage(\"openMeasuring\");\n      setTimeout(() => {\n        setStage(\"openMeasured\");\n        setTimeout(() => {\n          setStage(\"opening\");\n        }, 20);\n      }, 20);\n    }\n    if (!open && stage === \"opened\") {\n      setStage(\"closeMeasured\");\n      setTimeout(() => {\n        setStage(\"closing\");\n      }, 20);\n    }\n  }, [open, stage]);\n\n  const Wrapper = stage === \"openMeasuring\" ? MeasureContainer : Container;\n\n  const heights = {\n    closed: 0,\n    openMeasuring: 0,\n    openMeasured: 0,\n    opening: targetHeight,\n    opened: \"auto\",\n    closeMeasured: targetHeight,\n    closing: 0,\n  };\n\n  const opacities = {\n    closed: 0,\n    openMeasuring: 0,\n    openMeasured: 0,\n    opening: 1,\n    opened: 1,\n    closeMeasured: 1,\n    closing: 0,\n  };\n\n  return stage === \"closed\" ? null : (\n    <Wrapper\n      style={{\n        height: heights[stage],\n        opacity: opacities[stage],\n      }}\n      onTransitionEnd={() => {\n        setStage(open ? \"opened\" : \"closed\");\n      }}\n    >\n      <Measure\n        bounds\n        onResize={(contentRect) => {\n          setTargetHeight(contentRect.bounds?.height || 0);\n        }}\n      >\n        {({ measureRef }) => <div ref={measureRef}>{children}</div>}\n      </Measure>\n    </Wrapper>\n  );\n};\n\nCollapsible.propTypes = {\n  open: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Collapsible;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Collapsible from \"./Collapsible\";\nimport { StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\n\nconst Container = styled.div`\n  margin: ${(props) => (props.fullWidth ? \"0\" : \"2px\")};\n  background-color: #fff;\n  background-clip: padding-box;\n  border: ${(props) => (props.fullWidth ? \"0\" : \"1px\")} solid\n    rgba(0, 0, 0, 0.05);\n  border-bottom-width: 1px;\n  border-radius: 2px;\n`;\n\nconst Header = styled(StrongText)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 20px;\n  user-select: none;\n`;\n\nconst SettingsContainer = styled.div`\n  padding: 0 10px;\n  margin-right: -10px;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  margin-left: 5px;\n`;\n\nconst Body = styled.div`\n  padding: 0 ${(props) => (props.fullWidth ? \"22px\" : \"20px\")} 15px;\n`;\n\nconst CollapsibleSection = ({\n  actions,\n  children,\n  fullWidth,\n  hasSettings,\n  noPadding,\n  title,\n  onClickSettings,\n}) => {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <Container fullWidth={fullWidth}>\n      <Header>\n        <div\n          style={{ display: \"flex\", alignItems: \"center\" }}\n          onClick={() => {\n            setExpanded(!expanded);\n          }}\n        >\n          {title}\n          <Icon\n            icon=\"chevron-right\"\n            transform={{ rotate: expanded ? 90 : 0 }}\n            style={{ marginLeft: 10 }}\n            faded\n          />\n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          {expanded && actions}\n          {hasSettings && expanded && (\n            <SettingsContainer onClick={onClickSettings}>\n              <Icon icon=\"cog\" faded />\n            </SettingsContainer>\n          )}\n        </div>\n      </Header>\n      <Collapsible open={expanded}>\n        <Body style={{ padding: noPadding && 0 }}>{children}</Body>\n      </Collapsible>\n    </Container>\n  );\n};\n\nCollapsibleSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.node,\n  fullWidth: PropTypes.bool,\n  hasSettings: PropTypes.bool,\n  noPadding: PropTypes.bool,\n  onClickSettings: PropTypes.func,\n};\n\nexport default CollapsibleSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst CHART_DEFAULTS = {\n  chart: { height: 240, spacing: [0, 0, 0, 0] },\n  credits: { enabled: false },\n  legend: { enabled: false },\n  title: { text: \"\" },\n  subtitle: { text: \"\" },\n  tooltip: { enabled: false },\n  xAxis: { tickLength: 0 }\n};\n\nconst Chart = ({ options }) => (\n  <HighchartsReact\n    highcharts={Highcharts}\n    options={{\n      ...CHART_DEFAULTS,\n      ...options,\n      chart: { ...CHART_DEFAULTS.chart, ...options.chart },\n      xAxis: { ...CHART_DEFAULTS.xAxis, ...options.xAxis }\n    }}\n  />\n);\n\nChart.propTypes = {\n  options: PropTypes.object\n};\n\nexport default Chart;\n","import React from \"react\";\n\nconst CurrencyContext = React.createContext();\n\nexport default CurrencyContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport get from \"lodash/fp/get\";\nimport {\n  positiveColor as green,\n  negativeColor as red\n} from \"../styleVariables\";\nimport CurrencyContext from \"./CurrencyContext\";\n\nexport const addCommas = nStr => {\n  nStr += \"\";\n\n  const x = nStr.split(\".\");\n  let x1 = x[0];\n  const x2 = x.length > 1 ? \".\" + x[1] : \"\";\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, \"$1,$2\");\n  }\n  return x1 + x2;\n};\n\nconst Amount = ({\n  amount,\n  amountAfterDecimal,\n  expectNegative,\n  expectPositive,\n  showCurrencySymbol,\n  style\n}) => (\n  <CurrencyContext.Consumer>\n    {currencyFormat => (\n      <span\n        style={{\n          ...style,\n          color:\n            amount === 0\n              ? null\n              : amount > 0\n              ? expectPositive\n                ? null\n                : green\n              : expectNegative\n              ? null\n              : red\n        }}\n      >\n        {amount === 0\n          ? null\n          : amount > 0\n          ? expectPositive\n            ? null\n            : \"+\"\n          : expectNegative\n          ? null\n          : \"-\"}\n        {showCurrencySymbol && (get(\"symbol\")(currencyFormat) || \"$\")}\n        {addCommas(Math.abs(amount).toFixed(amountAfterDecimal))}\n      </span>\n    )}\n  </CurrencyContext.Consumer>\n);\n\nAmount.propTypes = {\n  amount: PropTypes.number.isRequired,\n  amountAfterDecimal: PropTypes.number,\n  expectNegative: PropTypes.bool,\n  expectPositive: PropTypes.bool,\n  showCurrencySymbol: PropTypes.bool,\n  style: PropTypes.object\n};\n\nAmount.defaultProps = {\n  amountAfterDecimal: 2\n};\n\nexport default Amount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport isNumber from \"lodash/fp/isNumber\";\nimport { MinorText, LargeNumber } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst ChartNumbers = ({ numbers, alwaysRound, expectPositive }) => {\n  const smallNumbers = numbers.some(({ amount }) => Math.abs(amount) < 100);\n  return (\n    <div\n      style={{\n        textAlign: \"right\",\n        lineHeight: \"16px\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        flexDirection: \"row-reverse\",\n        marginBottom: 8\n      }}\n    >\n      {numbers.map(({ amount, label, isMoney = true, decimalsToRound }) => (\n        <div key={label} style={{ marginLeft: 20 }}>\n          <LargeNumber style={{ lineHeight: \"16px\" }}>\n            <Amount\n              amount={amount}\n              amountAfterDecimal={\n                isNumber(decimalsToRound)\n                  ? decimalsToRound\n                  : smallNumbers && !alwaysRound\n                  ? 2\n                  : 0\n              }\n              showCurrencySymbol={isMoney}\n              expectNegative={!expectPositive}\n              expectPositive={expectPositive}\n            />\n          </LargeNumber>\n          <MinorText>{label}</MinorText>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nChartNumbers.propTypes = {\n  numbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      label: PropTypes.string.isRequired,\n      alwaysRound: PropTypes.bool,\n      decimalsToRound: PropTypes.number,\n      isMoney: PropTypes.bool\n    })\n  ).isRequired,\n  alwaysRound: PropTypes.bool,\n  expectPositive: PropTypes.bool\n};\n\nexport default ChartNumbers;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport tinyColor from \"tinycolor2\";\nimport compose from \"lodash/fp/compose\";\nimport isNumber from \"lodash/fp/isNumber\";\nimport padCharsStart from \"lodash/fp/padCharsStart\";\nimport range from \"lodash/fp/range\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport { groupByProp, sumByProp } from \"../dataUtils\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport { primaryColor, plotBandColor } from \"../styleVariables\";\nimport { MinorText } from \"./typeComponents\";\nimport Chart from \"./Chart\";\nimport ChartNumbers from \"./ChartNumbers\";\n\nconst DateLabels = styled.div`\n  border-top: 1px solid #ddd;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst getData = ({ month, transactionsByDate }) => {\n  const today = moment().format(\"YYYY-MM-DD\");\n  let cumulative = 0;\n  return range(-1, moment(month).daysInMonth()).map(numDays => {\n    const date =\n      numDays === -1\n        ? moment(month).add(-1, \"days\")\n        : `${month}-${padCharsStart(\"0\")(2)(numDays + 1)}`;\n\n    if (date > today) {\n      return null;\n    }\n\n    cumulative += -sumBy(\"amount\")(transactionsByDate[date] || []);\n\n    return cumulative;\n  });\n};\n\nclass SpendingChart extends PureComponent {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    currentMonth: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        amount: PropTypes.number.isRequired,\n        date: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    total: PropTypes.number\n  };\n\n  render() {\n    const {\n      total,\n      transactions,\n      highlightFunction,\n      currentMonth,\n      monthsToCompare\n    } = this.props;\n\n    const highlightedTransactions = highlightFunction\n      ? transactions.filter(highlightFunction)\n      : [];\n    const highlightData = getData({\n      month: currentMonth,\n      transactionsByDate: groupByProp(\"date\")(highlightedTransactions)\n    });\n    const highlightSeries = {\n      type: \"areaspline\",\n      data: highlightData,\n      enableMouseTracking: false,\n      marker: { enabled: false },\n      animation: false,\n      color: primaryColor,\n      lineWidth: 0,\n      fillOpacity: 0.8\n    };\n    const daysInMonth = moment(currentMonth).daysInMonth();\n    const firstDate = moment(currentMonth).add(-1, \"days\");\n    const lastDate = moment(currentMonth).add(daysInMonth - 1, \"days\");\n\n    const transactionsByDate = groupByProp(\"date\")(transactions);\n    const data = getData({ month: currentMonth, transactionsByDate });\n    const lineData = range(0, daysInMonth + 1).map(\n      day => (day / daysInMonth) * total\n    );\n    const firstDayOfWeek = parseInt(firstDate.format(\"d\"), 10);\n    const plotBands = range(0, 6).map(num => ({\n      color: plotBandColor,\n      from: num * 7 - 1.5 - firstDayOfWeek,\n      to: num * 7 + 0.5 - firstDayOfWeek\n    }));\n\n    const comparisonSeries = range(monthsToCompare, 0).map(numMonths => ({\n      type: \"spline\",\n      data: getData({\n        month: moment(currentMonth)\n          .subtract(numMonths, \"months\")\n          .format(\"YYYY-MM\"),\n        transactionsByDate\n      }),\n      enableMouseTracking: false,\n      color:\n        \"#\" +\n        tinyColor\n          .mix(\n            primaryColor,\n            \"#f2f2f2\",\n            30 + ((numMonths - 1) * 70) / monthsToCompare\n          )\n          .toHex(),\n      lineWidth: 1,\n      marker: { enabled: false },\n      animation: false\n    }));\n\n    const spent = compose([\n      sumByProp(\"amount\"),\n      takeWhile(\n        transaction => getTransactionMonth(transaction) === currentMonth\n      )\n    ])(transactions);\n    const chartNumbers = [{ amount: spent, label: \"spent\" }];\n    if (isNumber(total)) {\n      chartNumbers.push({ amount: -(total + spent), label: \"available\" });\n    }\n\n    return (\n      <Fragment>\n        <ChartNumbers numbers={chartNumbers} />\n        <Chart\n          key={monthsToCompare}\n          options={{\n            chart: { spacing: [0, 0, 0, 0], height: 140, animation: false },\n            xAxis: {\n              labels: { enabled: false },\n              plotBands\n            },\n            yAxis: { visible: false, endOnTick: false, startOnTick: false },\n            series: [\n              {\n                type: \"line\",\n                color: \"#aaa\",\n                dashStyle: \"Dot\",\n                lineWidth: 1,\n                data: lineData,\n                enableMouseTracking: false,\n                marker: { enabled: false },\n                animation: false\n              },\n              ...comparisonSeries,\n              {\n                type: \"spline\",\n                data,\n                enableMouseTracking: false,\n                color: primaryColor,\n                marker: { enabled: false },\n                animation: false,\n                ...(highlightFunction && {\n                  type: \"areaspline\",\n                  fillOpacity: 0.2\n                })\n              },\n              highlightSeries\n            ]\n          }}\n        />\n        <DateLabels>\n          <MinorText>{firstDate.format(\"MMM D\")}</MinorText>\n          <MinorText>{lastDate.format(\"MMM D\")}</MinorText>\n        </DateLabels>\n      </Fragment>\n    );\n  }\n}\n\nexport default SpendingChart;\n","import React, { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { StrongText } from \"./typeComponents\";\nimport { PrimaryButton } from \"./Button\";\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n`;\n\nconst ModalContent = styled.div`\n  position: relative;\n  min-width: 200px;\n  padding: 15px 20px;\n  margin-left: 20px;\n  margin-right: 20px;\n  background-color: #fff;\n  border-radius: 2px;\n  transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;\n`;\n\nconst ensureNextTick = callback =>\n  requestAnimationFrame(() => {\n    requestAnimationFrame(callback);\n  });\n\nclass Modal extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    title: PropTypes.string,\n    width: PropTypes.number\n  };\n\n  constructor() {\n    super();\n    this.el = document.createElement(\"div\");\n    this.state = { animationState: \"left\" };\n  }\n\n  componentDidMount() {\n    document.body.appendChild(this.el);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.open && this.props.open) {\n      ensureNextTick(() => {\n        this.setState({ animationState: \"entering\" });\n      });\n    }\n    if (prevProps.open && !this.props.open) {\n      ensureNextTick(() => {\n        this.setState({ animationState: \"leaving\" });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.el);\n  }\n\n  handleTransitionEnd = () => {\n    const { animationState } = this.state;\n\n    if (animationState === \"entering\") {\n      this.setState({ animationState: \"entered\" });\n    } else if (animationState === \"leaving\") {\n      this.setState({ animationState: \"left\" });\n    }\n  };\n\n  render() {\n    const { open, children, title, onClose, width } = this.props;\n    const { animationState } = this.state;\n\n    if (!open && animationState === \"left\") {\n      return null;\n    }\n\n    const shouldShow = [\"entering\", \"entered\"].includes(animationState);\n\n    return createPortal(\n      <Container>\n        <Overlay\n          onClick={onClose}\n          style={{ opacity: shouldShow ? 1 : 0 }}\n          onTransitionEnd={this.handleTransitionEnd}\n        />\n        <ModalContent\n          style={{\n            opacity: shouldShow ? 1 : 0,\n            transform: `translate3d(0, ${shouldShow ? \"0\" : \"20px\"}, 0)`,\n            width\n          }}\n        >\n          {title && (\n            <StrongText style={{ marginBottom: 10 }}>{title}</StrongText>\n          )}\n          {children}\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              marginTop: 20\n            }}\n          >\n            <PrimaryButton onClick={onClose}>Done</PrimaryButton>\n          </div>\n        </ModalContent>\n      </Container>,\n      this.el\n    );\n  }\n}\n\nexport default Modal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"./Modal\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Button from \"./Button\";\n\nconst ChartSettingsModal = ({\n  open,\n  monthsToCompare,\n  onClose,\n  onDecrementMonths,\n  onIncrementMonths\n}) => (\n  <Modal open={open} title=\"Chart Settings\" onClose={onClose}>\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <div style={{ marginRight: 10 }}>\n        <Button onClick={onDecrementMonths}>-</Button>\n        <Button onClick={onIncrementMonths}>+</Button>\n      </div>\n      <SecondaryText>\n        Compare with the last {monthsToCompare} month\n        {monthsToCompare === 1 ? \"\" : \"s\"}\n      </SecondaryText>\n    </div>\n  </Modal>\n);\n\nChartSettingsModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  monthsToCompare: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onDecrementMonths: PropTypes.func.isRequired,\n  onIncrementMonths: PropTypes.func.isRequired\n};\n\nexport default ChartSettingsModal;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useMonthsToCompare, useFlagState } from \"../commonHooks\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport SpendingChart from \"./SpendingChart\";\nimport ChartSettingsModal from \"./ChartSettingsModal\";\n\nconst DayByDaySection = ({\n  actions,\n  budgetId,\n  currentMonth,\n  highlightFunction,\n  title,\n  total,\n  transactions\n}) => {\n  const [modalOpen, onCloseModal, onOpenModal] = useFlagState(false);\n  const {\n    monthsToCompare,\n    onIncrementMonths,\n    onDecrementMonths\n  } = useMonthsToCompare(budgetId);\n\n  return (\n    <Fragment>\n      <CollapsibleSection\n        actions={actions}\n        title={title}\n        hasSettings\n        onClickSettings={onOpenModal}\n      >\n        <SpendingChart\n          budgetId={budgetId}\n          currentMonth={currentMonth}\n          highlightFunction={highlightFunction}\n          monthsToCompare={monthsToCompare}\n          total={total}\n          transactions={transactions}\n        />\n      </CollapsibleSection>\n      <ChartSettingsModal\n        open={modalOpen}\n        monthsToCompare={monthsToCompare}\n        onClose={onCloseModal}\n        onDecrementMonths={onDecrementMonths}\n        onIncrementMonths={onIncrementMonths}\n      />\n    </Fragment>\n  );\n};\n\nDayByDaySection.propTypes = {\n  budgetId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  transactions: PropTypes.array.isRequired,\n  actions: PropTypes.node,\n  highlightFunction: PropTypes.func,\n  title: PropTypes.string,\n  total: PropTypes.number\n};\n\nDayByDaySection.defaultProps = { title: \"Day by Day\" };\n\nexport default DayByDaySection;\n","import styled from \"styled-components\";\n\nconst ListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 0;\n  user-select: none;\n\n  &:first-child {\n    padding-top: ${props => !props.isContinuing && 0};\n  }\n`;\n\nexport default ListItem;\n","import styled from \"styled-components\";\nimport { SecondaryText } from \"./typeComponents\";\n\nconst EmptyText = styled(SecondaryText)`\n  text-align: center;\n  margin: 10px;\n  opacity: 0.5;\n`;\n\nexport default EmptyText;\n","import React from \"react\";\nimport EmptyText from \"./EmptyText\";\n\nconst NoTransactions = () => <EmptyText>No transactions this month</EmptyText>;\n\nexport default NoTransactions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\n\nconst LabelWithMinorText = ({ label, minorText, inLink, to, bold }) => (\n  <SecondaryText\n    style={{\n      fontWeight: bold && 700,\n      display: \"flex\",\n      alignItems: \"baseline\",\n      whiteSpace: \"pre\",\n      overflow: \"hidden\",\n      color: inLink && \"inherit\"\n    }}\n  >\n    {to ? <Link to={to}>{label}</Link> : label}\n    {minorText && (\n      <MinorText\n        style={{\n          fontWeight: bold && 700,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        }}\n      >\n        &nbsp;&ndash; {minorText}\n      </MinorText>\n    )}\n  </SecondaryText>\n);\n\nLabelWithMinorText.propTypes = {\n  label: PropTypes.string.isRequired,\n  bold: PropTypes.bool,\n  inLink: PropTypes.bool,\n  minorText: PropTypes.string,\n  to: PropTypes.string\n};\n\nexport default LabelWithMinorText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst LabelWithTransactionCount = ({\n  label,\n  count,\n  inLink,\n  selected,\n  showCount,\n  to\n}) => (\n  <LabelWithMinorText\n    bold={selected}\n    label={label}\n    minorText={showCount && `${count} transaction${count === 1 ? \"\" : \"s\"}`}\n    inLink={inLink}\n    to={to}\n  />\n);\n\nLabelWithTransactionCount.propTypes = {\n  count: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  inLink: PropTypes.bool,\n  selected: PropTypes.bool,\n  showCount: PropTypes.bool,\n  to: PropTypes.string\n};\n\nLabelWithTransactionCount.defaultProps = { showCount: true };\n\nexport default LabelWithTransactionCount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst AmountWithPercentage = ({\n  amount,\n  expectNegative,\n  expectPositive,\n  total,\n  faded,\n  selected\n}) => (\n  <SecondaryText\n    style={{\n      display: \"flex\",\n      alignItems: \"baseline\",\n      opacity: faded ? 0.3 : 1,\n      fontWeight: selected && 700\n    }}\n  >\n    <Amount\n      amount={amount}\n      expectNegative={expectNegative}\n      expectPositive={expectPositive}\n    />\n    <MinorText\n      style={{ width: 44, textAlign: \"right\", fontWeight: selected && 700 }}\n    >\n      {total ? `${((amount / total) * 100).toFixed(1)}%` : `–`}\n    </MinorText>\n  </SecondaryText>\n);\n\nAmountWithPercentage.propTypes = {\n  amount: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  expectNegative: PropTypes.bool,\n  expectPositive: PropTypes.bool,\n  faded: PropTypes.bool,\n  selected: PropTypes.bool\n};\n\nexport default AmountWithPercentage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MinorText } from \"./typeComponents\";\n\nconst SeeAll = ({ count, pluralizedName, showAll, onToggle }) => (\n  <MinorText style={{ textAlign: \"center\", marginTop: 5 }} onClick={onToggle}>\n    {showAll ? \"see less\" : `see all ${count} ${pluralizedName}`}\n  </MinorText>\n);\n\nSeeAll.propTypes = {\n  count: PropTypes.number.isRequired,\n  pluralizedName: PropTypes.string.isRequired,\n  showAll: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired\n};\n\nexport default SeeAll;\n","import React, { Component, PureComponent, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport get from \"lodash/fp/get\";\nimport map from \"lodash/fp/map\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { groupBy, groupByProp, sumByProp } from \"../dataUtils\";\nimport { Link } from \"react-router-dom\";\nimport Collapsible from \"./Collapsible\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport { SecondaryText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport NoTransactions from \"./NoTransactions\";\nimport LabelWithTransactionCount from \"./LabelWithTransactionCount\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\nimport SeeAll from \"./SeeAll\";\n\nconst mapWithKeys = map.convert({ cap: false });\nconst LIMIT = 5;\n\nconst keyToPluralizedName = {\n  category_group_id: \"category groups\",\n  category_id: \"categories\",\n  payee_id: \"payees\",\n};\n\nclass GenericEntitiesSection extends Component {\n  static propTypes = {\n    entitiesById: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n    entityKey: PropTypes.oneOf([\n      \"category_id\",\n      \"category_group_id\",\n      \"payee_id\",\n    ]),\n    emptyName: PropTypes.string,\n    entityFunction: PropTypes.func,\n    expectNegative: PropTypes.bool,\n    expectPositive: PropTypes.bool,\n    linkFunction: PropTypes.func,\n    limitShowing: PropTypes.bool,\n    numMonths: PropTypes.number,\n    reverse: PropTypes.bool,\n    selectedEntityId: PropTypes.string,\n    showAverage: PropTypes.bool,\n    showAverageToggle: PropTypes.bool,\n    showTransactionCount: PropTypes.bool,\n    onClickEntity: PropTypes.func,\n    onToggleAverage: PropTypes.func,\n  };\n\n  static defaultProps = { emptyName: \"(none)\" };\n\n  state = { showAll: false, allMounted: false };\n\n  handleToggleShowAll = () => {\n    const { allMounted, showAll } = this.state;\n    if (allMounted) {\n      this.setState({ showAll: !showAll });\n    } else {\n      this.setState({ allMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ showAll: true });\n      });\n    }\n  };\n\n  render() {\n    const {\n      emptyName,\n      entityKey,\n      entityFunction,\n      entitiesById,\n      expectNegative,\n      expectPositive,\n      linkFunction,\n      limitShowing: limitShowingProp,\n      numMonths,\n      reverse,\n      selectedEntityId,\n      showAverage,\n      showAverageToggle,\n      showTransactionCount,\n      title,\n      transactions,\n      onClickEntity,\n      onToggleAverage,\n    } = this.props;\n    const { allMounted, showAll } = this.state;\n    let total = 0;\n    const entities = compose([\n      sortBy((e) => (reverse ? -e.amount : e.amount)),\n      mapWithKeys((transactions, entityId) => {\n        const amount = sumByProp(\"amount\")(transactions);\n        total += amount;\n\n        return {\n          entityId,\n          transactions: transactions.length,\n          amount,\n        };\n      }),\n      entityFunction ? groupBy(entityFunction) : groupByProp(entityKey),\n    ])(transactions);\n\n    const limitShowing = limitShowingProp && entities.length > LIMIT + 1;\n    const topEntities = entities.slice(0, LIMIT);\n    const otherEntities = entities.slice(LIMIT);\n\n    return (\n      <CollapsibleSection\n        title={title}\n        actions={\n          showAverageToggle && (\n            <SecondaryText onClick={onToggleAverage}>\n              {showAverage ? \"average\" : \"total\"}\n            </SecondaryText>\n          )\n        }\n      >\n        {entities.length === 0 && <NoTransactions />}\n        {(limitShowing ? topEntities : entities).map(\n          ({ entityId, transactions, amount }) => (\n            <GenericItemLink\n              key={entityId}\n              showTransactionCount={showTransactionCount}\n              to={\n                linkFunction && !!entitiesById[entityId]\n                  ? linkFunction(entityId)\n                  : null\n              }\n              transactions={transactions}\n              name={get(\"name\")(entitiesById[entityId]) || emptyName}\n              amount={showAverage ? amount / numMonths : amount}\n              expectNegative={expectNegative}\n              expectPositive={expectPositive}\n              selected={entityId === selectedEntityId}\n              total={showAverage ? total / numMonths : total}\n              id={entityId}\n              onClick={onClickEntity}\n            />\n          )\n        )}\n        {allMounted && (\n          <Collapsible open={showAll}>\n            <Fragment>\n              {otherEntities.map(({ entityId, transactions, amount }) => (\n                <GenericItemLink\n                  key={entityId}\n                  showTransactionCount={showTransactionCount}\n                  to={\n                    linkFunction && !!entitiesById[entityId]\n                      ? linkFunction(entityId)\n                      : null\n                  }\n                  transactions={transactions}\n                  name={get(\"name\")(entitiesById[entityId]) || emptyName}\n                  amount={showAverage ? amount / numMonths : amount}\n                  expectNegative={expectNegative}\n                  expectPositive={expectPositive}\n                  selected={entityId === selectedEntityId}\n                  total={total}\n                  id={entityId}\n                  onClick={onClickEntity}\n                  isContinuing\n                />\n              ))}\n            </Fragment>\n          </Collapsible>\n        )}\n        {!!otherEntities.length && limitShowing && (\n          <SeeAll\n            count={entities.length}\n            pluralizedName={keyToPluralizedName[entityKey]}\n            showAll={showAll}\n            onToggle={this.handleToggleShowAll}\n          />\n        )}\n      </CollapsibleSection>\n    );\n  }\n}\n\nconst MaybeLink = ({ to, children, ...other }) =>\n  to ? (\n    <Link {...other} to={to}>\n      {children}\n    </Link>\n  ) : (\n    <span {...other}>{children}</span>\n  );\n\nclass GenericItemLink extends PureComponent {\n  render() {\n    const {\n      showTransactionCount,\n      to,\n      transactions,\n      name,\n      amount,\n      expectNegative,\n      expectPositive,\n      total,\n      selected,\n      id,\n      onClick,\n      isContinuing,\n    } = this.props;\n    return (\n      <ListItem\n        isContinuing={isContinuing}\n        onClick={onClick && (() => onClick(id))}\n      >\n        {showTransactionCount ? (\n          <LabelWithTransactionCount\n            count={transactions}\n            label={name}\n            selected={selected}\n            to={to}\n          />\n        ) : (\n          <MaybeLink\n            to={to}\n            onClick={\n              to &&\n              ((evt) => {\n                evt.stopPropagation();\n              })\n            }\n          >\n            <SecondaryText\n              style={{\n                whiteSpace: \"pre\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                color: \"inherit\",\n                fontWeight: selected && 700,\n              }}\n            >\n              {name}\n            </SecondaryText>\n          </MaybeLink>\n        )}\n        <AmountWithPercentage\n          amount={amount}\n          expectNegative={expectNegative}\n          expectPositive={expectPositive}\n          selected={selected}\n          total={total}\n        />\n      </ListItem>\n    );\n  }\n}\n\nGenericItemLink.propTypes = {\n  amount: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  total: PropTypes.number.isRequired,\n  transactions: PropTypes.number.isRequired,\n  id: PropTypes.string,\n  isContinuing: PropTypes.bool,\n  selected: PropTypes.bool,\n  showTransactionCount: PropTypes.bool,\n  to: PropTypes.string,\n};\n\nexport default GenericEntitiesSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport get from \"lodash/fp/get\";\nimport { SecondaryText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport Amount from \"./Amount\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst StyledListItem = styled(ListItem)`\n  border-top: 0;\n  padding-bottom: 0;\n`;\n\nconst DateSummaryTransaction = ({ category, payee, memo, amount }) => (\n  <StyledListItem isContinuing>\n    <div style={{ overflow: \"hidden\" }}>\n      <LabelWithMinorText\n        label={get(\"name\")(payee) || \"(no payee)\"}\n        minorText={\n          get(\"name\")(category) || \"(no category)\" + (memo ? ` (${memo})` : \"\")\n        }\n      />\n    </div>\n    <SecondaryText>\n      <Amount amount={amount} expectNegative />\n    </SecondaryText>\n  </StyledListItem>\n);\n\nDateSummaryTransaction.propTypes = {\n  amount: PropTypes.number.isRequired,\n  category: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  }),\n  isContinuing: PropTypes.bool,\n  memo: PropTypes.string,\n  payee: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n};\n\nexport default DateSummaryTransaction;\n","import React from \"react\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport Amount from \"./Amount\";\nimport styled from \"styled-components\";\nimport ListItem from \"./ListItem\";\n\nconst INDENTATION = 18;\n\nconst NodeWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${props => (props.isCompact ? \"0\" : \"8px 0\")};\n  user-select: none;\n\n  ${ListItem}:first-child > & {\n    padding-top: 0;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  box-sizing: border-box;\n  padding-left: 3px;\n  width: ${INDENTATION}px;\n  font-weight: 400;\n  color: #888;\n  font-size: 10px;\n`;\n\nconst ToggleNode = ({\n  expanded,\n  name,\n  id,\n  amount,\n  valueRenderer,\n  onToggle,\n  isCompact\n}) => (\n  <NodeWrapper onClick={onToggle} isCompact={isCompact}>\n    <SecondaryText\n      style={{ whiteSpace: \"pre\", display: \"flex\", alignItems: \"center\" }}\n    >\n      <IconWrapper>\n        <Icon icon=\"chevron-right\" transform={{ rotate: expanded ? 90 : 0 }} />\n      </IconWrapper>\n      {typeof name === \"function\" ? name({ expanded }) : name}\n    </SecondaryText>\n    {valueRenderer ? (\n      valueRenderer({ amount, id, faded: expanded })\n    ) : (\n      <SecondaryText style={{ opacity: expanded ? 0.3 : 1 }}>\n        <Amount amount={amount} expectNegative />\n      </SecondaryText>\n    )}\n  </NodeWrapper>\n);\n\nexport default ToggleNode;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport ListItem from \"./ListItem\";\nimport moment from \"moment\";\nimport { MinorText } from \"./typeComponents\";\nimport { sumByProp } from \"../dataUtils\";\nimport Collapsible from \"./Collapsible\";\nimport EmptyText from \"./EmptyText\";\nimport DateSummaryTransaction from \"./DateSummaryTransaction\";\nimport ToggleNode from \"./ToggleNode\";\n\nconst Container = styled(ListItem)`\n  display: block;\n`;\n\nconst DateSummary = ({\n  categoriesById,\n  date,\n  expanded,\n  payeesById,\n  transactions,\n  onToggleExpanded,\n}) => (\n  <Container>\n    <ToggleNode\n      amount={sumByProp(\"amount\")(transactions)}\n      expanded={expanded}\n      name={\n        <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n          {moment(date).calendar(null, {\n            sameDay: \"[Today]\",\n            nextDay: \"[Tomorrow]\",\n            nextWeek: \"dddd\",\n            lastDay: \"[Yesterday]\",\n            lastWeek: \"dddd\",\n            sameElse: \"DD/MM/YYYY\",\n          })}\n          {!expanded && (\n            <MinorText>\n              {\" \"}\n              &ndash; {transactions.length} transaction\n              {transactions.length === 1 ? \"\" : \"s\"}\n            </MinorText>\n          )}\n        </div>\n      }\n      onToggle={onToggleExpanded}\n      isCompact\n    />\n    <Collapsible open={expanded}>\n      <div style={{ paddingLeft: 18 }}>\n        {transactions.length ? (\n          transactions.map((transaction) => (\n            <DateSummaryTransaction\n              key={transaction.id}\n              amount={transaction.amount}\n              payee={payeesById[transaction.payee_id]}\n              category={categoriesById[transaction.category_id]}\n              memo={transaction.memo}\n            />\n          ))\n        ) : (\n          <EmptyText style={{ margin: 0 }}>no transactions</EmptyText>\n        )}\n      </div>\n    </Collapsible>\n  </Container>\n);\n\nDateSummary.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  date: PropTypes.string.isRequired,\n  expanded: PropTypes.bool.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string,\n      payee_id: PropTypes.string,\n    })\n  ).isRequired,\n  onToggleExpanded: PropTypes.func.isRequired,\n};\n\nexport default DateSummary;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { groupByProp } from \"../dataUtils\";\nimport moment from \"moment\";\nimport range from \"lodash/fp/range\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport DateSummary from \"./DateSummary\";\n\nconst NUM_DAYS = 5;\n\nconst RecentSpending = ({\n  categoriesById,\n  currentMonth,\n  payeesById,\n  transactions\n}) => {\n  const transactionsByDate = groupByProp(\"date\")(transactions);\n  const recentDays = range(0, NUM_DAYS)\n    .map(n =>\n      moment()\n        .subtract(n, \"days\")\n        .format(\"YYYY-MM-DD\")\n    )\n    .filter(date => date.startsWith(currentMonth));\n\n  const [expanded, setExpanded] = useState(\n    recentDays.reduce((acc, date) => ({ ...acc, [date]: false }), {})\n  );\n\n  return (\n    <CollapsibleSection title=\"Recent Spending\">\n      {recentDays.map(date => (\n        <DateSummary\n          key={date}\n          categoriesById={categoriesById}\n          date={date}\n          expanded={!!expanded[date]}\n          onToggleExpanded={() => {\n            setExpanded({ ...expanded, [date]: !expanded[date] });\n          }}\n          payeesById={payeesById}\n          transactions={transactionsByDate[date] || []}\n        />\n      ))}\n    </CollapsibleSection>\n  );\n};\n\nRecentSpending.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired\n    })\n  ).isRequired\n};\n\nexport default RecentSpending;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport {\n  getTransactionMonth,\n  isTransfer,\n  isStartingBalanceOrReconciliation,\n  isIncome,\n  sanitizeName\n} from \"../budgetUtils\";\nimport { notAny } from \"../dataUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useSelectedEntityId } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport RecentSpending from \"./RecentSpending\";\n\nconst CurrentMonthPage = ({\n  budget,\n  currentMonth,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedGroupId, onSelectGroupId] = useSelectedEntityId();\n\n  const {\n    categoryGroupsById,\n    categoriesById,\n    payeesById,\n    id: budgetId\n  } = budget;\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\n  const transactions = budget.transactions.filter(\n    notAny([\n      isIncome(budget),\n      isTransfer(investmentAccounts),\n      isStartingBalanceOrReconciliation(budget)\n    ])\n  );\n  const transactionsThisMonth = takeWhile(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  )(transactions);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            budgetId={budget.id}\n            currentMonth={currentMonth}\n            transactions={transactions}\n            highlightFunction={\n              selectedGroupId &&\n              (transaction =>\n                categoriesById[transaction.category_id].category_group_id ===\n                selectedGroupId)\n            }\n            title={\n              selectedGroup\n                ? `Day by Day: ${sanitizeName(selectedGroup.name)}`\n                : \"Day by Day\"\n            }\n          />\n          <RecentSpending\n            categoriesById={categoriesById}\n            currentMonth={currentMonth}\n            payeesById={payeesById}\n            transactions={transactionsThisMonth}\n          />\n          <GenericEntitiesSection\n            entitiesById={categoryGroupsById}\n            entityFunction={transaction =>\n              categoriesById[transaction.category_id].category_group_id\n            }\n            entityKey=\"category_group_id\"\n            expectNegative\n            linkFunction={groupId =>\n              makeLink(pages.currentMonthGroup.path, {\n                budgetId,\n                categoryGroupId: groupId\n              })\n            }\n            selectedEntityId={selectedGroupId}\n            title=\"Category Groups\"\n            transactions={transactionsThisMonth}\n            showTransactionCount\n            onClickEntity={onSelectGroupId}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport findIndex from \"lodash/fp/findIndex\";\nimport { selectedPlotBandColor } from \"../styleVariables\";\nimport Chart from \"./Chart\";\n\nconst MonthlyChart = ({\n  average,\n  data,\n  height,\n  series,\n  selectedMonth,\n  stacked,\n  onSelectMonth\n}) => {\n  const yearLines = [];\n  const plotBands = [];\n  const categories = data.map(d => moment(d.month).format(\"MMM\"));\n  let highlights = null;\n\n  if (selectedMonth) {\n    highlights = { months: [selectedMonth], color: selectedPlotBandColor };\n  }\n\n  data.forEach(({ month }, index) => {\n    if (moment(month).format(\"MMM\") === \"Jan\") {\n      yearLines.push({\n        color: \"#ccc\",\n        width: 1,\n        value: index - 0.5,\n        zIndex: 3\n      });\n    }\n  });\n\n  if (highlights) {\n    highlights.months.forEach(month => {\n      const index = findIndex(d => d.month === month)(data);\n      plotBands.push({\n        color: highlights.color,\n        from: index - 0.5,\n        to: index + 0.5\n      });\n    });\n  }\n\n  return (\n    <Chart\n      key={data.length}\n      options={{\n        chart: {\n          animation: false,\n          height,\n          type: \"column\",\n          events: {\n            click: event => {\n              onSelectMonth &&\n                onSelectMonth(data[Math.round(event.xAxis[0].value)].month);\n            }\n          }\n        },\n        xAxis: {\n          categories,\n          plotBands,\n          plotLines: yearLines\n        },\n        yAxis: {\n          endOnTick: false,\n          startOnTick: false,\n          gridLineColor: \"#f0f0f0\",\n          labels: {\n            align: \"left\",\n            x: 0,\n            y: -2,\n            style: { color: \"#bbb\", fontSize: \"9px\" },\n            zIndex: 3\n          },\n          tickPixelInterval: 30,\n          title: { text: null },\n          plotLines: average && [\n            {\n              color: \"#aaa\",\n              dashStyle: \"Dot\",\n              width: 1,\n              value: -average,\n              zIndex: 2\n            }\n          ]\n        },\n        plotOptions: {\n          series: { animation: false, stacking: stacked ? \"normal\" : null }\n        },\n        series: series.map(s => {\n          if (s.type === \"line\") {\n            return {\n              color: s.color,\n              data: data.map(s.valueFunction),\n              enableMouseTracking: false,\n              type: \"line\",\n              lineWidth: 1,\n              marker: {\n                radius: 0\n              },\n              zIndex: 3\n            };\n          }\n\n          return {\n            borderWidth: 0,\n            color: s.color,\n            data: data.map(s.valueFunction),\n            enableMouseTracking: false,\n            states: { hover: { brightness: 0 } }\n          };\n        })\n      }}\n    />\n  );\n};\n\nMonthlyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      month: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  series: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string.isRequired,\n      valueFunction: PropTypes.func.isRequired,\n      type: PropTypes.oneOf([\"line\"])\n    })\n  ).isRequired,\n  average: PropTypes.number,\n  height: PropTypes.number,\n  selectedMonth: PropTypes.string,\n  stacked: PropTypes.bool,\n  onSelectMonth: PropTypes.func\n};\n\nMonthlyChart.defaultProps = { height: 140, stacked: true };\n\nexport default MonthlyChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { primaryColor } from \"../styleVariables\";\n\nconst PADDING = 2;\nconst WIDTH = 32;\nconst HEIGHT = 18;\n\nconst Track = styled.div`\n  box-sizing: border-box;\n  padding: ${PADDING}px;\n  display: inline-block;\n  width: ${WIDTH}px;\n  height: ${HEIGHT}px;\n  border-radius: ${HEIGHT / 2}px;\n  background-color: ${props => (props.on ? primaryColor : \"#ddd\")};\n  transition: background-color 0.15s ease-in-out;\n`;\n\nconst Handle = styled.div`\n  box-sizing: border-box;\n  height: ${HEIGHT - 2 * PADDING}px;\n  width: ${HEIGHT - 2 * PADDING}px;\n  border-radius: 50%;\n  background-color: #fff;\n  transform: translate3d(${props => (props.on ? WIDTH - HEIGHT : 0)}px, 0, 0);\n  transition: transform 0.15s ease-in-out;\n`;\n\nconst Toggle = ({ on, onClick }) => (\n  <Track on={on} onClick={onClick}>\n    <Handle on={on} />\n  </Track>\n);\n\nToggle.propTypes = {\n  on: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Toggle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Toggle from \"./Toggle\";\n\nconst Container = styled.div`\n  user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px 0;\n`;\n\nconst Label = styled.div``;\n\nconst ToggleWithLabel = ({ label, name, checked, onChange }) => (\n  <Container\n    onClick={() => {\n      onChange({ target: { name, checked: !checked } });\n    }}\n  >\n    <Label>{label}</Label>\n    <Toggle\n      on={checked}\n      onClick={() => {\n        onChange({ target: { name, checked: !checked } });\n      }}\n    />\n  </Container>\n);\n\nToggleWithLabel.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default ToggleWithLabel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"./Modal\";\nimport ToggleWithLabel from \"./ToggleWithLabel\";\nimport { MinorText } from \"./typeComponents\";\n\nconst MonthByMonthSettingsModal = ({\n  excludeFirstMonth,\n  excludeLastMonth,\n  open,\n  onClose,\n  onSetExclusion\n}) => (\n  <Modal open={open} onClose={onClose} title=\"Chart Settings\" width={240}>\n    <ToggleWithLabel\n      checked={excludeFirstMonth}\n      label=\"Exclude first month\"\n      name=\"excludeFirstMonth\"\n      onChange={() => {\n        onSetExclusion({ month: \"first\", exclude: !excludeFirstMonth });\n      }}\n    />\n    <ToggleWithLabel\n      checked={excludeLastMonth}\n      label=\"Exclude last month\"\n      name=\"excludeLastMonth\"\n      onChange={() => {\n        onSetExclusion({ month: \"last\", exclude: !excludeLastMonth });\n      }}\n    />\n    <MinorText style={{ marginTop: 5 }}>\n      Excluding incomplete months may lead to more representative averages\n    </MinorText>\n  </Modal>\n);\n\nMonthByMonthSettingsModal.propTypes = {\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired\n};\n\nexport default MonthByMonthSettingsModal;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport { groupBy, sumByProp } from \"../dataUtils\";\nimport { lightPrimaryColor, lighterPrimaryColor } from \"../styleVariables\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport MonthlyChart from \"./MonthlyChart\";\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\n\nconst MonthByMonthSection = ({\n  excludeFirstMonth,\n  excludeLastMonth,\n  expectPositive,\n  highlightFunction,\n  months,\n  selectedMonth,\n  title,\n  transactions,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n\n  let total = 0;\n  let selectedMonthTotal = 0;\n\n  const transactionsByMonth = groupBy(getTransactionMonth)(transactions);\n  const data = months.map(month => {\n    const grouped = groupBy(highlightFunction || (() => false))(\n      transactionsByMonth[month] || []\n    );\n    const amount = sumByProp(\"amount\")(grouped.false || []);\n    const highlighted = sumByProp(\"amount\")(grouped.true || []);\n    total += highlightFunction ? highlighted : amount;\n    if (month === selectedMonth) {\n      selectedMonthTotal = highlightFunction ? highlighted : amount;\n    }\n\n    return {\n      month,\n      amount: expectPositive ? amount : -amount,\n      highlighted: expectPositive ? highlighted : -highlighted\n    };\n  });\n\n  const chartNumbers = selectedMonth\n    ? [\n        { amount: total / months.length, label: \"average\" },\n        {\n          amount: selectedMonthTotal,\n          label: moment(selectedMonth).format(\"MMM YYYY\")\n        }\n      ]\n    : [\n        { amount: total / months.length, label: \"average\" },\n        {\n          amount: total,\n          label: \"total\"\n        }\n      ];\n  const series = [\n    {\n      color: highlightFunction ? lightPrimaryColor : lighterPrimaryColor,\n      valueFunction: d => d.amount\n    }\n  ];\n\n  if (highlightFunction) {\n    series.push({\n      color: lighterPrimaryColor,\n      valueFunction: d => d.highlighted\n    });\n  }\n\n  return (\n    <CollapsibleSection\n      title={title}\n      hasSettings\n      onClickSettings={() => {\n        setSettingsModalOpen(true);\n      }}\n    >\n      <ChartNumbers numbers={chartNumbers} expectPositive={expectPositive} />\n      <MonthlyChart\n        data={data}\n        average={total / months.length}\n        series={series}\n        selectedMonth={selectedMonth}\n        onSelectMonth={onSelectMonth}\n      />\n      <MonthByMonthSettingsModal\n        excludeFirstMonth={excludeFirstMonth}\n        excludeLastMonth={excludeLastMonth}\n        open={settingsModalOpen}\n        onClose={() => {\n          setSettingsModalOpen(false);\n        }}\n        onSetExclusion={onSetExclusion}\n      />\n    </CollapsibleSection>\n  );\n};\n\nMonthByMonthSection.propTypes = {\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  highlightFunction: PropTypes.func,\n  selectedMonth: PropTypes.string,\n  title: PropTypes.string\n};\n\nMonthByMonthSection.defaultProps = { title: \"Month by Month\" };\n\nexport default MonthByMonthSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport {\n  useFlagState,\n  useMonthExclusions,\n  useSelectedEntityId,\n  useSelectedMonth\n} from \"../commonHooks\";\nimport { notAny, simpleMemoize } from \"../dataUtils\";\nimport {\n  getFirstMonth,\n  getTransactionMonth,\n  isIncome,\n  isStartingBalanceOrReconciliation,\n  isTransfer,\n  sanitizeName\n} from \"../budgetUtils\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst getFilteredTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\n    const firstMonth = getFirstMonth(budget);\n    const lastMonth = moment().format(\"YYYY-MM\");\n    return budget.transactions.filter(\n      notAny([\n        isStartingBalanceOrReconciliation(budget),\n        isTransfer(investmentAccounts),\n        transaction =>\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\n        transaction =>\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\n      ])\n    );\n  }\n);\n\nconst getFilteredIncomeTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\n    getFilteredTransactions(\n      budget,\n      investmentAccounts,\n      excludeFirstMonth,\n      excludeLastMonth\n    ).filter(transaction => isIncome(budget)(transaction))\n);\n\nconst IncomePage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [selectedPayeeId, onSelectPayeeId] = useSelectedEntityId();\n  const [showAverage, , , onToggleShowAverage] = useFlagState(true);\n\n  const { payeesById } = budget;\n  const filteredTransactions = getFilteredIncomeTransactions(\n    budget,\n    investmentAccounts,\n    excludeFirstMonth,\n    excludeLastMonth\n  );\n  const transactionsInSelectedMonth =\n    selectedMonth &&\n    filteredTransactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            expectPositive\n            highlightFunction={\n              selectedPayeeId &&\n              (transaction => transaction.payee_id === selectedPayeeId)\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            title={\n              selectedPayeeId\n                ? `Month by Month: ${sanitizeName(\n                    budget.payeesById[selectedPayeeId].name\n                  )}`\n                : \"Month by Month\"\n            }\n            transactions={filteredTransactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={`payee-${selectedMonth || \"all\"}`}\n            entityKey=\"payee_id\"\n            entitiesById={payeesById}\n            numMonths={selectedMonth ? 1 : months.length}\n            reverse\n            title={\n              selectedMonth\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Payees\"\n            }\n            transactions={transactionsInSelectedMonth || filteredTransactions}\n            selectedEntityId={selectedPayeeId}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage}\n            onClickEntity={onSelectPayeeId}\n            onToggleAverage={onToggleShowAverage}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nIncomePage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default IncomePage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport Amount from \"./Amount\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst Transaction = ({ category, payee, memo, date, amount, isContinuing }) => (\n  <ListItem isContinuing={isContinuing}>\n    <div style={{ overflow: \"hidden\" }}>\n      <LabelWithMinorText\n        label={get(\"name\")(payee) || \"(no payee)\"}\n        minorText={(get(\"name\")(category) || \"\") + (memo ? ` (${memo})` : \"\")}\n      />\n      <MinorText>{moment(date).format(\"dddd, MMM D\")}</MinorText>\n    </div>\n    <SecondaryText>\n      <Amount amount={amount} expectNegative />\n    </SecondaryText>\n  </ListItem>\n);\n\nTransaction.propTypes = {\n  amount: PropTypes.number.isRequired,\n  date: PropTypes.string.isRequired,\n  category: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  }),\n  isContinuing: PropTypes.bool,\n  memo: PropTypes.string,\n  payee: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n};\n\nexport default Transaction;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Transaction from \"./Transaction\";\nimport NoTransactions from \"./NoTransactions\";\n\nconst TransactionsSection = ({\n  transactions,\n  title,\n  categoriesById,\n  payeesById\n}) => (\n  <CollapsibleSection title={title}>\n    {transactions.length ? (\n      transactions.map(\n        ({\n          id,\n          category_id: categoryId,\n          payee_id: payeeId,\n          date,\n          memo,\n          amount\n        }) => (\n          <Transaction\n            key={id}\n            amount={amount}\n            category={categoriesById[categoryId]}\n            date={date}\n            memo={memo}\n            payee={payeesById[payeeId]}\n          />\n        )\n      )\n    ) : (\n      <NoTransactions />\n    )}\n  </CollapsibleSection>\n);\n\nTransactionsSection.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      payee_id: PropTypes.string\n    })\n  ).isRequired,\n  title: PropTypes.string\n};\n\nTransactionsSection.defaultProps = { title: \"Transactions\" };\n\nexport default TransactionsSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport { sumByProp } from \"../dataUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport TransactionsSection from \"./TransactionsSection\";\nimport { useSelectedEntityId } from \"../commonHooks\";\n\nconst CurrentMonthGroupPage = ({\n  budget,\n  categoryGroupId,\n  currentMonth,\n  historyAction,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedCategoryId, onSelectCategoryId] = useSelectedEntityId();\n  const {\n    id: budgetId,\n    payeesById,\n    categories: allCategories,\n    categoriesById,\n    transactions: allTransactions\n  } = budget;\n\n  const selectedCategory =\n    selectedCategoryId && categoriesById[selectedCategoryId];\n  const categories = allCategories.filter(\n    category => category.category_group_id === categoryGroupId\n  );\n  const categoryIds = categories.map(category => category.id);\n  const transactionsInGroup = allTransactions.filter(transaction =>\n    categoryIds.includes(transaction.category_id)\n  );\n  const transactionsInGroupForMonth = transactionsInGroup.filter(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  );\n  const highlightedTransactions =\n    selectedCategoryId &&\n    transactionsInGroupForMonth.filter(\n      transaction => transaction.category_id === selectedCategoryId\n    );\n\n  const spent = -sumByProp(\"activity\")(categories);\n  const available = sumByProp(\"balance\")(categories);\n\n  return (\n    <PageLayout\n      location={location}\n      historyAction={historyAction}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            budgetId={budgetId}\n            currentMonth={currentMonth}\n            highlightFunction={\n              selectedCategoryId &&\n              (transaction => transaction.category_id === selectedCategoryId)\n            }\n            title={\n              selectedCategory\n                ? `Day by Day: ${sanitizeName(selectedCategory.name)}`\n                : \"Day by Day\"\n            }\n            transactions={transactionsInGroup}\n            total={spent + available}\n          />\n          <GenericEntitiesSection\n            entityKey=\"category_id\"\n            entitiesById={categoriesById}\n            expectNegative\n            linkFunction={categoryId =>\n              makeLink(pages.currentMonthCategory.path, {\n                budgetId,\n                categoryGroupId,\n                categoryId\n              })\n            }\n            selectedEntityId={selectedCategoryId}\n            title=\"Categories\"\n            transactions={transactionsInGroupForMonth}\n            showTransactionCount\n            onClickEntity={onSelectCategoryId}\n          />\n          <TransactionsSection\n            categoriesById={categoriesById}\n            payeesById={payeesById}\n            transactions={\n              highlightedTransactions || transactionsInGroupForMonth\n            }\n            title={\n              selectedCategory\n                ? `Transactions: ${sanitizeName(selectedCategory.name)}`\n                : \"Transactions\"\n            }\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthGroupPage.propTypes = {\n  budget: PropTypes.shape({\n    categories: PropTypes.array.isRequired,\n    id: PropTypes.string.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    transactions: PropTypes.array.isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthGroupPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport TransactionsSection from \"./TransactionsSection\";\n\nconst CurrentMonthCategoryPage = ({\n  budget,\n  currentMonth,\n  categoryId,\n  historyAction,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    id: budgetId,\n    payeesById,\n    categoriesById,\n    transactions: allTransactions\n  } = budget;\n\n  const category = categoriesById[categoryId];\n  const transactionsInCategory = allTransactions.filter(\n    transaction => transaction.category_id === categoryId\n  );\n  const transactionsInCategoryForMonth = transactionsInCategory.filter(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  );\n\n  const spent = -category.activity;\n  const available = category.balance;\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            key={category ? category.name : \"day-by-day\"}\n            budgetId={budgetId}\n            currentMonth={currentMonth}\n            title=\"Day by Day\"\n            transactions={transactionsInCategory}\n            total={spent + available}\n          />\n          <TransactionsSection\n            categoriesById={categoriesById}\n            payeesById={payeesById}\n            transactions={transactionsInCategoryForMonth}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthCategoryPage.propTypes = {\n  budget: PropTypes.shape({\n    categories: PropTypes.array.isRequired,\n    id: PropTypes.string.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    transactions: PropTypes.array.isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  categoryId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthCategoryPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useTrendsShowAverage } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst GroupsPage = ({\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  sidebarTrigger,\n  title,\n  transactions,\n  selectedMonth,\n  selectedGroupId,\n  onSelectGroup,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\n\n  const { categoryGroupsById, categoriesById, id: budgetId } = budget;\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\n\n  const transactionsForMonth =\n    selectedMonth &&\n    transactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            highlightFunction={\n              selectedGroupId &&\n              (transaction =>\n                categoriesById[transaction.category_id].category_group_id ===\n                selectedGroupId)\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            title={\n              selectedGroup\n                ? `Month by Month: ${sanitizeName(selectedGroup.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={selectedMonth || \"all\"}\n            entityFunction={transaction =>\n              categoriesById[transaction.category_id].category_group_id\n            }\n            entityKey=\"category_group_id\"\n            entitiesById={categoryGroupsById}\n            expectNegative\n            linkFunction={categoryGroupId =>\n              makeLink(pages.group.path, { budgetId, categoryGroupId })\n            }\n            selectedEntityId={selectedGroupId}\n            title={\n              selectedMonth\n                ? `Category Groups: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Category Groups\"\n            }\n            transactions={transactionsForMonth || transactions}\n            onClickEntity={onSelectGroup}\n            numMonths={months.length}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage && !selectedMonth}\n            onToggleAverage={onToggleShowAverage}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nGroupsPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectGroup: PropTypes.func.isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedGroupId: PropTypes.string,\n  selectedMonth: PropTypes.string\n};\n\nexport default GroupsPage;\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport Collapsible from \"./Collapsible\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Transaction from \"./Transaction\";\nimport NoTransactions from \"./NoTransactions\";\nimport SeeAll from \"./SeeAll\";\n\nconst LIMIT = 3;\n\nclass TransactionsByMonthSection extends Component {\n  static propTypes = {\n    categoriesById: PropTypes.object.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    selectedMonth: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n    limitShowing: PropTypes.bool,\n    selectedCategoryId: PropTypes.string,\n    selectedPayeeId: PropTypes.string\n  };\n\n  static defaultProps = { limitShowing: true };\n\n  state = { allMounted: false, showAll: false };\n\n  handleToggleShowAll = () => {\n    const { allMounted, showAll } = this.state;\n\n    if (allMounted) {\n      this.setState({ showAll: !showAll });\n    } else {\n      this.setState({ allMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ showAll: true });\n      });\n    }\n  };\n\n  render() {\n    const {\n      categoriesById,\n      payeesById,\n      selectedCategoryId,\n      selectedPayeeId,\n      selectedMonth,\n      transactions,\n      limitShowing: limitShowingProp\n    } = this.props;\n    const { allMounted, showAll } = this.state;\n\n    const selectedCategory =\n      selectedCategoryId && categoriesById[selectedCategoryId];\n    const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\n    const month = moment(selectedMonth).format(\"MMMM\");\n    const transactionsForMonth = compose([\n      limitShowingProp\n        ? sortBy(\"amount\")\n        : transactions => transactions.reverse(),\n      transactions =>\n        transactions.filter(\n          transaction =>\n            getTransactionMonth(transaction) === selectedMonth &&\n            (!selectedCategoryId ||\n              transaction.category_id === selectedCategoryId) &&\n            (!selectedPayeeId || transaction.payee_id === selectedPayeeId)\n        )\n    ])(transactions);\n    const limitShowing =\n      limitShowingProp && transactionsForMonth.length > LIMIT + 2;\n    const topTransactions = limitShowing\n      ? transactionsForMonth.slice(0, LIMIT)\n      : transactionsForMonth;\n    const otherTransactions = limitShowing\n      ? transactionsForMonth.slice(LIMIT)\n      : [];\n\n    return (\n      <CollapsibleSection\n        title={\n          selectedPayee\n            ? `Transactions: ${month}, ${selectedPayee.name}`\n            : selectedCategory\n              ? `Transactions: ${month}, ${selectedCategory.name}`\n              : `Transactions: ${month}`\n        }\n      >\n        {topTransactions.length ? (\n          topTransactions.map(\n            ({\n              id,\n              date,\n              amount,\n              memo,\n              payee_id: payeeId,\n              category_id: categoryId\n            }) => (\n              <Transaction\n                key={id}\n                amount={amount}\n                category={categoriesById[categoryId]}\n                date={date}\n                memo={memo}\n                payee={payeesById[payeeId]}\n              />\n            )\n          )\n        ) : (\n          <NoTransactions />\n        )}\n        {allMounted && (\n          <Collapsible open={showAll}>\n            <Fragment>\n              {otherTransactions.map(\n                ({\n                  id,\n                  date,\n                  amount,\n                  payee_id: payeeId,\n                  category_id: categoryId\n                }) => (\n                  <Transaction\n                    key={id}\n                    amount={amount}\n                    category={categoriesById[categoryId]}\n                    date={date}\n                    payee={payeesById[payeeId]}\n                    isContinuing\n                  />\n                )\n              )}\n            </Fragment>\n          </Collapsible>\n        )}\n        {!!otherTransactions.length && (\n          <SeeAll\n            count={transactionsForMonth.length}\n            pluralizedName=\"transactions\"\n            showAll={showAll}\n            onToggle={this.handleToggleShowAll}\n          />\n        )}\n      </CollapsibleSection>\n    );\n  }\n}\n\nexport default TransactionsByMonthSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useTrendsShowAverage } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst GroupPage = ({\n  budget,\n  categoryGroupId,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  selectedMonth,\n  selectedCategoryId,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSelectCategory,\n  onSetExclusion\n}) => {\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\n\n  const {\n    categories,\n    categoriesById,\n    categoryGroupsById,\n    payeesById,\n    id: budgetId\n  } = budget;\n  const categoryGroup = categoryGroupsById[categoryGroupId];\n  const selectedCategory =\n    selectedCategoryId && categoriesById[selectedCategoryId];\n  const categoriesInGroup = categories.filter(\n    category => category.category_group_id === categoryGroup.id\n  );\n  const categoryIds = categoriesInGroup.map(category => category.id);\n  const transactionsInGroup = transactions.filter(transaction =>\n    categoryIds.includes(transaction.category_id)\n  );\n  const transactionsInSelectedMonth =\n    selectedMonth &&\n    compose([\n      sortBy(\"amount\"),\n      transactions =>\n        transactions.filter(\n          transaction => getTransactionMonth(transaction) === selectedMonth\n        )\n    ])(transactionsInGroup);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            highlightFunction={\n              selectedCategoryId &&\n              (transaction => transaction.category_id === selectedCategoryId)\n            }\n            selectedMonth={selectedMonth}\n            title={\n              selectedCategory\n                ? `Month by Month: ${sanitizeName(selectedCategory.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactionsInGroup}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={`categories-${selectedMonth || \"all\"}`}\n            entityKey=\"category_id\"\n            entitiesById={categoriesById}\n            expectNegative\n            linkFunction={categoryId =>\n              makeLink(pages.category.path, {\n                budgetId,\n                categoryGroupId: categoryGroup.id,\n                categoryId\n              })\n            }\n            title={\n              selectedMonth\n                ? `Categories: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Categories\"\n            }\n            transactions={transactionsInSelectedMonth || transactionsInGroup}\n            selectedEntityId={selectedCategoryId}\n            onClickEntity={onSelectCategory}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage && !selectedMonth}\n            numMonths={months.length}\n            onToggleAverage={onToggleShowAverage}\n            limitShowing\n          />\n          {selectedMonth && transactionsInSelectedMonth.length > 0 && (\n            <TransactionsByMonthSection\n              key={`transactions-${selectedMonth ||\n                \"all\"}-${selectedCategoryId || \"all\"}`}\n              categoriesById={categoriesById}\n              payeesById={payeesById}\n              selectedMonth={selectedMonth}\n              selectedCategoryId={selectedCategoryId}\n              transactions={transactionsInSelectedMonth}\n            />\n          )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nGroupPage.propTypes = {\n  budget: PropTypes.shape({\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        categoryId: PropTypes.string\n      })\n    ).isRequired,\n    payeesById: PropTypes.object.isRequired,\n    categoryGroupsById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectCategory: PropTypes.func.isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedCategoryId: PropTypes.string,\n  selectedMonth: PropTypes.string\n};\n\nexport default GroupPage;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst INITIAL_STATE = {\n  selectedMonth: null,\n  selectedGroupId: null,\n  selectedCategoryId: null,\n  selectedPayeeId: null\n};\n\nclass CategoriesState extends Component {\n  static propTypes = {\n    action: PropTypes.oneOf([\"PUSH\", \"POP\", \"REPLACE\"]).isRequired,\n    children: PropTypes.func.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  state = INITIAL_STATE;\n\n  cachedStates = {};\n\n  getSnapshotBeforeUpdate() {\n    return this.state;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { location, action } = this.props;\n\n    if (location === prevProps.location) {\n      return;\n    }\n\n    if (action === \"POP\") {\n      this.cachedStates[prevProps.location] = snapshot;\n      this.setState(this.cachedStates[location]);\n    }\n\n    if (action === \"PUSH\") {\n      this.cachedStates[prevProps.location] = snapshot;\n      this.setState(INITIAL_STATE);\n    }\n\n    if (action === \"REPLACE\") {\n      this.setState(INITIAL_STATE);\n    }\n  }\n\n  handleSelectMonth = month => {\n    this.setState(state => ({\n      ...state,\n      selectedMonth: state.selectedMonth === month ? null : month\n    }));\n  };\n\n  handleSelectGroup = groupId => {\n    this.setState(state => ({\n      ...state,\n      selectedGroupId: state.selectedGroupId === groupId ? null : groupId\n    }));\n  };\n\n  handleSelectCategory = categoryId => {\n    this.setState(state => ({\n      ...state,\n      selectedCategoryId:\n        state.selectedCategoryId === categoryId ? null : categoryId\n    }));\n  };\n\n  handleSelectPayee = payeeId => {\n    this.setState(state => ({\n      ...state,\n      selectedPayeeId: state.selectedPayeeId === payeeId ? null : payeeId\n    }));\n  };\n\n  render() {\n    return this.props.children({\n      ...this.state,\n      onSelectMonth: this.handleSelectMonth,\n      onSelectGroup: this.handleSelectGroup,\n      onSelectCategory: this.handleSelectCategory,\n      onSelectPayee: this.handleSelectPayee,\n      onSetExclusion: this.handleSetExclusion\n    });\n  }\n}\n\nexport default CategoriesState;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\n\nconst CategoryPage = ({\n  categoryId,\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  selectedMonth,\n  selectedPayeeId,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSelectPayee,\n  onSetExclusion\n}) => {\n  const { categoriesById, payeesById, id: budgetId } = budget;\n  const category = categoriesById[categoryId];\n  const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\n  const transactionsForCategory = transactions.filter(\n    transaction => transaction.category_id === categoryId\n  );\n  const transactionsForMonth =\n    selectedMonth &&\n    transactionsForCategory.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            onSetExclusion={onSetExclusion}\n            highlightFunction={\n              selectedPayeeId &&\n              (transaction => transaction.payee_id === selectedPayeeId)\n            }\n            selectedMonth={selectedMonth}\n            title={\n              selectedPayee\n                ? `Month by Month: ${sanitizeName(selectedPayee.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactionsForCategory}\n            onSelectMonth={onSelectMonth}\n          />\n          <GenericEntitiesSection\n            key={`payees-${selectedMonth || \"all\"}`}\n            emptyName=\"(no payee)\"\n            entitiesById={payeesById}\n            entityKey=\"payee_id\"\n            expectNegative\n            linkFunction={payeeId =>\n              makeLink(pages.categoryPayee.path, {\n                budgetId,\n                categoryGroupId: category.category_group_id,\n                categoryId: categoryId,\n                payeeId\n              })\n            }\n            title={\n              selectedMonth\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Payees\"\n            }\n            transactions={transactionsForMonth || transactionsForCategory}\n            selectedEntityId={selectedPayeeId}\n            onClickEntity={onSelectPayee}\n            limitShowing\n          />\n          {selectedMonth &&\n            transactionsForMonth.length > 0 && (\n              <TransactionsByMonthSection\n                key={`transactions-${selectedMonth ||\n                  \"all\"}-${selectedPayeeId || \"all\"}`}\n                categoriesById={categoriesById}\n                payeesById={payeesById}\n                transactions={transactionsForMonth}\n                selectedMonth={selectedMonth}\n                selectedPayeeId={selectedPayeeId}\n              />\n            )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nCategoryPage.propTypes = {\n  budget: PropTypes.shape({\n    categoriesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        payee_id: PropTypes.string\n      })\n    ).isRequired,\n    payeesById: PropTypes.object.isRequired\n  }).isRequired,\n  categoryId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSelectPayee: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string,\n  selectedPayeeId: PropTypes.string\n};\n\nexport default CategoryPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\n\nconst CategoryPayeePage = ({\n  budget,\n  categoryId,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  payeeId,\n  selectedMonth,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const { categoriesById, payeesById } = budget;\n  const transactionsForCategoryAndPayee = transactions.filter(\n    transaction =>\n      transaction.category_id === categoryId && transaction.payee_id === payeeId\n  );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            selectedMonth={selectedMonth}\n            transactions={transactionsForCategoryAndPayee}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          {selectedMonth && (\n            <TransactionsByMonthSection\n              categoriesById={categoriesById}\n              payeesById={payeesById}\n              selectedMonth={selectedMonth}\n              transactions={transactionsForCategoryAndPayee}\n              limitShowing={false}\n            />\n          )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nCategoryPayeePage.propTypes = {\n  budget: PropTypes.shape({\n    payeesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    categoriesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  categoryId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  payeeId: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      payee_id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default CategoryPayeePage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  primaryColor,\n  lightPrimaryColor,\n  negativeChartColor\n} from \"../styleVariables\";\nimport MonthlyChart from \"./MonthlyChart\";\n\nconst IncomeVsExpensesChart = ({ data, onSelectMonth, selectedMonth }) => (\n  <MonthlyChart\n    data={data}\n    height={180}\n    selectedMonth={selectedMonth}\n    series={[\n      { color: lightPrimaryColor, valueFunction: d => d.income },\n      { color: negativeChartColor, valueFunction: d => d.expenses },\n      {\n        type: \"line\",\n        color: primaryColor,\n        valueFunction: d => d.income + d.expenses\n      }\n    ]}\n    onSelectMonth={onSelectMonth}\n  />\n);\n\nIncomeVsExpensesChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      expenses: PropTypes.number.isRequired,\n      income: PropTypes.number.isRequired,\n      month: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default IncomeVsExpensesChart;\n","import React, { Component, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\nimport Collapsible from \"./Collapsible\";\nimport ListItem from \"./ListItem\";\nimport ToggleNode from \"./ToggleNode\";\n\nconst INDENTATION = 18;\n\nclass BreakdownNode extends Component {\n  static propTypes = {\n    amount: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n    isTopLevel: PropTypes.bool.isRequired,\n    name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    nodes: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n      })\n    ),\n    valueRenderer: PropTypes.func,\n  };\n\n  state = { expanded: false, childrenMounted: false };\n\n  handleToggleExpand = () => {\n    const { expanded, childrenMounted } = this.state;\n\n    if (childrenMounted) {\n      this.setState({ expanded: !expanded });\n    } else {\n      this.setState({ childrenMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ expanded: true });\n      });\n    }\n  };\n\n  render() {\n    const { name, id, amount, nodes, isTopLevel, valueRenderer } = this.props;\n    const { expanded, childrenMounted } = this.state;\n    const hasChildNodes = !!nodes && nodes.length > 0;\n\n    return (\n      <Container hasChildNodes={hasChildNodes} isTopLevel={isTopLevel}>\n        {hasChildNodes ? (\n          <ToggleNode\n            id={id}\n            name={name}\n            amount={amount}\n            expanded={expanded}\n            onToggle={this.handleToggleExpand}\n            valueRenderer={valueRenderer}\n          />\n        ) : (\n          <LeafNode\n            id={id}\n            name={name}\n            amount={amount}\n            valueRenderer={valueRenderer}\n          />\n        )}\n\n        {hasChildNodes && childrenMounted && (\n          <Collapsible open={expanded}>\n            <Nodes nodes={nodes} valueRenderer={valueRenderer} />\n          </Collapsible>\n        )}\n      </Container>\n    );\n  }\n}\n\nclass Nodes extends PureComponent {\n  render() {\n    const { nodes, valueRenderer } = this.props;\n    return (\n      <div style={{ paddingLeft: INDENTATION }}>\n        {nodes.map((node) => (\n          <BreakdownNode\n            {...node}\n            key={node.id}\n            isTopLevel={false}\n            valueRenderer={valueRenderer}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst NodeWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  user-select: none;\n\n  ${ListItem}:first-child > & {\n    padding-top: 0;\n  }\n`;\n\nconst LeafNode = ({ name, id, amount, valueRenderer }) => (\n  <NodeWrapper>\n    <SecondaryText>{name}</SecondaryText>\n    {valueRenderer ? (\n      valueRenderer({ amount, id })\n    ) : (\n      <SecondaryText>\n        <Amount amount={amount} />\n      </SecondaryText>\n    )}\n  </NodeWrapper>\n);\n\nconst Container = ({ isTopLevel, hasChildNodes, children }) =>\n  isTopLevel ? (\n    <ListItem style={{ display: \"block\", padding: 0 }}>{children}</ListItem>\n  ) : (\n    children\n  );\n\nexport default BreakdownNode;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BreakdownNode from \"./BreakdownNode\";\n\nconst Breakdown = ({ nodes, valueRenderer }) =>\n  nodes.map(({ id, name, amount, nodes }) => (\n    <BreakdownNode\n      key={id}\n      id={id}\n      name={name}\n      amount={amount}\n      nodes={nodes}\n      valueRenderer={valueRenderer}\n      isTopLevel\n    />\n  ));\n\nBreakdown.propTypes = {\n  nodes: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      id: PropTypes.string.isRequired,\n      name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n      nodes: PropTypes.array\n    })\n  ).isRequired,\n  valueRenderer: PropTypes.func\n};\n\nBreakdown.defaultProps = { reverse: false };\n\nexport default Breakdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport concat from \"lodash/fp/concat\";\nimport mapRaw from \"lodash/fp/map\";\nimport omit from \"lodash/fp/omit\";\nimport pick from \"lodash/fp/pick\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { sumByProp, groupByProp } from \"../dataUtils\";\nimport { getPayeeNodes } from \"../budgetUtils\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst ExpensesBreakdown = ({\n  categoriesById,\n  categoryGroupsById,\n  transactions,\n  totalIncome,\n  payeesById,\n  divideBy\n}) => {\n  const categoryNodes = compose([\n    map((transactions, categoryId) => {\n      const payeeNodes = getPayeeNodes({ payeesById, transactions }, divideBy);\n      return {\n        ...pick([\"id\", \"name\", \"category_group_id\"])(\n          categoriesById[categoryId]\n        ),\n        nodes: sortBy(\"amount\")(payeeNodes),\n        amount: sumByProp(\"amount\")(payeeNodes)\n      };\n    }),\n    groupByProp(\"category_id\")\n  ])(transactions);\n\n  const groupNodes = compose([\n    map((nodes, categoryGroupId) => {\n      const categoryNodes = map(omit(\"category_group_id\"))(nodes);\n      return {\n        ...pick([\"id\", \"name\"])(categoryGroupsById[categoryGroupId]),\n        nodes: sortBy(\"amount\")(categoryNodes),\n        amount: sumByProp(\"amount\")(categoryNodes)\n      };\n    }),\n    groupByProp(\"category_group_id\")\n  ])(categoryNodes);\n\n  const rootPayeeNodes = getPayeeNodes(\n    {\n      payeesById,\n      transactions: transactions.filter(transaction => !transaction.category_id)\n    },\n    divideBy\n  );\n\n  const nodes = compose([\n    nodes =>\n      concat(nodes)([\n        {\n          id: \"net\",\n          amount: -totalIncome - sumByProp(\"amount\")(nodes),\n          name: \"Net Income\"\n        }\n      ]),\n    sortBy(\"amount\"),\n    concat(rootPayeeNodes)\n  ])(groupNodes);\n\n  return (\n    <CollapsibleSection title=\"Expenses Breakdown\">\n      <Breakdown\n        nodes={nodes}\n        valueRenderer={node => (\n          <AmountWithPercentage {...node} expectNegative total={-totalIncome} />\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nExpensesBreakdown.propTypes = {\n  categoriesById: PropTypes.objectOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      category_group_id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  categoryGroupsById: PropTypes.objectOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  divideBy: PropTypes.number.isRequired,\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\n  totalIncome: PropTypes.number.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string\n    })\n  ).isRequired\n};\n\nExpensesBreakdown.defaultProps = { divideBy: 1 };\n\nexport default ExpensesBreakdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport { getPayeeNodes } from \"../budgetUtils\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\n\nconst IncomeBreakdown = ({ transactions, payeesById, divideBy }) => {\n  const nodes = getPayeeNodes({ payeesById, transactions }, divideBy);\n  const total = sumBy(\"amount\")(nodes);\n  return (\n    <CollapsibleSection title=\"Income Breakdown\">\n      <Breakdown\n        nodes={sortBy(\"amount\")(nodes).reverse()}\n        total={total}\n        valueRenderer={node => (\n          <AmountWithPercentage {...node} expectPositive total={total} />\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nIncomeBreakdown.propTypes = {\n  divideBy: PropTypes.number.isRequired,\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      categoryId: PropTypes.string\n    })\n  ).isRequired\n};\n\nIncomeBreakdown.defaultProps = { divideBy: 1 };\n\nexport default IncomeBreakdown;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { sumByProp } from \"../dataUtils\";\nimport ExpensesBreakdown from \"./ExpensesBreakdown\";\nimport IncomeBreakdown from \"./IncomeBreakdown\";\n\nconst Breakdowns = ({\n  categoriesById,\n  categoryGroupsById,\n  payeesById,\n  expenseTransactions,\n  incomeTransactions,\n  divideBy\n}) => (\n  <Fragment>\n    <ExpensesBreakdown\n      categoriesById={categoriesById}\n      categoryGroupsById={categoryGroupsById}\n      payeesById={payeesById}\n      transactions={expenseTransactions}\n      totalIncome={sumByProp(\"amount\")(incomeTransactions) / divideBy}\n      divideBy={divideBy}\n    />\n    <IncomeBreakdown\n      payeesById={payeesById}\n      transactions={incomeTransactions}\n      divideBy={divideBy}\n    />\n  </Fragment>\n);\n\nBreakdowns.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  categoryGroupsById: PropTypes.object.isRequired,\n  expenseTransactions: PropTypes.array.isRequired,\n  incomeTransactions: PropTypes.array.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  divideBy: PropTypes.number.isRequired\n};\n\nexport default Breakdowns;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compact from \"lodash/fp/compact\";\nimport compose from \"lodash/fp/compose\";\nimport find from \"lodash/fp/find\";\nimport flatMap from \"lodash/fp/flatMap\";\nimport mapRaw from \"lodash/fp/map\";\nimport matchesProperty from \"lodash/fp/matchesProperty\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { sumByProp, groupBy, simpleMemoize } from \"../dataUtils\";\nimport { getTransactionMonth, isIncome } from \"../budgetUtils\";\nimport { SecondaryText } from \"./typeComponents\";\nimport PageLayout from \"./PageLayout\";\nimport IncomeVsExpensesChart from \"./IncomeVsExpensesChart\";\nimport Breakdowns from \"./Breakdowns\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\nimport { useSelectedMonth } from \"../commonHooks\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst getSummaries = simpleMemoize((transactions, investmentAccounts, budget) =>\n  compose([\n    sortBy(\"month\"),\n    map((transactions, month) => {\n      const grouped = groupBy(isIncome(budget))(transactions);\n\n      return {\n        month,\n        expenseTransactions: grouped.false || [],\n        incomeTransactions: grouped.true || [],\n        income: sumByProp(\"amount\")(grouped.true || []),\n        expenses: sumByProp(\"amount\")(grouped.false || [])\n      };\n    }),\n    groupBy(getTransactionMonth)\n  ])(transactions)\n);\n\nconst IncomeVsExpensesPage = ({\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSetExclusion\n}) => {\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n  const [showTotals, setShowTotals] = useState(false);\n  const { categoriesById, categoryGroupsById, payeesById } = budget;\n\n  const allSummaries = getSummaries(transactions, investmentAccounts, budget);\n  const summaries = selectedMonth\n    ? [find(matchesProperty(\"month\", selectedMonth))(allSummaries)]\n    : allSummaries;\n\n  const incomeTransactions = flatMap(summary => summary.incomeTransactions)(\n    compact(summaries)\n  );\n  const expenseTransactions = flatMap(summary => summary.expenseTransactions)(\n    compact(summaries)\n  );\n\n  const totalExpenses = sumByProp(\"amount\")(expenseTransactions);\n  const totalIncome = sumByProp(\"amount\")(incomeTransactions);\n  const denominator = showTotals ? 1 : summaries.length;\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <CollapsibleSection\n            title=\"Monthly Trend\"\n            hasSettings\n            onClickSettings={() => {\n              setSettingsModalOpen(true);\n            }}\n            actions={\n              <SecondaryText\n                onClick={() => {\n                  setShowTotals(!showTotals);\n                }}\n              >\n                {showTotals ? \"show average\" : \"show total\"}\n              </SecondaryText>\n            }\n          >\n            <ChartNumbers\n              expectPositive\n              numbers={[\n                {\n                  label: \"net income\",\n                  amount: (totalExpenses + totalIncome) / denominator\n                },\n                {\n                  label: \"expenses\",\n                  amount: -totalExpenses / denominator\n                },\n                {\n                  label: \"income\",\n                  amount: totalIncome / denominator\n                }\n              ]}\n            />\n            <IncomeVsExpensesChart\n              data={allSummaries}\n              selectedMonth={selectedMonth}\n              onSelectMonth={onSelectMonth}\n            />\n            <MonthByMonthSettingsModal\n              excludeFirstMonth={excludeFirstMonth}\n              excludeLastMonth={excludeLastMonth}\n              open={settingsModalOpen}\n              onClose={() => {\n                setSettingsModalOpen(false);\n              }}\n              onSetExclusion={onSetExclusion}\n            />\n          </CollapsibleSection>\n          <Breakdowns\n            categoriesById={categoriesById}\n            categoryGroupsById={categoryGroupsById}\n            payeesById={payeesById}\n            expenseTransactions={expenseTransactions}\n            incomeTransactions={incomeTransactions}\n            divideBy={showTotals ? 1 : summaries.length}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nIncomeVsExpensesPage.propTypes = {\n  budget: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    months: PropTypes.arrayOf(\n      PropTypes.shape({\n        month: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSetExclusion: PropTypes.func.isRequired\n};\n\nexport default IncomeVsExpensesPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport includes from \"lodash/fp/includes\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport { groupBy } from \"../dataUtils\";\nimport {\n  primaryColor,\n  lightPrimaryColor,\n  negativeChartColor\n} from \"../styleVariables\";\nimport MonthlyChart from \"./MonthlyChart\";\n\nconst CREDIT_ACCOUNTS = [\"mortgage\", \"creditCard\"];\nconst getStack = ({ type, id, mortgageAccounts }) => {\n  if (mortgageAccounts[id]) {\n    return \"liability\";\n  }\n\n  return includes(type)(CREDIT_ACCOUNTS) ? \"liability\" : \"asset\";\n};\n\nconst NetWorthChart = ({\n  data,\n  months,\n  mortgageAccounts,\n  selectedMonth,\n  onSelectMonth\n}) => {\n  const groupedData = groupBy(d =>\n    getStack({ type: d.type, id: d.id, mortgageAccounts })\n  )(data);\n  const monthlyData = months.map((month, index) => ({\n    month,\n    assets: sumBy(d => d.data[index])(groupedData.asset),\n    liabilities: sumBy(d => d.data[index])(groupedData.liability)\n  }));\n\n  return (\n    <MonthlyChart\n      selectedMonth={selectedMonth}\n      onSelectMonth={onSelectMonth}\n      data={monthlyData}\n      height={180}\n      series={[\n        {\n          color: negativeChartColor,\n          valueFunction: d => Math.max(-d.liabilities, 0)\n        },\n        {\n          color: lightPrimaryColor,\n          valueFunction: d => Math.max(d.assets, 0)\n        },\n        {\n          color: primaryColor,\n          type: \"line\",\n          valueFunction: d => d.assets + d.liabilities\n        }\n      ]}\n      stacked={false}\n    />\n  );\n};\n\nNetWorthChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      data: PropTypes.arrayOf(PropTypes.number).isRequired,\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default NetWorthChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport every from \"lodash/fp/every\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport mapRaw from \"lodash/fp/map\";\nimport propEq from \"lodash/fp/propEq\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport startCase from \"lodash/fp/startCase\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\nimport Toggle from \"./Toggle\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst getNodes = ({ accounts, investmentAccounts, mortgageAccounts }) => {\n  const accountsByGroup = groupBy(account => {\n    if (investmentAccounts[account.id]) {\n      return \"Investments\";\n    }\n\n    if (mortgageAccounts[account.id]) {\n      return \"Mortgages\";\n    }\n\n    return startCase(account.type);\n  })(accounts);\n\n  return compose([\n    accounts => accounts.reverse(),\n    sortBy(\"amount\"),\n    map((accounts, name) => ({\n      name,\n      accounts,\n      amount: sumBy(\"balance\")(accounts),\n      id: name,\n      nodes: compose([\n        sortBy(\"balance\"),\n        map(({ id, name, balance }) => ({\n          amount: balance,\n          id,\n          name\n        }))\n      ])(accounts)\n    }))\n  ])(accountsByGroup);\n};\n\nconst NetWorthAccounts = ({\n  accounts,\n  hiddenAccounts,\n  onToggleAccounts,\n  investmentAccounts,\n  mortgageAccounts\n}) => {\n  const accountsById = keyBy(\"id\")(accounts);\n  const nodes = getNodes({\n    accounts,\n    investmentAccounts,\n    mortgageAccounts\n  });\n\n  return (\n    <CollapsibleSection title=\"Accounts\">\n      <AccountBreakdown\n        accountsById={accountsById}\n        hiddenAccounts={hiddenAccounts}\n        nodes={nodes}\n        onToggleAccounts={onToggleAccounts}\n      />\n    </CollapsibleSection>\n  );\n};\n\nNetWorthAccounts.propTypes = {\n  accounts: PropTypes.arrayOf(\n    PropTypes.shape({\n      balance: PropTypes.number.isRequired,\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  hiddenAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onToggleAccounts: PropTypes.func.isRequired\n};\n\nconst AccountBreakdown = ({\n  accountsById,\n  hiddenAccounts,\n  nodes,\n  onToggleAccounts\n}) => (\n  <Breakdown\n    nodes={nodes}\n    valueRenderer={({ id, amount }) => {\n      const node = nodes.find(propEq(\"id\", id));\n      const accounts = node ? node.accounts : [accountsById[id]];\n\n      return (\n        <SecondaryText style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Amount amount={amount} />\n          <div\n            style={{ display: \"flex\", alignItems: \"center\", marginLeft: 10 }}\n          >\n            <Toggle\n              onClick={evt => {\n                evt.stopPropagation();\n                onToggleAccounts({ ids: map(\"id\")(accounts) });\n              }}\n              on={!every(account => hiddenAccounts[account.id])(accounts)}\n            />\n          </div>\n        </SecondaryText>\n      );\n    }}\n  />\n);\n\nexport default NetWorthAccounts;\n","import React from \"react\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport moment from \"moment\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst NetWorthChanges = ({ months, accountSummaries, hiddenAccounts }) => {\n  const totals = months.map(month => ({ month, total: 0 }));\n  accountSummaries.forEach(({ id, data }) => {\n    if (hiddenAccounts[id]) {\n      return;\n    }\n\n    data.forEach((num, index) => {\n      totals[index].total += num;\n    });\n  });\n\n  const changes = totals\n    .map((t, i) => ({\n      year: t.month.slice(0, 4),\n      month: t.month,\n      change: i === 0 ? null : t.total - totals[i - 1].total\n    }))\n    .reverse();\n\n  const years = groupBy(\"year\")(changes);\n\n  const nodes = Object.keys(years)\n    .sort()\n    .reverse()\n    .map(year => ({\n      amount: sumBy(\"change\")(years[year]),\n      id: year,\n      name: year,\n      nodes: years[year].map(v => ({\n        amount: v.change,\n        name: moment(v.month).format(\"MMMM\"),\n        id: v.month\n      }))\n    }));\n\n  return (\n    <CollapsibleSection title=\"Net Worth Changes\">\n      <Breakdown\n        nodes={nodes}\n        valueRenderer={({ faded, amount }) => (\n          <SecondaryText style={{ opacity: faded ? 0.3 : 1 }}>\n            <Amount amount={amount} positiveColor=\"green\" negativeColor=\"red\" />\n          </SecondaryText>\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nexport default NetWorthChanges;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport constant from \"lodash/fp/constant\";\nimport eq from \"lodash/fp/eq\";\nimport filter from \"lodash/fp/filter\";\nimport findIndex from \"lodash/fp/findIndex\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport identity from \"lodash/fp/identity\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport keys from \"lodash/fp/keys\";\nimport last from \"lodash/fp/last\";\nimport map from \"lodash/fp/map\";\nimport mapValues from \"lodash/fp/mapValues\";\nimport omitBy from \"lodash/fp/omitBy\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sum from \"lodash/fp/sum\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport values from \"lodash/fp/values\";\nimport { simpleMemoize } from \"../dataUtils\";\nimport { useSelectedMonth } from \"../commonHooks\";\nimport { getSetting, setSetting } from \"../uiRepo\";\nimport PageLayout from \"./PageLayout\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport NetWorthChart from \"./NetWorthChart\";\nimport NetWorthAccounts from \"./NetWorthAccounts\";\nimport NetWorthChanges from \"./NetWorthChanges\";\n\nconst useHiddenAccounts = budget => {\n  const [hiddenAccounts, setHiddenAccounts] = useState(\n    getSetting(\"netWorthHiddenAccounts\", budget.id)\n  );\n\n  const onToggleHiddenAccounts = ({ ids }) => {\n    const shouldHide = ids.some(id => !hiddenAccounts[id]);\n    const newHiddenAccounts = ids.reduce(\n      (acc, id) => ({ ...acc, [id]: shouldHide }),\n      hiddenAccounts\n    );\n\n    setHiddenAccounts(newHiddenAccounts);\n    setSetting(\"netWorthHiddenAccounts\", budget.id, newHiddenAccounts);\n  };\n\n  return { hiddenAccounts, onToggleHiddenAccounts };\n};\n\nconst cumulative = arr =>\n  arr.reduce(\n    (acc, curr) => (acc.length === 0 ? [curr] : acc.concat(last(acc) + curr)),\n    []\n  );\n\nconst groupByMonthAndAccount = simpleMemoize(\n  compose([\n    mapValues(groupBy(\"account_id\")),\n    groupBy(({ date }) => date.slice(0, 7))\n  ])\n);\n\nconst getMonths = simpleMemoize(budget =>\n  compose([sortBy(identity), keys, groupByMonthAndAccount])(budget.transactions)\n);\n\nconst getSummaryByAccount = simpleMemoize(budget => {\n  const groupedTransactions = groupByMonthAndAccount(budget.transactions);\n  const months = getMonths(budget);\n  return map(({ id }) => ({\n    id,\n    data: compose([\n      cumulative,\n      map(month => sumBy(\"amount\")(groupedTransactions[month][id]))\n    ])(months)\n  }))(budget.accounts);\n});\n\nconst getSelectedBalances = simpleMemoize((selectedMonth, budget) => {\n  const months = getMonths(budget);\n  const selectedMonthIndex = findIndex(eq(selectedMonth))(months);\n  const accountSummaries = getSummaryByAccount(budget);\n\n  return compose([\n    mapValues(({ data }) =>\n      selectedMonthIndex > -1 ? data[selectedMonthIndex] : last(data)\n    ),\n    keyBy(\"id\")\n  ])(accountSummaries);\n});\n\nconst NetWorthPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  mortgageAccounts,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const { hiddenAccounts, onToggleHiddenAccounts } = useHiddenAccounts(budget);\n  const months = getMonths(budget);\n  const accountSummaries = getSummaryByAccount(budget);\n  const selectedBalances = getSelectedBalances(selectedMonth, budget);\n  const filterHidden = omitBy((_, id) => hiddenAccounts[id]);\n  const selectedLiabilities = compose([\n    sum,\n    filter(b => b < 0),\n    values,\n    filterHidden\n  ])(selectedBalances);\n  const selectedAssets = compose([\n    sum,\n    filter(b => b > 0),\n    values,\n    filterHidden\n  ])(selectedBalances);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <CollapsibleSection title=\"Monthly Trend\">\n            <ChartNumbers\n              alwaysRound\n              expectPositive\n              numbers={[\n                {\n                  amount: selectedAssets + selectedLiabilities,\n                  label: \"Net Worth\"\n                },\n                { amount: selectedAssets, label: \"Assets\" },\n                { amount: -selectedLiabilities, label: \"Liabilities\" }\n              ]}\n            />\n            <NetWorthChart\n              data={map(({ id, data }) => ({\n                data: hiddenAccounts[id] ? data.map(constant(0)) : data,\n                type: budget.accountsById[id].type,\n                id\n              }))(accountSummaries)}\n              months={months}\n              mortgageAccounts={mortgageAccounts}\n              selectedMonth={selectedMonth}\n              onSelectMonth={onSelectMonth}\n            />\n          </CollapsibleSection>\n          <NetWorthAccounts\n            accounts={map(account => ({\n              ...account,\n              balance: selectedBalances[account.id]\n            }))(budget.accounts)}\n            hiddenAccounts={hiddenAccounts}\n            investmentAccounts={investmentAccounts}\n            mortgageAccounts={mortgageAccounts}\n            onToggleAccounts={onToggleHiddenAccounts}\n          />\n          <NetWorthChanges\n            accountSummaries={accountSummaries}\n            hiddenAccounts={hiddenAccounts}\n            months={months}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nNetWorthPage.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    accountsById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        account_id: PropTypes.string.isRequired,\n        amount: PropTypes.number.isRequired,\n        date: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  location: PropTypes.string.isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default NetWorthPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport keys from \"lodash/fp/keys\";\nimport get from \"lodash/fp/get\";\nimport EmptyText from \"./EmptyText\";\nimport { Link } from \"react-router-dom\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport {\n  useMonthExclusions,\n  useSelectedEntityId,\n  useSelectedMonth\n} from \"../commonHooks\";\n\nconst isContribution = investmentAccounts => transaction =>\n  !!investmentAccounts[transaction.account_id] &&\n  !!transaction.transfer_account_id &&\n  !investmentAccounts[transaction.transfer_account_id];\n\nconst isCapitalGainOrLoss = (investmentAccounts, payeesById) => transaction =>\n  !!investmentAccounts[transaction.account_id] &&\n  !transaction.transfer_account_id &&\n  get([transaction.payee_id, \"name\"])(payeesById) !== \"Starting Balance\";\n\nconst isInvestmentTransaction = (\n  investmentAccounts,\n  payeesById\n) => transaction =>\n  isContribution(investmentAccounts)(transaction) ||\n  isCapitalGainOrLoss(investmentAccounts, payeesById)(transaction);\n\nconst InvestmentsPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [selectedBreakdown, onSelectBreakdown] = useSelectedEntityId();\n\n  const { payeesById } = budget;\n\n  if (keys(investmentAccounts).length === 0) {\n    return (\n      <EmptyText>\n        You don't have any accounts marked as investment accounts.{\" \"}\n        <Link to={makeLink(pages.settings.path, { budgetId: budget.id })}>\n          Go to Settings\n        </Link>\n      </EmptyText>\n    );\n  }\n\n  const investmentTransactions = budget.transactions.filter(\n    isInvestmentTransaction(investmentAccounts, payeesById)\n  );\n  const transactionsInMonth =\n    selectedMonth &&\n    investmentTransactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            expectPositive\n            highlightFunction={\n              selectedBreakdown &&\n              (transaction =>\n                selectedBreakdown === \"contribution\"\n                  ? isContribution(investmentAccounts)(transaction)\n                  : isCapitalGainOrLoss(investmentAccounts, payeesById)(\n                      transaction\n                    ))\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            transactions={investmentTransactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            transactions={transactionsInMonth || investmentTransactions}\n            entitiesById={{\n              contribution: { name: \"Contributions\" },\n              capitalGain: { name: \"Capital Gains/Losses\" }\n            }}\n            expectPositive\n            title=\"Growth Breakdown\"\n            onClickEntity={onSelectBreakdown}\n            selectedEntityId={selectedBreakdown}\n            entityFunction={transaction =>\n              isContribution(investmentAccounts)(transaction)\n                ? \"contribution\"\n                : \"capitalGain\"\n            }\n            positiveIsRed\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nInvestmentsPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default InvestmentsPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  primaryColor,\n  negativeColor,\n  selectedPlotBandColor\n} from \"../styleVariables\";\nimport Chart from \"./Chart\";\n\nconst ProjectionsChart = ({\n  investmentsProjection,\n  mortgageProjection,\n  amountNeededToRetire,\n  yearsUntilRetirement\n}) => (\n  <Chart\n    options={{\n      chart: {\n        type: \"column\"\n      },\n      xAxis: {\n        type: \"category\",\n        plotBands: [\n          {\n            color: selectedPlotBandColor,\n            from: Math.floor(yearsUntilRetirement) - 0.5,\n            to: Math.floor(yearsUntilRetirement) + 0.5\n          }\n        ]\n      },\n      yAxis: {\n        title: { text: null },\n        endOnTick: false,\n        plotLines: [\n          {\n            value: amountNeededToRetire,\n            color: \"#ccc\",\n            width: 1\n          }\n        ]\n      },\n      legend: {\n        enabled: false\n      },\n      series: [\n        { data: investmentsProjection, color: primaryColor, borderWidth: 0 },\n        { data: mortgageProjection, color: negativeColor, borderWidth: 0 }\n      ]\n    }}\n  />\n);\n\nProjectionsChart.propTypes = {\n  amountNeededToRetire: PropTypes.number.isRequired,\n  investmentsProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  mortgageProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  yearsUntilRetirement: PropTypes.number.isRequired\n};\n\nexport default ProjectionsChart;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst isDescendant = (parent, child) => {\n  let node = child.parentNode;\n  while (node !== null) {\n    if (node === parent) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n  return false;\n};\n\nclass ClickOff extends Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n    onClickOff: PropTypes.func\n  };\n\n  parent = null;\n\n  componentDidMount() {\n    document.body.addEventListener(\"click\", this.handleBodyClick);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.handleBodyClick);\n  }\n\n  handleBodyClick = evt => {\n    if (this.props.onClickOff && !isDescendant(this.parent, evt.target)) {\n      this.props.onClickOff();\n    }\n  };\n\n  render() {\n    return this.props.children({\n      ref: el => {\n        this.parent = el;\n      }\n    });\n  }\n}\n\nexport default ClickOff;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport ClickOff from \"./ClickOff\";\nimport Collapsible from \"./Collapsible\";\nimport Button from \"./Button\";\n\nconst bodyEl = document.getElementsByTagName(\"body\")[0];\n\nconst Container = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #fff;\n`;\n\nconst ProjectionsSlider = ({\n  name,\n  formatter,\n  label,\n  value,\n  onBlur,\n  onChange,\n  onReset,\n  rangeOptions,\n}) =>\n  createPortal(\n    <ClickOff onClickOff={name && onBlur}>\n      {({ ref }) => (\n        <Container ref={ref}>\n          <Collapsible open={!!name}>\n            <div style={{ borderTop: \"1px solid #bbb\", padding: \"15px 20px\" }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  marginBottom: 15,\n                }}\n              >\n                {label}: {formatter(value || 0)}\n                <Button\n                  onClick={() => {\n                    onReset(name);\n                  }}\n                >\n                  reset\n                </Button>\n              </div>\n              <Range\n                {...rangeOptions}\n                name={name}\n                value={value || 0}\n                onChange={onChange}\n              />\n            </div>\n          </Collapsible>\n        </Container>\n      )}\n    </ClickOff>,\n    bodyEl\n  );\n\nProjectionsSlider.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  formatter: PropTypes.func,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.number,\n};\n\nProjectionsSlider.defaultProps = {\n  formatter: (val) => val,\n};\n\nconst Range = ({ name, onReset, ...other }) => (\n  <input\n    {...other}\n    name={name}\n    type=\"range\"\n    style={{ display: \"block\", width: \"100%\" }}\n  />\n);\n\nexport default ProjectionsSlider;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport chunk from \"lodash/fp/chunk\";\nimport compose from \"lodash/fp/compose\";\nimport get from \"lodash/fp/get\";\nimport head from \"lodash/fp/head\";\nimport map from \"lodash/fp/map\";\nimport pick from \"lodash/fp/pick\";\nimport range from \"lodash/fp/range\";\nimport { simpleMemoize, keyByProp } from \"../dataUtils\";\nimport { selectedPlotBandColor } from \"../styleVariables\";\nimport {\n  getMortgageRate,\n  getReturnOnInvestments,\n  getAverageContribution,\n  getCurrentInvestments,\n  getAverageExpensesWithoutMortgage,\n  getProjection,\n  getProjectionWithRetirement\n} from \"../projectionUtils\";\nimport PageLayout from \"./PageLayout\";\nimport Icon from \"./Icon\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ProjectionsChart from \"./ProjectionsChart\";\nimport ProjectionsSlider from \"./ProjectionsSlider\";\nimport ChartNumbers from \"./ChartNumbers\";\n\nconst YEARS_TO_PROJECT = 50;\n\nconst adjustableEntries = [\n  {\n    label: \"Average monthly contribution\",\n    name: \"averageContribution\",\n    formatter: val => `$${Math.round(val)}`\n  },\n  {\n    label: \"Average return on investments\",\n    name: \"returnOnInvestments\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  },\n  {\n    label: \"Average expenses without mortgage\",\n    name: \"averageExpenses\",\n    formatter: val => `$${Math.round(val)}`\n  },\n  {\n    label: \"Return on investment after retirement\",\n    name: \"retirementReturns\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  },\n  {\n    label: \"Average tax rate after retirement\",\n    name: \"retirementTaxRate\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  }\n];\n\nconst adjustableEntriesByName = keyByProp(\"name\")(adjustableEntries);\n\nconst getInitialState = simpleMemoize(\n  (budget, investmentAccounts, mortgageAccounts) => {\n    const {\n      paymentsLeft: remainingMortgagePayments,\n      mortgagePayment,\n      principalProjection: mortgageProjection\n    } = getMortgageRate(budget, mortgageAccounts) || {};\n    const returnOnInvestments = getReturnOnInvestments(\n      budget,\n      investmentAccounts\n    );\n    const averageContribution = getAverageContribution(\n      budget,\n      investmentAccounts\n    );\n    const currentInvestments = getCurrentInvestments(\n      budget,\n      investmentAccounts\n    );\n    const averageExpenses = getAverageExpensesWithoutMortgage(\n      budget,\n      investmentAccounts,\n      mortgageAccounts\n    );\n\n    return {\n      mortgagePayment,\n      remainingMortgagePayments,\n      mortgageProjection,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      averageExpenses,\n      retirementReturns: 0.04,\n      retirementTaxRate: 0.15,\n      maxAverageExpenses: Math.ceil((averageExpenses * 2) / 1000) * 1000,\n      maxAverageContribution: Math.ceil((averageContribution * 2) / 1000) * 1000\n    };\n  }\n);\n\nclass ProjectionsPage extends PureComponent {\n  static propTypes = {\n    budget: PropTypes.shape({\n      transactions: PropTypes.array.isRequired\n    }).isRequired,\n    historyAction: PropTypes.string.isRequired,\n    investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n    location: PropTypes.string.isRequired,\n    mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n    sidebarTrigger: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...getInitialState(\n        props.budget,\n        props.investmentAccounts,\n        props.mortgageAccounts\n      ),\n      adjustingName: null\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: parseFloat(e.target.value) });\n  };\n\n  handleSelectAdjusting = name => {\n    this.setState(state => ({\n      adjustingName: state.adjustingName === name ? null : name\n    }));\n  };\n\n  handleClearSelection = () => {\n    this.setState({ adjustingName: null });\n  };\n\n  handleResetCalculation = calculation => {\n    const { budget, investmentAccounts, mortgageAccounts } = this.props;\n    this.setState(\n      pick(calculation)(\n        getInitialState(budget, investmentAccounts, mortgageAccounts)\n      )\n    );\n  };\n\n  render() {\n    const { historyAction, location, sidebarTrigger, title } = this.props;\n    const {\n      mortgagePayment,\n      remainingMortgagePayments,\n      mortgageProjection,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      averageExpenses,\n      retirementReturns,\n      retirementTaxRate,\n      maxAverageExpenses,\n      maxAverageContribution,\n      adjustingName\n    } = this.state;\n\n    const projection = getProjection({\n      numMonths: YEARS_TO_PROJECT * 12,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments\n    });\n    const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\n    const amountNeededToRetire =\n      averageExpenses / (monthlyRetirementReturn * (1 - retirementTaxRate));\n    let m = 0;\n\n    while (m < projection.length) {\n      if (m < remainingMortgagePayments) {\n        const remainingMortgage = range(\n          0,\n          remainingMortgagePayments - m\n        ).reduce(\n          (acc, curr) =>\n            acc +\n            mortgagePayment /\n              (1 + monthlyRetirementReturn * (1 - retirementTaxRate)) ** curr,\n          0\n        );\n        if (\n          (projection[m] - remainingMortgage) *\n            monthlyRetirementReturn *\n            (1 - retirementTaxRate) >\n          averageExpenses\n        ) {\n          break;\n        }\n      } else {\n        if (\n          projection[m] * monthlyRetirementReturn * (1 - retirementTaxRate) >\n          averageExpenses\n        ) {\n          break;\n        }\n      }\n      m += 1;\n    }\n\n    const projectionWithRetirement = getProjectionWithRetirement({\n      numMonths: YEARS_TO_PROJECT * 12,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      monthsBeforeRetirement: m,\n      monthlyExpenses: averageExpenses,\n      retirementReturns,\n      retirementTaxRate,\n      remainingMortgagePayments,\n      mortgagePayment\n    });\n    const hasMortgage = !!mortgagePayment;\n\n    const yearsUntilRetirement = m / 12;\n    const projectionByYear = compose([map(head), chunk(12)])(\n      projectionWithRetirement\n    );\n    const mortgageProjectionByYear = compose([map(head), chunk(12)])(\n      mortgageProjection\n    );\n\n    const nameToRangeOptions = {\n      averageContribution: { min: 0, max: maxAverageContribution, step: 50 },\n      returnOnInvestments: { min: 0, max: 0.2, step: 0.001 },\n      averageExpenses: { min: 0, max: maxAverageExpenses, step: 50 },\n      retirementReturns: { min: 0, max: 0.2, step: 0.001 },\n      retirementTaxRate: { min: 0, max: 0.5, step: 0.001 }\n    };\n\n    return (\n      <PageLayout\n        historyAction={historyAction}\n        location={location}\n        sidebarTrigger={sidebarTrigger}\n        title={title}\n        content={\n          <Fragment>\n            <CollapsibleSection title=\"Projection\">\n              <ChartNumbers\n                numbers={[\n                  {\n                    amount: -amountNeededToRetire,\n                    label: \"needed for retirement\",\n                    decimalsToRound: 0\n                  },\n                  {\n                    amount: -yearsUntilRetirement,\n                    label: \"years to retirement\",\n                    isMoney: false,\n                    decimalsToRound: 1\n                  }\n                ]}\n              />\n              <ProjectionsChart\n                investmentsProjection={projectionByYear}\n                mortgageProjection={mortgageProjectionByYear}\n                amountNeededToRetire={amountNeededToRetire}\n                yearsUntilRetirement={yearsUntilRetirement}\n              />\n            </CollapsibleSection>\n            <CollapsibleSection title=\"Assumptions\">\n              {adjustableEntries.map(({ label, name, formatter }) => (\n                <AdjustableEntry\n                  key={name}\n                  label={label}\n                  name={name}\n                  value={this.state[name]}\n                  formatter={formatter}\n                  isAdjusting={adjustingName === name}\n                  onSelect={this.handleSelectAdjusting}\n                  onReset={this.handleResetCalculation}\n                  onChange={this.handleChange}\n                />\n              ))}\n              {hasMortgage && (\n                <Fragment>\n                  <Entry\n                    label=\"Mortgage payment\"\n                    value={mortgagePayment}\n                    formatter={val => `$${val.toFixed(2)}`}\n                  />\n                  <Entry\n                    label=\"Time remaining on mortgage\"\n                    value={remainingMortgagePayments}\n                    formatter={val => `${(val / 12).toFixed(1)} years`}\n                  />\n                </Fragment>\n              )}\n            </CollapsibleSection>\n            <ProjectionsSlider\n              name={adjustingName}\n              label={get([adjustingName, \"label\"])(adjustableEntriesByName)}\n              onReset={this.handleResetCalculation}\n              onChange={this.handleChange}\n              onBlur={this.handleClearSelection}\n              formatter={get([adjustingName, \"formatter\"])(\n                adjustableEntriesByName\n              )}\n              value={this.state[adjustingName]}\n              rangeOptions={nameToRangeOptions[adjustingName]}\n            />\n          </Fragment>\n        }\n      />\n    );\n  }\n}\n\nconst AdjustableEntry = ({\n  label,\n  value,\n  formatter,\n  name,\n  onSelect,\n  isAdjusting\n}) => (\n  <Entry\n    label={label}\n    value={value}\n    formatter={formatter}\n    onClick={() => {\n      onSelect(name);\n    }}\n    highlightValue={isAdjusting}\n    isAdjustable\n  />\n);\n\nconst Entry = ({\n  label,\n  value,\n  onClick,\n  highlightValue,\n  isAdjustable,\n  formatter = a => a\n}) => (\n  <div\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      padding: \"2px 0\"\n    }}\n  >\n    {label}:\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\n      <strong\n        style={{\n          backgroundColor: highlightValue ? selectedPlotBandColor : null,\n          padding: isAdjustable && \"0 4px\",\n          borderRadius: 2\n        }}\n      >\n        {formatter(value)}\n      </strong>\n      {isAdjustable && <Icon icon=\"pencil\" faded style={{ marginLeft: 4 }} />}\n    </div>\n  </div>\n);\n\nexport default ProjectionsPage;\n","import moment from \"moment\";\nimport add from \"lodash/fp/add\";\nimport compose from \"lodash/fp/compose\";\nimport concat from \"lodash/fp/concat\";\nimport filter from \"lodash/fp/filter\";\nimport find from \"lodash/fp/find\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport head from \"lodash/fp/head\";\nimport identity from \"lodash/fp/identity\";\nimport includes from \"lodash/fp/includes\";\nimport keys from \"lodash/fp/keys\";\nimport last from \"lodash/fp/last\";\nimport map from \"lodash/fp/map\";\nimport matches from \"lodash/fp/matches\";\nimport multiply from \"lodash/fp/multiply\";\nimport prop from \"lodash/fp/prop\";\nimport range from \"lodash/fp/range\";\nimport reduce from \"lodash/fp/reduce\";\nimport reject from \"lodash/fp/reject\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport takeRightWhile from \"lodash/fp/takeRightWhile\";\nimport uniq from \"lodash/fp/uniq\";\nimport { getTransactionMonth } from \"./budgetUtils\";\n\nexport const getMortgageRate = (\n  { accounts, transactions: allTransactions },\n  mortgageAccounts\n) => {\n  const mortgageAccount = find(account => mortgageAccounts[account.id])(\n    accounts\n  );\n\n  if (!mortgageAccount) {\n    return null;\n  }\n\n  const transactions = compose([\n    sortBy(\"date\"),\n    filter(matches({ account_id: mortgageAccount.id }))\n  ])(allTransactions);\n  const lastMonth = compose([t => t.date.slice(0, 7), last])(transactions);\n  const lastMonthTransactions = takeRightWhile(\n    t => t.date.slice(0, 7) === lastMonth\n  )(transactions);\n\n  const P = -compose([\n    sumBy(\"amount\"),\n    takeWhile(t => t.date.slice(0, 7) !== lastMonth)\n  ])(transactions);\n  const P1 = P - sumBy(\"amount\")(lastMonthTransactions);\n  const c = compose([prop(\"amount\"), find(prop(\"transfer_account_id\"))])(\n    lastMonthTransactions\n  );\n  const r = (P1 + c) / P - 1;\n  const N = -Math.log(1 - (r * P) / c) / Math.log(1 + r);\n\n  const rate = r * 12;\n  const paymentsLeft = N - 1;\n\n  const projection = map(n => (1 + r) ** n * P - (((1 + r) ** n - 1) / r) * c)(\n    range(1, N)\n  );\n\n  return {\n    rate,\n    mortgagePayment: c,\n    paymentsLeft,\n    principalProjection: projection\n  };\n};\n\nexport const getCurrentInvestments = (\n  { accounts, transactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  return compose([\n    sumBy(\"amount\"),\n    filter(({ account_id: accountId }) =>\n      includes(accountId)(investmentAccountIds)\n    )\n  ])(transactions);\n};\n\nexport const getReturnOnInvestments = (\n  { accounts, payees, transactions: allTransactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const transactionsByMonth = compose([\n    groupBy(tr => tr.date.slice(0, 7)),\n    reject(t => includes(t.transfer_account_id)(investmentAccountIds)), // remove transfers between investment accounts\n    filter(t => includes(t.account_id)(investmentAccountIds))\n  ])(allTransactions);\n\n  let startForMonth = 0;\n  const returnRates = [];\n\n  const months = compose([sortBy(identity), keys])(transactionsByMonth);\n  map(month => transactionsByMonth[month])(months).forEach(trs => {\n    const contributions = compose([\n      sumBy(\"amount\"),\n      filter(prop(\"transfer_account_id\"))\n    ])(trs);\n    const gains = reject(prop(\"transfer_account_id\"))(trs);\n    const returns = sumBy(\"amount\")(gains);\n\n    if (startForMonth && gains.length) {\n      returnRates.push(returns / (startForMonth + 0.5 * contributions));\n    }\n\n    startForMonth += returns + contributions;\n  });\n\n  const totalReturn = compose([reduce(multiply, 1), map(add(1))])(returnRates);\n  const numMonths = returnRates.length;\n\n  return totalReturn ** (12 / numMonths) - 1;\n};\n\nexport const getAverageContribution = (\n  { accounts, transactions: allTransactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const contributions = compose([\n    filter(\n      ({ transfer_account_id: transferAccountId }) =>\n        transferAccountId && !includes(transferAccountId)(investmentAccountIds)\n    ),\n    filter(({ account_id: accountId }) =>\n      includes(accountId)(investmentAccountIds)\n    )\n  ])(allTransactions);\n\n  const months = compose([\n    sortBy(identity),\n    uniq,\n    map(d => d.slice(0, 7)),\n    map(\"date\")\n  ])(contributions);\n\n  const totalContributions = sumBy(\"amount\")(contributions);\n  const numMonths =\n    moment(last(months)).diff(moment(head(months)), \"months\") + 1;\n\n  return totalContributions / numMonths;\n};\n\nexport const getAverageExpensesWithoutMortgage = (\n  { transactions, accounts, payees, categoriesById, categoryGroupsById },\n  investmentAccounts,\n  mortgageAccounts\n) => {\n  const startingBalanceId = compose([\n    prop(\"id\"),\n    find(matches({ name: \"Starting Balance\" }))\n  ])(payees);\n  const months = compose([sortBy(identity), uniq, map(getTransactionMonth)])(\n    transactions\n  );\n\n  const mortgageAccountIds = compose([\n    filter(id => mortgageAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const totalExpenses = compose([\n    sumBy(\"amount\"),\n    reject(\n      tr =>\n        tr.amount > 0 &&\n        !tr.transfer_account_id &&\n        (!tr.category_id ||\n          !categoryGroupsById[categoriesById[tr.category_id].category_group_id])\n    ),\n    reject(tr =>\n      includes(tr.transfer_account_id)(\n        concat(mortgageAccountIds, investmentAccountIds)\n      )\n    ),\n    reject(tr =>\n      includes(tr.account_id)(concat(mortgageAccountIds, investmentAccountIds))\n    ),\n    reject(tr =>\n      includes(getTransactionMonth(tr))([head(months), last(months)])\n    ),\n    reject(matches({ payee_id: startingBalanceId }))\n  ])(transactions);\n\n  return -totalExpenses / (months.length - 2);\n};\n\nexport const getProjection = ({\n  numMonths,\n  returnOnInvestments,\n  averageContribution,\n  currentInvestments\n}) => {\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\n  let amount = currentInvestments;\n  let projection = [];\n\n  do {\n    projection.push(amount);\n    amount +=\n      averageContribution + (amount + 0.5 * averageContribution) * monthlyRate;\n  } while (projection.length < numMonths);\n\n  return projection;\n};\n\nexport const getProjectionWithRetirement = ({\n  numMonths,\n  returnOnInvestments,\n  averageContribution,\n  currentInvestments,\n  monthsBeforeRetirement,\n  monthlyExpenses,\n  retirementReturns,\n  retirementTaxRate,\n  remainingMortgagePayments,\n  mortgagePayment\n}) => {\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\n  const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\n  let amount = currentInvestments;\n  let projection = [];\n\n  do {\n    projection.push(amount);\n    if (projection.length < monthsBeforeRetirement) {\n      amount +=\n        averageContribution +\n        (amount + 0.5 * averageContribution) * monthlyRate;\n    } else {\n      amount +=\n        amount * monthlyRetirementReturn * (1 - retirementTaxRate) -\n        monthlyExpenses;\n      if (projection.length < remainingMortgagePayments) {\n        amount -= mortgagePayment;\n      }\n    }\n  } while (projection.length < numMonths);\n\n  return projection;\n};\n","import styled from \"styled-components\";\n\nconst Section = styled.div`\n  margin: ${props => (props.top ? \"0\" : \"3px\")};\n  padding: ${props =>\n    props.noPadding ? \"0\" : props.top ? \"15px 23px\" : \"15px 20px\"};\n  background-color: #fff;\n  border: 1px solid #e5e5e5;\n  border-width: ${props => (props.top ? \"0 0 1px\" : \"1px\")};\n  border-radius: 2px;\n`;\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport omit from \"lodash/fp/omit\";\nimport ToggleWithLabel from \"./ToggleWithLabel\";\n\nconst AccountsSelectionForm = ({ accounts, value, onChange }) =>\n  accounts.map(({ id, name }) => (\n    <ToggleWithLabel\n      key={id}\n      checked={!!value[id]}\n      name={id}\n      onChange={evt => {\n        const { name, checked } = evt.target;\n\n        onChange(\n          checked\n            ? {\n                ...value,\n                [name]: true\n              }\n            : omit(name)(value)\n        );\n      }}\n      label={name}\n    />\n  ));\n\nAccountsSelectionForm.propTypes = {\n  accounts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  value: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default AccountsSelectionForm;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport EmptyText from \"./EmptyText\";\nimport Modal from \"./Modal\";\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\nimport { useFlagState } from \"../commonHooks\";\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SettingsInvestmentAccounts = ({ budget, investmentAccounts, onUpdateAccounts }) => {\n  const [\n    investmentModalOpen,\n    closeInvestmentModal,\n    openInvestmentModal\n  ] = useFlagState(false);\n\n  const potentialInvestmentAccounts = budget.accounts.filter(\n    account => account.type === \"otherAsset\" && !account.on_budget\n  );\n  const investmentAccountsList = budget.accounts.filter(\n    ({ id }) => investmentAccounts[id]\n  );\n\n  return (\n    <Fragment>\n      <SectionHeader>\n        <StrongText>Investment Accounts</StrongText>\n        <span onClick={openInvestmentModal}>\n          <Icon icon=\"pencil\" />\n        </span>\n      </SectionHeader>\n      {investmentAccountsList.length ? (\n        investmentAccountsList.map(({ id, name }) => (\n          <SecondaryText key={id}>{name}</SecondaryText>\n        ))\n      ) : (\n        <EmptyText>No accounts marked as investment</EmptyText>\n      )}\n      <MinorText style={{ marginTop: 10 }}>\n        Transfers to investment accounts are not counted as spending since it's\n        assumed it's for retirement or some other savings goal.\n      </MinorText>\n      <Modal\n        open={investmentModalOpen}\n        onClose={closeInvestmentModal}\n        title=\"Investment Accounts\"\n      >\n        <AccountsSelectionForm\n          accounts={potentialInvestmentAccounts}\n          value={investmentAccounts}\n          onChange={accountsObject => {\n            onUpdateAccounts({\n              type: \"investment\",\n              value: accountsObject\n            });\n          }}\n        />\n      </Modal>\n    </Fragment>\n  );\n};\n\nSettingsInvestmentAccounts.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        on_budget: PropTypes.bool.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired,\n};\n\nexport default SettingsInvestmentAccounts;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport EmptyText from \"./EmptyText\";\nimport Modal from \"./Modal\";\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\nimport { useFlagState } from \"../commonHooks\";\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SettingsMortgageAccounts = ({\n  budget,\n  mortgageAccounts,\n  onUpdateAccounts\n}) => {\n  const [\n    mortgageModalOpen,\n    closeMortgageModal,\n    openMortgageModal\n  ] = useFlagState(false);\n\n  const potentialMortageAccounts = budget.accounts.filter(\n    account => account.type === \"otherLiability\" && !account.on_budget\n  );\n  const mortgageAccountList = budget.accounts.filter(\n    ({ id }) => mortgageAccounts[id]\n  );\n\n  return (\n    <Fragment>\n      <SectionHeader>\n        <StrongText>Mortgage Accounts</StrongText>\n        <span onClick={openMortgageModal}>\n          <Icon icon=\"pencil\" />\n        </span>\n      </SectionHeader>\n      {mortgageAccountList.length ? (\n        mortgageAccountList.map(({ id, name }) => (\n          <SecondaryText key={id}>{name}</SecondaryText>\n        ))\n      ) : (\n        <EmptyText>No accounts marked as mortgage</EmptyText>\n      )}\n      <MinorText style={{ marginTop: 10 }}>\n        Mortgage accounts are used in the retirement calculator since it's a\n        significant expense you won't have in your retirement presumably.\n      </MinorText>\n      <Modal\n        open={mortgageModalOpen}\n        onClose={closeMortgageModal}\n        title=\"Mortgage Account\"\n      >\n        <AccountsSelectionForm\n          accounts={potentialMortageAccounts}\n          value={mortgageAccounts}\n          onChange={accountsObject => {\n            onUpdateAccounts({\n              type: \"mortgage\",\n              value: accountsObject\n            });\n          }}\n        />\n      </Modal>\n    </Fragment>\n  );\n};\n\nSettingsMortgageAccounts.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        on_budget: PropTypes.bool.isRequired,\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired\n};\n\nexport default SettingsMortgageAccounts;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Section from \"./Section\";\nimport PageLayout from \"./PageLayout\";\nimport SettingsInvestmentAccounts from \"./SettingsInvestmentAccounts\";\nimport SettingsMortgageAccounts from \"./SettingsMortgageAccounts\";\n\nconst Space = styled.div`\n  height: 20px;\n`;\n\nconst SettingsPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  mortgageAccounts,\n  sidebarTrigger,\n  title,\n  onUpdateAccounts\n}) => {\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <Section>\n            <SettingsInvestmentAccounts\n              budget={budget}\n              investmentAccounts={investmentAccounts}\n              onUpdateAccounts={onUpdateAccounts}\n            />\n            <Space />\n            <SettingsMortgageAccounts\n              budget={budget}\n              mortgageAccounts={mortgageAccounts}\n              onUpdateAccounts={onUpdateAccounts}\n            />\n          </Section>\n        </Fragment>\n      }\n    />\n  );\n};\n\nSettingsPage.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  location: PropTypes.string.isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired\n};\n\nexport default SettingsPage;\n","import React, { memo } from \"react\";\nimport { Switch, Route } from \"react-router\";\nimport moment from \"moment\";\nimport pages, { makeLink } from \"../pages\";\nimport CurrentMonthPage from \"./CurrentMonthPage\";\nimport IncomePage from \"./IncomePage\";\nimport CurrentMonthGroupPage from \"./CurrentMonthGroupPage\";\nimport CurrentMonthCategoryPage from \"./CurrentMonthCategoryPage\";\nimport GroupsPage from \"./GroupsPage\";\nimport GroupPage from \"./GroupPage\";\nimport { Link } from \"react-router-dom\";\nimport CategoriesState from \"./CategoriesState\";\nimport { notAny, simpleMemoize } from \"../dataUtils\";\nimport {\n  getFirstMonth,\n  getTransactionMonth,\n  isIncome,\n  isStartingBalanceOrReconciliation,\n  isTransfer\n} from \"../budgetUtils\";\nimport { useMonthExclusions } from \"../commonHooks\";\nimport CategoryPage from \"./CategoryPage\";\nimport CategoryPayeePage from \"./CategoryPayeePage\";\nimport IncomeVsExpensesPage from \"./IncomeVsExpensesPage\";\nimport NetWorthPage from \"./NetWorthPage\";\nimport InvestmentsPage from \"./InvestmentsPage\";\nimport ProjectionsPage from \"./ProjectionsPage\";\nimport SettingsPage from \"./SettingsPage\";\n\nconst getFilteredTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\n    const firstMonth = getFirstMonth(budget);\n    const lastMonth = moment().format(\"YYYY-MM\");\n    return budget.transactions.filter(\n      notAny([\n        isStartingBalanceOrReconciliation(budget),\n        isTransfer(investmentAccounts),\n        transaction =>\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\n        transaction =>\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\n      ])\n    );\n  }\n);\n\nconst getFilteredSpendingTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\n    getFilteredTransactions(\n      budget,\n      investmentAccounts,\n      excludeFirstMonth,\n      excludeLastMonth\n    ).filter(transaction => !isIncome(budget)(transaction))\n);\n\nconst PageContent = props => {\n  const {\n    budget,\n    currentMonth,\n    historyAction,\n    investmentAccounts,\n    location,\n    mortgageAccounts,\n    sidebarTrigger,\n    onUpdateAccounts\n  } = props;\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n\n  if (!budget) {\n    return null;\n  }\n\n  return (\n    <Switch>\n      <Route\n        path={pages.currentMonth.path}\n        exact\n        render={() => (\n          <CurrentMonthPage\n            budget={budget}\n            currentMonth={currentMonth}\n            investmentAccounts={investmentAccounts}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonth.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.currentMonthGroup.path}\n        exact\n        render={({ match }) => (\n          <CurrentMonthGroupPage\n            budget={budget}\n            categoryGroupId={match.params.categoryGroupId}\n            currentMonth={currentMonth}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonthGroup.title(match.params, budget)}\n          />\n        )}\n      />\n      <Route\n        path={pages.currentMonthCategory.path}\n        exact\n        render={({ match }) => (\n          <CurrentMonthCategoryPage\n            categoryId={match.params.categoryId}\n            budget={budget}\n            currentMonth={currentMonth}\n            categoryGroupId={match.params.categoryGroupId}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonthCategory.title(match.params, budget)}\n          />\n        )}\n      />\n      <Route\n        path={pages.income.path}\n        exact\n        render={() => (\n          <IncomePage\n            investmentAccounts={investmentAccounts}\n            budget={budget}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.income.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.incomeVsExpenses.path}\n        exact\n        render={() => {\n          const filteredTransactions = getFilteredTransactions(\n            props.budget,\n            props.investmentAccounts,\n            excludeFirstMonth,\n            excludeLastMonth\n          );\n\n          return (\n            <IncomeVsExpensesPage\n              budget={budget}\n              excludeFirstMonth={excludeFirstMonth}\n              excludeLastMonth={excludeLastMonth}\n              investmentAccounts={investmentAccounts}\n              historyAction={historyAction}\n              location={location}\n              sidebarTrigger={sidebarTrigger}\n              title={pages.incomeVsExpenses.title}\n              transactions={filteredTransactions}\n              onSetExclusion={onSetExclusion}\n            />\n          );\n        }}\n      />\n      <Route\n        path={pages.netWorth.path}\n        exact\n        render={() => (\n          <NetWorthPage\n            budget={budget}\n            historyAction={historyAction}\n            investmentAccounts={investmentAccounts}\n            location={location}\n            mortgageAccounts={mortgageAccounts}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.netWorth.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.investments.path}\n        exact\n        render={() => (\n          <InvestmentsPage\n            budget={budget}\n            investmentAccounts={investmentAccounts}\n            title={pages.investments.title}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n          />\n        )}\n      />\n      <Route\n        path={pages.projections.path}\n        exact\n        render={() => (\n          <ProjectionsPage\n            budget={budget}\n            investmentAccounts={investmentAccounts}\n            mortgageAccounts={mortgageAccounts}\n            title={pages.projections.title}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n          />\n        )}\n      />\n      <Route\n        path={pages.settings.path}\n        exact\n        render={() => (\n          <SettingsPage\n            budget={budget}\n            historyAction={historyAction}\n            investmentAccounts={investmentAccounts}\n            location={location}\n            mortgageAccounts={mortgageAccounts}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.settings.title}\n            onUpdateAccounts={onUpdateAccounts}\n          />\n        )}\n      />\n      <Route\n        path={pages.groups.path}\n        render={() => {\n          const filteredTransactions = getFilteredSpendingTransactions(\n            budget,\n            investmentAccounts,\n            excludeFirstMonth,\n            excludeLastMonth\n          );\n\n          return (\n            <CategoriesState action={historyAction} location={location}>\n              {({\n                selectedMonth,\n                selectedGroupId,\n                selectedCategoryId,\n                selectedPayeeId,\n                onSelectMonth,\n                onSelectGroup,\n                onSelectCategory,\n                onSelectPayee\n              }) => (\n                <Switch>\n                  <Route\n                    path={pages.groups.path}\n                    exact\n                    render={() => (\n                      <GroupsPage\n                        budget={budget}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedGroupId={selectedGroupId}\n                        selectedMonth={selectedMonth}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.groups.title}\n                        transactions={filteredTransactions}\n                        onSelectGroup={onSelectGroup}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.group.path}\n                    exact\n                    render={({ match }) => (\n                      <GroupPage\n                        budget={budget}\n                        categoryGroupId={match.params.categoryGroupId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedMonth={selectedMonth}\n                        selectedCategoryId={selectedCategoryId}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.group.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSelectCategory={onSelectCategory}\n                        onSelectMonth={onSelectMonth}\n                        onSetExclusion={onSetExclusion}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.category.path}\n                    exact\n                    render={({ match }) => (\n                      <CategoryPage\n                        budget={budget}\n                        categoryId={match.params.categoryId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedMonth={selectedMonth}\n                        selectedPayeeId={selectedPayeeId}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.category.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                        onSelectPayee={onSelectPayee}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.categoryPayee.path}\n                    exact\n                    render={({ match }) => (\n                      <CategoryPayeePage\n                        budget={budget}\n                        categoryId={match.params.categoryId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        payeeId={match.params.payeeId}\n                        selectedMonth={selectedMonth}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.categoryPayee.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                      />\n                    )}\n                  />\n                </Switch>\n              )}\n            </CategoriesState>\n          );\n        }}\n      />\n      <Route\n        render={() => (\n          <div style={{ padding: 20 }}>\n            <Link\n              to={makeLink(pages.currentMonth.path, {\n                budgetId: budget.id\n              })}\n            >\n              Return to {pages.currentMonth.title}\n            </Link>\n          </div>\n        )}\n      />\n    </Switch>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) =>\n  [\n    \"budget\",\n    \"currentMonth\",\n    \"historyAction\",\n    \"investmentAccounts\",\n    \"location\",\n    \"mortgageAccounts\"\n  ].every(key => prevProps[key] === nextProps[key]);\n\nexport default memo(PageContent, areEqual);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Section from \"./Section\";\nimport { PageTitle, StrongText, SecondaryText } from \"./typeComponents\";\nimport { PrimaryButton } from \"./Button\";\n\nconst Unauthorized = ({ onAuthorize }) => (\n  <Section>\n    <PageTitle>Budget Reports</PageTitle>\n    <div style={{ marginBottom: 10 }}>Get various insights from your YNAB account.</div>\n    <PrimaryButton onClick={onAuthorize}>\n      Authorize YNAB\n    </PrimaryButton>\n    <StrongText style={{ marginTop: 30 }}>Privacy Policy</StrongText>\n    <SecondaryText>\n      This website does not store any information from you or your YNAB account\n      on it's server. All data retrieved from the YNAB API is stored only in\n      your browser's local storage and is never transmitted to any other location or\n      third-party.\n    </SecondaryText>\n  </Section>\n);\n\nUnauthorized.propTypes = {\n  onAuthorize: PropTypes.func.isRequired\n};\n\nexport default Unauthorized;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 10px 20px;\n`;\n\n\nconst ErrorPage = ({ message }) => (\n  <Container>\n    <h3>{message}</h3>\n    <div>\n      <Link to=\"/\">Home</Link>\n    </div>\n  </Container>\n);\n\nErrorPage.propTypes = {\n  message: PropTypes.string.isRequired\n};\n\nexport default ErrorPage;\n","import React from \"react\";\nimport ErrorPage from \"./ErrorPage\";\n\nconst NotFound = () => <ErrorPage message=\"Page not found\" />;\n\nexport default NotFound;\n","/* global Rollbar */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ErrorPage from \"./ErrorPage\";\n\nclass ErrorBoundary extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    message: PropTypes.string\n  };\n\n  static defaultProps = {\n    message: \"Something went wrong\"\n  };\n\n  state = { hasError: false };\n\n  componentDidCatch(error) {\n    Rollbar.error(error);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorPage message={this.props.message} />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport pages, { makeLink } from \"../pages\";\nimport { StrongText } from \"./typeComponents\";\nimport Section from \"./Section\";\nimport Loading from \"./Loading\";\n\nclass Budgets extends Component {\n  static propTypes = {\n    budgets: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    budgetsLoaded: PropTypes.bool.isRequired,\n    onRequestBudgets: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    if (!this.props.budgetsLoaded) {\n      this.props.onRequestBudgets();\n    }\n  }\n\n  render() {\n    const { budgets, budgetsLoaded } = this.props;\n\n    if (!budgetsLoaded) {\n      return <Loading />;\n    }\n\n    return (\n      <Section>\n        <StrongText>Select a budget:</StrongText>\n        {budgets.map(({ id, name }) => (\n          <div key={id}>\n            <Link to={makeLink(pages.currentMonth.path, { budgetId: id })}>\n              {name}\n            </Link>\n          </div>\n        ))}\n      </Section>\n    );\n  }\n}\n\nexport default Budgets;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Switch } from \"react-router-dom\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport {\n  getBudgets,\n  getUpdatedBudget,\n  AUTHORIZE_URL,\n  setLastLocation\n} from \"../ynabRepo\";\nimport { setSetting, getSetting } from \"../uiRepo\";\nimport PageWrapper from \"./PageWrapper\";\nimport PageContent from \"./PageContent\";\nimport Unauthorized from \"./Unauthorized\";\nimport NotFound from \"./NotFound\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport Budgets from \"./Budgets\";\nimport CurrencyContext from \"./CurrencyContext\";\n\nclass App extends Component {\n  static propTypes = {\n    hasToken: PropTypes.bool.isRequired\n  };\n\n  state = {\n    authorized: true,\n    budgetsLoaded: false,\n    budgetIds: [],\n    budgets: {},\n    budgetDetails: {},\n    currentMonth: moment().format(\"YYYY-MM\")\n  };\n\n  handleRequestBudgets = callback => {\n    getBudgets().then(({ budgets }) => {\n      this.setState(\n        {\n          budgetsLoaded: true,\n          budgetIds: budgets.map(b => b.id),\n          budgets: keyBy(\"id\")(budgets)\n        },\n        callback\n      );\n    });\n  };\n\n  handleRequestBudget = id => {\n    getUpdatedBudget(id).then(({ budget, authorized }) => {\n      this.setState(state => ({\n        ...state,\n        authorized,\n        budgetDetails: {\n          ...state.budgetDetails,\n          [id]: budget\n        }\n      }));\n    });\n  };\n\n  handleAuthorize = () => {\n    setLastLocation();\n    window.location.replace(AUTHORIZE_URL);\n  };\n\n  render() {\n    const { hasToken } = this.props;\n    const {\n      authorized,\n      budgetsLoaded,\n      budgetIds,\n      budgets,\n      budgetDetails,\n      currentMonth\n    } = this.state;\n\n    if (!hasToken) {\n      return <Unauthorized onAuthorize={this.handleAuthorize} />;\n    }\n\n    return (\n      <ErrorBoundary>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <Budgets\n                budgets={budgetIds.map(id => budgets[id])}\n                budgetsLoaded={budgetsLoaded}\n                onRequestBudgets={this.handleRequestBudgets}\n              />\n            )}\n          />\n          <Route\n            path=\"/budgets/:budgetId\"\n            render={({ match, history, location }) => {\n              const { budgetId } = match.params;\n              const budget = budgetDetails[budgetId];\n\n              return (\n                <PageWrapper\n                  authorized={authorized}\n                  budgetId={budgetId}\n                  budgetLoaded={!!budget}\n                  hasMultipleBudgets={budgetIds.length > 1}\n                  location={location.pathname}\n                  onAuthorize={this.handleAuthorize}\n                  onRequestBudget={this.handleRequestBudget}\n                >\n                  {({ sidebarTrigger }) => (\n                    <CurrencyContext.Provider\n                      value={get(\"currencyFormat\")(budget)}\n                    >\n                      <PageContent\n                        sidebarTrigger={sidebarTrigger}\n                        historyAction={history.action}\n                        location={location.pathname}\n                        budget={budget}\n                        currentMonth={currentMonth}\n                        investmentAccounts={getSetting(\n                          \"investmentAccounts\",\n                          budgetId\n                        )}\n                        mortgageAccounts={getSetting(\n                          \"mortgageAccounts\",\n                          budgetId\n                        )}\n                        onUpdateAccounts={({ type, value }) => {\n                          if (type === \"investment\") {\n                            setSetting(\"investmentAccounts\", budgetId, value);\n                          }\n                          if (type === \"mortgage\") {\n                            setSetting(\"mortgageAccounts\", budgetId, value);\n                          }\n                          this.forceUpdate();\n                        }}\n                      />\n                    </CurrencyContext.Provider>\n                  )}\n                </PageWrapper>\n              );\n            }}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { getAuthorizeToken, initializeYnabApi } from \"./ynabRepo\";\nimport App from \"./components/App\";\n\nconst token = getAuthorizeToken();\n\nif (token) {\n  initializeYnabApi(token);\n}\n\n/***\n * You play the game to get points, but the point of the game is not\n * the points, it's the joy you get getting those points. Whether you\n * end up with a lot of points or very few points, you get the most\n * value by having played the game to the best of your ability and\n * getting maximal enjoyment from your time playing.\n ***/\n\nReactDOM.render(\n  <HashRouter>\n    <App hasToken={!!token} />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}