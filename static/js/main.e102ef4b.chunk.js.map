{"version":3,"sources":["localstorageUtils.js","uiRepo.js","dataUtils.js","repoUtils.js","localBudgetCache.js","ynabRepo.js","components/typeComponents.js","components/Loading.js","components/EnsureBudgetLoaded.js","styleVariables.js","components/Button.js","components/Icon.js","pages.js","components/SidebarMenuContent.js","components/SidebarMenu.js","components/PageWrapper.js","budgetUtils.js","commonHooks.js","components/Scroller.js","components/PageBreadcrumbs.js","components/PageActions.js","components/PageLayout.js","components/CollapsibleSection.js","components/Chart.js","components/CurrencyContext.js","components/Amount.js","components/ChartNumbers.js","components/SpendingChart.js","components/Modal.js","components/ChartSettingsModal.js","components/DayByDaySection.js","components/ListItem.js","components/EmptyText.js","components/NoTransactions.js","components/LabelWithMinorText.js","components/LabelWithTransactionCount.js","components/AmountWithPercentage.js","components/SeeAll.js","components/GenericEntitiesSection.js","components/DateSummaryTransaction.js","components/ToggleNode.js","components/DateSummary.js","components/RecentSpending.js","components/CurrentMonthPage.js","components/MonthlyChart.js","components/Toggle.js","components/ToggleWithLabel.js","components/MonthByMonthSettingsModal.js","components/MonthByMonthSection.js","components/IncomePage.js","components/Transaction.js","components/TransactionsSection.js","components/CurrentMonthGroupPage.js","components/CurrentMonthCategoryPage.js","components/GroupsPage.js","components/TransactionsByMonthSection.js","components/GroupPage.js","components/CategoriesState.js","components/CategoryPage.js","components/CategoryPayeePage.js","components/IncomeVsExpensesChart.js","components/BreakdownNode.js","components/Breakdown.js","components/ExpensesBreakdown.js","components/IncomeBreakdown.js","components/Breakdowns.js","components/IncomeVsExpensesPage.js","components/NetWorthChart.js","components/NetWorthAccounts.js","components/NetWorthChanges.js","components/NetWorthPage.js","components/InvestmentsPage.js","components/ProjectionsChart.js","components/ClickOff.js","components/ProjectionsSlider.js","components/ProjectionsPage.js","projectionUtils.js","components/Section.js","components/AccountsSelectionForm.js","components/SettingsInvestmentAccounts.js","components/SettingsMortgageAccounts.js","components/SettingsPage.js","components/PageContent.js","components/Unauthorized.js","components/ErrorPage.js","components/NotFound.js","components/ErrorBoundary.js","components/Budgets.js","components/App.js","index.js"],"names":["cache","getStorage","key","raw","localStorage","getItem","parsed","JSON","parse","setStorage","obj","setItem","stringify","e","SETTINGS","excludeFirstMonth","localStorageKey","default","excludeLastMonth","investmentAccounts","lastUpdated","mortgageAccounts","netWorthHiddenAccounts","spendingMonthsToCompare","trendsShowAverage","getSetting","settingsKey","budgetId","setting","Error","get","setSetting","value","previousSetting","groupBy","func","arr","grouped","forEach","push","groupByProp","keyByProp","reduce","acc","curr","sumByProp","simpleMemoize","lastArgs","lastResult","args","length","every","index","notAny","predicates","arg","predicate","upsertBy","updater","prev","exists","newArr","map","item","concat","formatCurrency","utils","convertMilliUnitsToCurrencyAmount","GROUPS_TO_HIDE","sanitizeBudget","budget","transactionIdsFromSub","uniq","subtransactions","transaction","transaction_id","categoryGroups","category_groups","filter","group","includes","name","categories","category","deleted","activity","balance","budgeted","categoriesById","earliestDate","moment","subtract","MAX_MONTHS_TO_SHOW","format","currencyFormat","symbol","currency_format","currency_symbol","omit","accountsById","accounts","categoryGroupsById","payeesById","payees","months","sortBy","transactions","compose","amount","category_id","flatMap","id","subs","sub","payee_id","matchesProperty","reverse","dropWhile","date","applyDeltas","deltas","arraysToUpdate","BUDGET_DETAILS_STORAGE_KEY","cachedDetails","getAllBudgetDetails","setBudgetDetails","server_knowledge","details","newDetails","TOKEN_STORAGE_KEY","BUDGETS_STORAGE_KEY","LAST_LOCATION_KEY","AUTHORIZE_URL","api","getBudgets","budgets","then","data","catch","matches","error","message","removeItem","getBudget","getBudgetById","valueOf","authorized","getUpdatedBudget","budgetDetails","getBudgetDetails","mergeBudgets","setLastLocation","window","location","hash","PageTitle","styled","div","LargeNumber","StrongText","SecondaryText","MinorText","Loading","style","height","display","flexDirection","alignItems","justifyContent","EnsureBudgetLoaded","this","props","budgetLoaded","onRequestBudget","children","Component","primaryColor","negativeColor","selectedPlotBandColor","tinyColor","lighten","desaturate","toHexString","lighterPrimaryColor","lightPrimaryColor","negativeChartColor","Button","PrimaryButton","library","add","faArrowLeft","faBars","faCaretDown","faChevronRight","faCog","faEllipsisV","faEye","faEyeSlash","faPencilAlt","faTimes","ICONS","bars","cog","pencil","eye","times","PRESET_STYLES","faded","fontWeight","color","fontSize","Icon","icon","other","makeLink","path","params","replace","_","part","pages","currentMonth","title","currentMonthGroup","categoryGroupId","paramProps","breadcrumbs","currentMonthCategory","categoryId","groups","categoryPayee","payeeId","income","incomeVsExpenses","netWorth","investments","projections","settings","Header","IconWrapper","StyledLink","NavLink","active","SidebarMenuContent","hasMultipleBudgets","onCloseSidebar","page","to","matchPath","onClick","PureComponent","PureHeader","PureStyledLink","SidebarMenu","state","open","handleSetOpen","setState","handleTriggerClick","handleCloseSidebar","sidebar","onSetOpen","styles","backgroundColor","width","pointerEvents","sidebarTrigger","Trigger","alignSelf","Container","PageWrapper","onAuthorize","padding","flexShrink","borderTop","mapRaw","convert","cap","isStartingBalanceOrReconciliation","startingBalancePayeeId","find","payee","reconciliationPayeeId","isIncome","toBeBudgetedId","isTransfer","transfer_account_id","getTransactionMonth","slice","rejectNonCategoryTransations","tran","getFirstMonth","filteredTransactions","last","undefined","getPayeeNodes","divideBy","pick","sanitizeName","trim","useSelectedMonth","useState","selectedMonth","setSelectedMonth","selectedMonthRef","useRef","current","month","useSelectedEntityId","selectedEntityId","setSelectedEntityId","entityId","useTrendsShowAverage","showAverage","setShowAverage","useMonthExclusions","setExcludeFirstMonth","setExcludeLastMonth","firstBudgetMonth","firstMonth","lastMonth","m","getMonths","onSetExclusion","exclude","useFlagState","initial","flag","setFlag","Scroller","toBeScrolled","raf","scrollPositions","scrollTop","prevProps","prevState","snapshot","action","requestAnimationFrame","cancelAnimationFrame","ref","el","routes","values","pageKey","PageBreadcrumbs","exact","render","lineHeight","whiteSpace","match","paddingBottom","PageActions","Body","PageLayout","historyAction","fixedContent","content","flexGrow","fullWidth","SettingsContainer","CollapsibleSection","actions","hasSettings","noPadding","onClickSettings","expanded","setExpanded","transform","rotate","marginLeft","isExpanded","CHART_DEFAULTS","chart","spacing","credits","enabled","legend","text","subtitle","tooltip","xAxis","tickLength","Chart","options","highcharts","Highcharts","CurrencyContext","React","createContext","Amount","amountAfterDecimal","expectNegative","expectPositive","showCurrencySymbol","Consumer","red","nStr","x","split","x1","x2","rgx","test","addCommas","Math","abs","toFixed","defaultProps","ChartNumbers","numbers","alwaysRound","smallNumbers","some","textAlign","marginBottom","label","isMoney","decimalsToRound","isNumber","DateLabels","getData","transactionsByDate","today","cumulative","range","daysInMonth","numDays","padCharsStart","sumBy","SpendingChart","total","highlightFunction","monthsToCompare","highlightedTransactions","highlightSeries","type","enableMouseTracking","marker","animation","lineWidth","fillOpacity","firstDate","lastDate","lineData","day","firstDayOfWeek","parseInt","plotBands","num","from","comparisonSeries","numMonths","mix","toHex","spent","takeWhile","chartNumbers","labels","yAxis","visible","endOnTick","startOnTick","series","dashStyle","Overlay","ModalContent","ensureNextTick","callback","Modal","handleTransitionEnd","animationState","document","createElement","body","appendChild","removeChild","onClose","shouldShow","createPortal","opacity","onTransitionEnd","marginTop","ChartSettingsModal","onDecrementMonths","onIncrementMonths","marginRight","DayByDaySection","modalOpen","onCloseModal","onOpenModal","setMonthsToCompare","newMonths","max","min","useMonthsToCompare","ListItem","isContinuing","EmptyText","NoTransactions","LabelWithMinorText","minorText","inLink","bold","overflow","textOverflow","LabelWithTransactionCount","count","selected","showCount","AmountWithPercentage","SeeAll","pluralizedName","showAll","onToggle","mapWithKeys","keyToPluralizedName","category_group_id","GenericEntitiesSection","allMounted","handleToggleShowAll","emptyName","entityKey","entityFunction","entitiesById","linkFunction","limitShowingProp","limitShowing","showAverageToggle","showTransactionCount","onClickEntity","onToggleAverage","entities","LIMIT","topEntities","otherEntities","MaybeLink","GenericItemLink","evt","stopPropagation","StyledListItem","DateSummaryTransaction","memo","NodeWrapper","isCompact","ToggleNode","valueRenderer","DateSummary","onToggleExpanded","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","paddingLeft","margin","RecentSpending","recentDays","n","startsWith","CurrentMonthPage","selectedGroupId","onSelectGroupId","selectedGroup","transactionsThisMonth","groupId","MonthlyChart","average","stacked","onSelectMonth","yearLines","d","highlights","zIndex","findIndex","events","click","event","round","plotLines","gridLineColor","align","y","tickPixelInterval","plotOptions","stacking","s","valueFunction","radius","borderWidth","states","hover","brightness","Track","HEIGHT","on","Handle","WIDTH","Toggle","Label","ToggleWithLabel","checked","onChange","target","MonthByMonthSettingsModal","MonthByMonthSection","settingsModalOpen","setSettingsModalOpen","selectedMonthTotal","transactionsByMonth","false","highlighted","true","getFilteredTransactions","getFilteredIncomeTransactions","IncomePage","selectedPayeeId","onSelectPayeeId","onToggleShowAverage","transactionsInSelectedMonth","Transaction","TransactionsSection","CurrentMonthGroupPage","selectedCategoryId","onSelectCategoryId","allCategories","allTransactions","selectedCategory","categoryIds","transactionsInGroup","transactionsInGroupForMonth","available","CurrentMonthCategoryPage","transactionsInCategory","transactionsInCategoryForMonth","GroupsPage","onSelectGroup","transactionsForMonth","TransactionsByMonthSection","selectedPayee","topTransactions","otherTransactions","GroupPage","onSelectCategory","categoryGroup","INITIAL_STATE","CategoriesState","cachedStates","handleSelectMonth","handleSelectGroup","handleSelectCategory","handleSelectPayee","onSelectPayee","handleSetExclusion","CategoryPage","transactionsForCategory","CategoryPayeePage","transactionsForCategoryAndPayee","IncomeVsExpensesChart","expenses","BreakdownNode","childrenMounted","handleToggleExpand","nodes","isTopLevel","hasChildNodes","Nodes","node","LeafNode","Breakdown","ExpensesBreakdown","totalIncome","categoryNodes","payeeNodes","groupNodes","rootPayeeNodes","IncomeBreakdown","Breakdowns","expenseTransactions","incomeTransactions","getSummaries","IncomeVsExpensesPage","showTotals","setShowTotals","allSummaries","summaries","summary","compact","totalExpenses","denominator","CREDIT_ACCOUNTS","NetWorthChart","groupedData","getStack","monthlyData","assets","asset","liabilities","liability","AccountBreakdown","hiddenAccounts","onToggleAccounts","propEq","ids","account","NetWorthAccounts","keyBy","accountsByGroup","startCase","getNodes","NetWorthChanges","accountSummaries","totals","changes","t","i","year","change","years","Object","keys","sort","v","positiveColor","groupByMonthAndAccount","mapValues","identity","getSummaryByAccount","groupedTransactions","getSelectedBalances","selectedMonthIndex","eq","NetWorthPage","setHiddenAccounts","onToggleHiddenAccounts","shouldHide","newHiddenAccounts","useHiddenAccounts","selectedBalances","filterHidden","omitBy","selectedLiabilities","sum","b","selectedAssets","constant","isContribution","account_id","isCapitalGainOrLoss","InvestmentsPage","selectedBreakdown","onSelectBreakdown","investmentTransactions","isInvestmentTransaction","transactionsInMonth","contribution","capitalGain","positiveIsRed","ProjectionsChart","investmentsProjection","mortgageProjection","amountNeededToRetire","yearsUntilRetirement","floor","isDescendant","parent","child","parentNode","ClickOff","handleBodyClick","onClickOff","addEventListener","removeEventListener","bodyEl","getElementsByTagName","ProjectionsSlider","formatter","onBlur","onReset","rangeOptions","val","Range","adjustableEntries","adjustableEntriesByName","getInitialState","mortgageAccount","lastMonthTransactions","takeRightWhile","P","P1","c","prop","r","N","log","rate","paymentsLeft","projection","mortgagePayment","principalProjection","getMortgageRate","remainingMortgagePayments","returnOnInvestments","investmentAccountIds","tr","reject","startForMonth","returnRates","trs","contributions","gains","returns","totalReturn","multiply","getReturnOnInvestments","averageContribution","transferAccountId","accountId","diff","head","getAverageContribution","currentInvestments","getCurrentInvestments","averageExpenses","startingBalanceId","mortgageAccountIds","getAverageExpensesWithoutMortgage","retirementReturns","retirementTaxRate","maxAverageExpenses","ceil","maxAverageContribution","ProjectionsPage","handleChange","parseFloat","handleSelectAdjusting","adjustingName","handleClearSelection","handleResetCalculation","calculation","monthlyRate","getProjection","YEARS_TO_PROJECT","monthlyRetirementReturn","remainingMortgage","projectionWithRetirement","monthsBeforeRetirement","monthlyExpenses","getProjectionWithRetirement","hasMortgage","projectionByYear","chunk","mortgageProjectionByYear","nameToRangeOptions","step","isAdjusting","onSelect","AdjustableEntry","highlightValue","isAdjustable","Entry","a","borderRadius","Section","top","AccountsSelectionForm","SectionHeader","SettingsInvestmentAccounts","onUpdateAccounts","investmentModalOpen","closeInvestmentModal","openInvestmentModal","potentialInvestmentAccounts","on_budget","investmentAccountsList","accountsObject","SettingsMortgageAccounts","mortgageModalOpen","closeMortgageModal","openMortgageModal","potentialMortageAccounts","mortgageAccountList","Space","SettingsPage","getFilteredSpendingTransactions","PageContent","areEqual","nextProps","Unauthorized","ErrorPage","NotFound","ErrorBoundary","hasError","Rollbar","token","Budgets","budgetsLoaded","onRequestBudgets","App","budgetIds","handleRequestBudgets","handleRequestBudget","handleAuthorize","hasToken","history","pathname","Provider","forceUpdate","component","search","substring","decodeURIComponent","getAuthorizeToken","ynab","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e102ef4b.chunk.js","sourcesContent":["const cache = {};\n\nexport const getStorage = key => {\n  if (cache[key]) {\n    return cache[key];\n  }\n  const raw = localStorage.getItem(key);\n  if (raw) {\n    const parsed = JSON.parse(raw);\n    cache[key] = parsed;\n    return parsed;\n  }\n  return null;\n};\n\nexport const setStorage = (key, obj) => {\n  delete cache[key];\n\n  try {\n    localStorage.setItem(key, JSON.stringify(obj));\n  } catch (e) {\n    // Most likely exceeds storage quota\n  }\n};\n","import { getStorage, setStorage } from \"./localstorageUtils\";\nimport get from \"lodash/get\";\n\nconst SETTINGS = {\n  excludeFirstMonth: {\n    localStorageKey: \"budget-reports-exclude-first-month\",\n    default: false\n  },\n  excludeLastMonth: {\n    localStorageKey: \"budget-reports-exclude-last-month\",\n    default: false\n  },\n  investmentAccounts: {\n    localStorageKey: \"budget-reports-investment-accounts\",\n    default: {}\n  },\n  lastUpdated: {\n    localStorageKey: \"budget-reports-last-updated\",\n    default: null\n  },\n  mortgageAccounts: {\n    localStorageKey: \"budget-reports-mortgage-accounts\",\n    default: {}\n  },\n  netWorthHiddenAccounts: {\n    localStorageKey: \"budget-reports-networth-hidden-accounts\",\n    default: {}\n  },\n  spendingMonthsToCompare: {\n    localStorageKey: \"budget-reports-spending-months-to-compare\",\n    default: 3\n  },\n  trendsShowAverage: {\n    localStorageKey: \"budget-reports-trends-show-average\",\n    default: true\n  }\n};\n\nexport const getSetting = (settingsKey, budgetId) => {\n  const setting = SETTINGS[settingsKey];\n\n  if (!setting) {\n    throw new Error(\"not a valid settings key\");\n  }\n\n  return get(getStorage(setting.localStorageKey), budgetId, setting.default);\n};\n\nexport const setSetting = (settingsKey, budgetId, value) => {\n  const setting = SETTINGS[settingsKey];\n\n  if (!setting) {\n    throw new Error(\"not a valid settings key\");\n  }\n\n  const previousSetting = getStorage(setting.localStorageKey);\n\n  setStorage(setting.localStorageKey, {\n    ...previousSetting,\n    [budgetId]: value\n  });\n};\n","export const groupBy = func => arr => {\n  const grouped = {};\n  arr.forEach(obj => {\n    const key = func(obj);\n    if (!grouped[key]) {\n      grouped[key] = [];\n    }\n    grouped[key].push(obj);\n  });\n  return grouped;\n};\n\nexport const groupByProp = key => arr => {\n  const grouped = {};\n  arr.forEach(obj => {\n    if (!grouped[obj[key]]) {\n      grouped[obj[key]] = [];\n    }\n    grouped[obj[key]].push(obj);\n  });\n  return grouped;\n};\n\nexport const keyByProp = key => arr =>\n  arr.reduce((acc, curr) => ({ ...acc, [curr[key]]: curr }), {});\n\nexport const sumBy = func => arr =>\n  arr.reduce((acc, curr) => acc + func(curr), 0);\n\nexport const sumByProp = key => arr =>\n  arr.reduce((acc, curr) => acc + curr[key], 0);\n\nexport const simpleMemoize = func => {\n  let lastArgs = null;\n  let lastResult = null;\n  return (...args) => {\n    if (\n      lastArgs !== null &&\n      lastArgs.length === args.length &&\n      args.every((value, index) => value === lastArgs[index])\n    ) {\n      return lastResult;\n    }\n    lastArgs = args;\n    lastResult = func(...args);\n    return lastResult;\n  };\n};\n\nexport const notAny = predicates => arg =>\n  predicates.every(predicate => !predicate(arg));\n\nexport const upsertBy = (arr, key, obj, updater = (prev, curr) => curr) => {\n  let exists = false;\n  const newArr = arr.map(item => {\n    if (item[key] === obj[key]) {\n      exists = true;\n      return updater(item, obj);\n    }\n    return item;\n  });\n  return exists ? newArr : newArr.concat(obj);\n};\n","import { utils } from \"ynab\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport flatMap from \"lodash/fp/flatMap\";\nimport dropWhile from \"lodash/fp/dropWhile\";\nimport matchesProperty from \"lodash/fp/matchesProperty\";\nimport omit from \"lodash/fp/omit\";\nimport reverse from \"lodash/fp/reverse\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport uniq from \"lodash/fp/uniq\";\nimport { upsertBy, keyByProp } from \"./dataUtils\";\n\nconst formatCurrency = utils.convertMilliUnitsToCurrencyAmount;\n\nconst GROUPS_TO_HIDE = [\"Internal Master Category\", \"Credit Card Payments\"];\n\nconst MAX_MONTHS_TO_SHOW = 240;\n\nexport const sanitizeBudget = budget => {\n  const transactionIdsFromSub = uniq(\n    budget.subtransactions.map(transaction => transaction.transaction_id)\n  );\n  const categoryGroups = budget.category_groups.filter(\n    group => !GROUPS_TO_HIDE.includes(group.name)\n  );\n  const categories = budget.categories\n    .filter(category => !category.deleted)\n    .map(category => ({\n      ...category,\n      activity: formatCurrency(category.activity),\n      balance: formatCurrency(category.balance),\n      budgeted: formatCurrency(category.budgeted)\n    }));\n  const categoriesById = keyByProp(\"id\")(categories);\n  const earliestDate = moment()\n    .subtract(MAX_MONTHS_TO_SHOW - 1, \"months\")\n    .format(\"YYYY-MM-01\");\n  const currencyFormat = {\n    symbol: budget.currency_format.currency_symbol\n  };\n\n  return {\n    ...omit([\"category_groups\", \"currency_format\"])(budget),\n    accountsById: keyByProp(\"id\")(budget.accounts),\n    categoryGroups,\n    categoryGroupsById: keyByProp(\"id\")(categoryGroups),\n    categories,\n    categoriesById,\n    currencyFormat,\n    payeesById: keyByProp(\"id\")(budget.payees),\n    months: sortBy(\"month\")(budget.months),\n    transactions: compose([\n      transactions =>\n        transactions.map(transaction => ({\n          ...transaction,\n          amount: formatCurrency(transaction.amount)\n        })),\n      // Not sure how this would happen, but seeing it in production\n      transactions =>\n        transactions.filter(\n          transaction =>\n            !transaction.category_id ||\n            !!categoriesById[transaction.category_id]\n        ),\n      flatMap(transaction =>\n        transactionIdsFromSub.includes(transaction.id)\n          ? compose([\n              subs =>\n                subs.map(sub =>\n                  omit(\"transaction_id\")({\n                    ...transaction,\n                    ...sub,\n                    payee_id: sub.payee_id || transaction.payee_id\n                  })\n                ),\n              subs =>\n                subs.filter(matchesProperty(\"transaction_id\", transaction.id))\n            ])(budget.subtransactions)\n          : transaction\n      ),\n      reverse,\n      dropWhile(transaction => transaction.date < earliestDate),\n      sortBy(\"date\"),\n      transactions =>\n        transactions.filter(\n          transaction => transaction.amount !== 0 && !transaction.deleted\n        )\n    ])(budget.transactions)\n  };\n};\n\nconst applyDeltas = (arr, deltas, key = \"id\", updater) =>\n  deltas.reduce((acc, curr) => upsertBy(acc, key, curr, updater), arr);\n\nconst arraysToUpdate = [\n  \"accounts\",\n  \"categories\",\n  \"category_groups\",\n  \"payee_locations\",\n  \"payees\",\n  \"scheduled_subtransactions\",\n  \"scheduled_transactions\",\n  \"subtransactions\",\n  \"transactions\"\n];\n\nexport const mergeBudgets = (budget, deltas) => ({\n  ...budget,\n  ...deltas,\n  ...arraysToUpdate.reduce(\n    (acc, curr) => ({\n      ...acc,\n      [curr]: applyDeltas(budget[curr], deltas[curr])\n    }),\n    {}\n  ),\n  months: applyDeltas(budget.months, deltas.months, \"month\", (prev, curr) => ({\n    ...prev,\n    ...curr,\n    categories: applyDeltas(prev.categories, curr.categories)\n  }))\n});\n","import get from \"lodash/fp/get\";\nimport { getStorage, setStorage } from \"./localstorageUtils\";\n\nconst BUDGET_DETAILS_STORAGE_KEY = \"ynab_budget_details\";\n\nlet cachedDetails = null;\n\nconst getAllBudgetDetails = () => {\n  if (cachedDetails) {\n    return cachedDetails;\n  }\n  cachedDetails = getStorage(BUDGET_DETAILS_STORAGE_KEY);\n  return cachedDetails;\n};\n\nexport const getBudgetDetails = id => get(id)(getAllBudgetDetails());\n\nexport const setBudgetDetails = ({ id, budget, server_knowledge }) => {\n  const details = getAllBudgetDetails();\n  const newDetails = {\n    ...details,\n    [id]: { budget, server_knowledge }\n  };\n  setStorage(BUDGET_DETAILS_STORAGE_KEY, newDetails);\n  cachedDetails = newDetails;\n};\n","import * as ynab from \"ynab\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport matches from \"lodash/fp/matches\";\nimport { getStorage, setStorage } from \"./localstorageUtils\";\nimport { setSetting, getSetting } from \"./uiRepo\";\nimport { sanitizeBudget, mergeBudgets } from \"./repoUtils\";\nimport { getBudgetDetails, setBudgetDetails } from \"./localBudgetCache\";\nimport { clientId, redirectUri } from \"./ynabConfig\";\n\nconst TOKEN_STORAGE_KEY = \"ynab_access_token\";\nconst BUDGETS_STORAGE_KEY = \"ynab_budgets\";\nconst LAST_LOCATION_KEY = \"budget-reports-last-location\";\n\nconst TIME_LIMIT_FOR_FULL_REFRESH = 8 * 1000;\n\nexport const AUTHORIZE_URL =\n  \"https://api.youneedabudget.com/oauth/authorize?client_id=\" +\n  clientId +\n  \"&redirect_uri=\" +\n  redirectUri +\n  \"&response_type=token\" +\n  \"&scope=read-only\";\n\nexport const getAuthorizeToken = () => {\n  // check for hash route\n  if (window.location.hash[1] === \"/\") {\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\n  }\n\n  const search = window.location.hash\n    .substring(1)\n    .replace(/&/g, '\",\"')\n    .replace(/=/g, '\":\"');\n\n  if (!search) {\n    return localStorage.getItem(TOKEN_STORAGE_KEY);\n  }\n\n  const token = get(\"access_token\")(\n    JSON.parse(\n      '{\"' + search + '\"}',\n      (key, value) => (key === \"\" ? value : decodeURIComponent(value))\n    )\n  );\n  localStorage.setItem(TOKEN_STORAGE_KEY, token);\n  window.location.hash = localStorage.getItem(LAST_LOCATION_KEY) || \"\";\n  localStorage.removeItem(LAST_LOCATION_KEY);\n\n  return token;\n};\n\nlet api = null;\n\nexport const initializeYnabApi = token => {\n  api = new ynab.api(token);\n};\n\nexport const getBudgets = () =>\n  api.budgets\n    .getBudgets()\n    .then(({ data }) => {\n      setStorage(BUDGETS_STORAGE_KEY, data);\n      return data;\n    })\n    .catch(e => {\n      if (\n        matches({\n          id: \"401\",\n          name: \"unauthorized\"\n        })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\n        return getStorage(BUDGETS_STORAGE_KEY) || { budgets: [] };\n      }\n\n      throw e;\n    });\n\nconst getBudget = id =>\n  api.budgets\n    .getBudgetById(id)\n    .then(({ data }) => {\n      const { budget, server_knowledge } = data;\n\n      setBudgetDetails({ id, budget, server_knowledge });\n      setSetting(\"lastUpdated\", id, moment().valueOf());\n\n      return { budget: sanitizeBudget(budget), authorized: true };\n    })\n    .catch(e => {\n      if (\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        localStorage.removeItem(TOKEN_STORAGE_KEY);\n        return {\n          budget: { categories: [], transactions: [], payees: [] },\n          authorized: false\n        };\n      }\n\n      throw e;\n    });\n\nexport const getUpdatedBudget = id => {\n  const budgetDetails = getBudgetDetails(id);\n\n  if (!budgetDetails) {\n    return getBudget(id);\n  }\n\n  if (\n    moment().valueOf() - getSetting(\"lastUpdated\", id) <\n    TIME_LIMIT_FOR_FULL_REFRESH\n  ) {\n    return getBudget(id);\n  }\n\n  return api.budgets\n    .getBudgetById(id, budgetDetails.server_knowledge)\n    .then(({ data }) => {\n      try {\n        const budget = mergeBudgets(budgetDetails.budget, data.budget);\n\n        setBudgetDetails({ id, budget, server_knowledge: data.server_knowledge });\n        setSetting(\"lastUpdated\", id, moment().valueOf());\n\n        return { budget: sanitizeBudget(budget), authorized: true };\n      } catch (e) {\n        return getBudget(id);\n      }\n    })\n    .catch(e => {\n      if (\n        matches({ id: \"401\", name: \"unauthorized\" })(e.error) ||\n        e.message === \"Failed to fetch\"\n      ) {\n        return {\n          budget: sanitizeBudget(budgetDetails.budget),\n          authorized: false\n        };\n      }\n\n      throw e;\n    });\n};\n\nexport const setLastLocation = () => {\n  localStorage.setItem(LAST_LOCATION_KEY, window.location.hash);\n};\n","import styled from \"styled-components\";\n\nexport const PageTitle = styled.div`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 24px;\n  color: #222;\n`;\n\nexport const LargeNumber = styled.div`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 24px;\n  color: #222;\n`;\n\nexport const StrongText = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: 500;\n  color: #222;\n`;\n\nexport const SecondaryText = styled.div`\n  font-size: 13px;\n  line-height: 21px;\n  font-weight: 400;\n  color: #666;\n`;\n\nexport const MinorText = styled.div`\n  font-size: 11px;\n  line-height: 16px;\n  font-weight: 400;\n  color: #999;\n`;\n","import React from \"react\";\nimport { StrongText, SecondaryText } from \"./typeComponents\";\n\nconst Loading = () => (\n  <div\n    style={{\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }}\n  >\n    <StrongText>Loading&hellip;</StrongText>\n    <SecondaryText>beep, beep, boop</SecondaryText>\n  </div>\n);\n\nLoading.propTypes = {};\n\nexport default Loading;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Loading from \"./Loading\";\n\nclass EnsureBudgetLoaded extends Component {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    budgetLoaded: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onRequestBudget: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    const { budgetId, budgetLoaded, onRequestBudget } = this.props;\n\n    if (!budgetLoaded) {\n      onRequestBudget(budgetId);\n    }\n  }\n\n  render() {\n    if (!this.props.budgetLoaded) {\n      return <Loading />\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default EnsureBudgetLoaded;\n","import tinyColor from \"tinycolor2\";\n\nexport const primaryColor = \"#4399ff\";\nexport const positiveColor = \"#2cbc2f\";\nexport const plotBandColor = \"#f2f2f2\";\nexport const negativeColor = \"red\";\nexport const selectedPlotBandColor = tinyColor(primaryColor)\n  .lighten(32)\n  .desaturate()\n  .toHexString();\nexport const lighterPrimaryColor = tinyColor(primaryColor)\n  .lighten(5)\n  .desaturate()\n  .toHexString();\nexport const lightPrimaryColor = tinyColor(primaryColor)\n  .lighten(25)\n  .desaturate()\n  .toHexString();\nexport const negativeChartColor = tinyColor(negativeColor)\n  .lighten(30)\n  .desaturate(60)\n  .toHexString();\n\nexport const iconWidth = 60;\n","import styled from \"styled-components\";\nimport { SecondaryText } from \"./typeComponents\";\nimport { primaryColor } from \"../styleVariables\";\n\nconst Button = styled(SecondaryText)`\n  display: inline-block;\n  user-select: none;\n  border: 1px solid #ccc;\n  padding: 4px 12px;\n  border-radius: 2px;\n\n  & + & {\n    margin-left: 5px;\n  }\n`;\n\nexport const PrimaryButton = styled(Button)`\n  background-color: ${primaryColor};\n  border-color: ${primaryColor};\n  color: #fff;\n`;\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport keys from \"lodash/fp/keys\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons/faArrowLeft\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons/faBars\";\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons/faCaretDown\";\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons/faChevronRight\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons/faCog\";\nimport { faEllipsisV } from \"@fortawesome/free-solid-svg-icons/faEllipsisV\";\nimport { faEye } from \"@fortawesome/free-solid-svg-icons/faEye\";\nimport { faEyeSlash } from \"@fortawesome/free-solid-svg-icons/faEyeSlash\";\nimport { faPencilAlt } from \"@fortawesome/free-solid-svg-icons/faPencilAlt\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons/faTimes\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nlibrary.add(\n  faArrowLeft,\n  faBars,\n  faCaretDown,\n  faChevronRight,\n  faCog,\n  faEllipsisV,\n  faEye,\n  faEyeSlash,\n  faPencilAlt,\n  faTimes\n);\n\nconst ICONS = {\n  \"arrow-left\": faArrowLeft,\n  bars: faBars,\n  \"caret-down\": faCaretDown,\n  \"chevron-right\": faChevronRight,\n  cog: faCog,\n  pencil: faPencilAlt,\n  \"ellipsis-v\": faEllipsisV,\n  eye: faEye,\n  \"eye-slash\": faEyeSlash,\n  times: faTimes\n};\n\nconst PRESET_STYLES = {\n  faded: {\n    fontWeight: 400,\n    color: \"#aaa\",\n    fontSize: 10\n  }\n};\n\nconst Icon = ({ icon, style, faded, ...other }) => (\n  <FontAwesomeIcon\n    {...other}\n    icon={ICONS[icon]}\n    style={{ ...style, ...(faded && PRESET_STYLES.faded) }}\n  />\n);\n\nIcon.propTypes = {\n  icon: PropTypes.oneOf(keys(ICONS)).isRequired,\n  faded: PropTypes.bool\n};\n\nexport default Icon;\n","import get from \"lodash/fp/get\";\n\nexport const makeLink = (path, params) =>\n  path.replace(/:([a-zA-Z]*)/g, (_, part) => params[part]);\n\nconst pages = {\n  currentMonth: {\n    path: \"/budgets/:budgetId/current\",\n    title: \"Current Month Spending\",\n    props: [\"budget\", \"currentMonth\", \"investmentAccounts\"]\n  },\n  currentMonthGroup: {\n    path: \"/budgets/:budgetId/current/:categoryGroupId\",\n    title: (params, budget) =>\n      budget.categoryGroupsById[params.categoryGroupId].name,\n    props: [\"budget\", \"currentMonth\"],\n    paramProps: [\"categoryGroupId\"],\n    breadcrumbs: [\"currentMonth\"]\n  },\n  currentMonthCategory: {\n    path: \"/budgets/:budgetId/current/:categoryGroupId/:categoryId\",\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\n    props: [\"budget\", \"currentMonth\"],\n    paramProps: [\"categoryId\", \"categoryGroupId\"],\n    breadcrumbs: [\"currentMonth\", \"currentMonthGroup\"]\n  },\n  groups: {\n    path: \"/budgets/:budgetId/groups\",\n    title: \"Spending Trends\",\n    props: [\"budget\"]\n  },\n  group: {\n    path: \"/budgets/:budgetId/groups/:categoryGroupId\",\n    title: (params, budget) =>\n      budget.categoryGroupsById[params.categoryGroupId].name,\n    props: [\"budget\"],\n    paramProps: [\"categoryGroupId\"],\n    breadcrumbs: [\"groups\"]\n  },\n  category: {\n    path: \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId\",\n    title: (params, budget) => budget.categoriesById[params.categoryId].name,\n    props: [\"budget\"],\n    paramProps: [\"categoryId\"],\n    breadcrumbs: [\"groups\", \"group\"]\n  },\n  categoryPayee: {\n    path:\n      \"/budgets/:budgetId/groups/:categoryGroupId/categories/:categoryId/payees/:payeeId\",\n    title: (params, budget) =>\n      get([\"payeesById\", params.payeeId, \"name\"], budget) || \"Payee Not Found\",\n    props: [\"budget\"],\n    paramProps: [\"categoryId\", \"payeeId\"],\n    breadcrumbs: [\"groups\", \"group\", \"category\"]\n  },\n  income: {\n    path: \"/budgets/:budgetId/income\",\n    title: \"Income Trends\",\n    props: [\"budget\"]\n  },\n  incomeVsExpenses: {\n    path: \"/budgets/:budgetId/income-vs-expenses\",\n    title: \"Income vs Expenses\",\n    props: [\"budget\", \"investmentAccounts\"]\n  },\n  netWorth: {\n    path: \"/budgets/:budgetId/net-worth\",\n    title: \"Net Worth\",\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\n  },\n  investments: {\n    path: \"/budgets/:budgetId/investments\",\n    title: \"Investments\",\n    props: [\"budget\", \"investmentAccounts\"]\n  },\n  projections: {\n    path: \"/budgets/:budgetId/projections\",\n    title: \"Retirement Calculator\",\n    props: [\"budget\", \"investmentAccounts\", \"mortgageAccounts\"]\n  },\n  settings: {\n    path: \"/budgets/:budgetId/settings\",\n    title: \"Budget Settings\",\n    props: [\n      \"budget\",\n      \"investmentAccounts\",\n      \"mortgageAccounts\",\n      \"onUpdateAccounts\"\n    ]\n  }\n};\n\nexport default pages;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { matchPath } from \"react-router\";\nimport styled from \"styled-components\";\nimport pages, { makeLink } from \"../pages\";\nimport Icon from \"./Icon\";\nimport { selectedPlotBandColor, iconWidth } from \"../styleVariables\";\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: stretch;\n  height: 60px;\n`;\n\nconst IconWrapper = styled.div`\n  width: ${iconWidth}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledLink = styled(NavLink)`\n  color: inherit;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  padding: 0 20px;\n  background-color: ${props => props.active && selectedPlotBandColor};\n`;\n\nclass SidebarMenuContent extends PureComponent {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    hasMultipleBudgets: PropTypes.bool.isRequired,\n    location: PropTypes.string.isRequired,\n    onCloseSidebar: PropTypes.func.isRequired\n  };\n\n  render() {\n    const { budgetId, hasMultipleBudgets, location, onCloseSidebar } = this.props;\n\n    return (\n      <Fragment>\n        <PureHeader onCloseSidebar={onCloseSidebar} budgetId={budgetId} />\n        {[\n          \"currentMonth\",\n          \"groups\",\n          \"income\",\n          \"incomeVsExpenses\",\n          \"netWorth\",\n          \"investments\",\n          \"projections\"\n        ].map(page => {\n          const { path, title } = pages[page];\n\n          return (\n            <PureStyledLink\n              key={path}\n              to={makeLink(path, { budgetId })}\n              active={matchPath(location, { path })}\n              onClick={onCloseSidebar}\n            >\n              {title}\n            </PureStyledLink>\n          );\n        })}\n        {hasMultipleBudgets && (\n          <PureStyledLink to=\"/\">Switch Budgets</PureStyledLink>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nclass PureHeader extends PureComponent {\n  render() {\n    const { onCloseSidebar, budgetId } = this.props;\n    return (\n      <Header>\n        <IconWrapper onClick={onCloseSidebar}>\n          <Icon icon=\"times\" />\n        </IconWrapper>\n        <Link\n          to={makeLink(pages.settings.path, { budgetId })}\n          style={{ display: \"flex\", color: \"inherit\" }}\n          onClick={onCloseSidebar}\n        >\n          <IconWrapper>\n            <Icon icon=\"cog\" />\n          </IconWrapper>\n        </Link>\n      </Header>\n    );\n  }\n}\n\nclass PureStyledLink extends PureComponent {\n  render() {\n    return <StyledLink {...this.props} />;\n  }\n}\n\nexport default SidebarMenuContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Sidebar from \"react-sidebar\";\nimport { iconWidth } from \"../styleVariables\";\nimport Icon from \"./Icon\";\nimport SidebarMenuContent from \"./SidebarMenuContent\";\n\nclass SidebarMenu extends Component {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    children: PropTypes.func.isRequired,\n    hasMultipleBudgets: PropTypes.bool.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  state = { open: false };\n\n  handleSetOpen = open => {\n    this.setState({ open });\n  };\n\n  handleTriggerClick = () => {\n    this.setState({ open: true });\n  };\n\n  handleCloseSidebar = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { budgetId, children, hasMultipleBudgets, location } = this.props;\n    const { open } = this.state;\n\n    return (\n      <Sidebar\n        sidebar={\n          <SidebarMenuContent\n            budgetId={budgetId}\n            hasMultipleBudgets={hasMultipleBudgets}\n            location={location}\n            onCloseSidebar={this.handleCloseSidebar}\n          />\n        }\n        open={open}\n        onSetOpen={this.handleSetOpen}\n        styles={{\n          sidebar: {\n            backgroundColor: \"#fff\",\n            width: 280,\n            pointerEvents: !open && \"none\"\n          }\n        }}\n      >\n        {children({\n          sidebarTrigger: <Trigger onClick={this.handleTriggerClick} />\n        })}\n      </Sidebar>\n    );\n  }\n}\n\nconst Trigger = ({ onClick }) => (\n  <div\n    onClick={onClick}\n    style={{\n      alignSelf: \"stretch\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: iconWidth\n    }}\n  >\n    <Icon icon=\"bars\" />\n  </div>\n);\n\nexport default SidebarMenu;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport EnsureBudgetLoaded from \"./EnsureBudgetLoaded\";\nimport { PrimaryButton } from \"./Button\";\nimport SidebarMenu from \"./SidebarMenu\";\n\nconst Container = styled.div`\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst PageWrapper = ({\n  authorized,\n  budgetId,\n  budgetLoaded,\n  children,\n  hasMultipleBudgets,\n  location,\n  onAuthorize,\n  onRequestBudget\n}) => (\n  <EnsureBudgetLoaded\n    budgetId={budgetId}\n    budgetLoaded={budgetLoaded}\n    onRequestBudget={onRequestBudget}\n  >\n    <SidebarMenu\n      budgetId={budgetId}\n      location={location}\n      hasMultipleBudgets={hasMultipleBudgets}\n    >\n      {({ sidebarTrigger }) => (\n        <Container>\n          {children({ sidebarTrigger })}\n          {!authorized && (\n            <div\n              style={{\n                padding: \"15px 20px\",\n                backgroundColor: \"#fff\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                flexShrink: 0,\n                borderTop: \"1px solid #ccc\"\n              }}\n            >\n              Your authorization expired.\n              <PrimaryButton onClick={onAuthorize}>Reauthorize</PrimaryButton>\n            </div>\n          )}\n        </Container>\n      )}\n    </SidebarMenu>\n  </EnsureBudgetLoaded>\n);\n\nPageWrapper.propTypes = {\n  authorized: PropTypes.bool.isRequired,\n  budgetId: PropTypes.string.isRequired,\n  budgetLoaded: PropTypes.bool.isRequired,\n  children: PropTypes.func.isRequired,\n  hasMultipleBudgets: PropTypes.bool.isRequired,\n  location: PropTypes.string.isRequired,\n  onAuthorize: PropTypes.func.isRequired,\n  onRequestBudget: PropTypes.func.isRequired\n};\n\nexport default PageWrapper;\n","import compose from \"lodash/fp/compose\";\nimport pick from \"lodash/fp/pick\";\nimport mapRaw from \"lodash/fp/map\";\nimport get from \"lodash/fp/get\";\nimport last from \"lodash/fp/last\";\nimport { groupByProp, simpleMemoize, sumByProp } from \"./dataUtils\";\n\nconst map = mapRaw.convert({ cap: false });\n\nexport const isStartingBalanceOrReconciliation = simpleMemoize(budget => {\n  const startingBalancePayeeId = get(\"id\")(\n    budget.payees.find(payee => payee.name === \"Starting Balance\")\n  );\n  const reconciliationPayeeId = get(\"id\")(\n    budget.payees.find(\n      payee => payee.name === \"Reconciliation Balance Adjustment\"\n    )\n  );\n\n  return transaction =>\n    transaction.payee_id === startingBalancePayeeId ||\n    transaction.payee_id === reconciliationPayeeId;\n});\n\nexport const isIncome = simpleMemoize(budget => {\n  const toBeBudgetedId = get(\"id\")(\n    budget.categories.find(category => category.name === \"Inflow: To be Budgeted\")\n  );\n  return transaction => transaction.category_id === toBeBudgetedId;\n});\n\nexport const isTransfer = (investmentAccounts = {}) => transaction =>\n  !transaction.category_id ||\n  !!investmentAccounts[transaction.transfer_account_id];\n\nexport const getTransactionMonth = transaction => transaction.date.slice(0, 7);\n\nconst rejectNonCategoryTransations = simpleMemoize(transactions =>\n  transactions.filter(tran => !!tran.category_id)\n);\n\nexport const getFirstMonth = budget => {\n  const filteredTransactions = rejectNonCategoryTransations(\n    budget.transactions\n  );\n\n  return filteredTransactions.length\n    ? getTransactionMonth(last(filteredTransactions))\n    : undefined;\n};\n\nexport const getPayeeNodes = ({ payeesById, transactions }, divideBy = 1) =>\n  compose([\n    map((transactions, payeeId) => ({\n      ...(payeesById[payeeId]\n        ? pick([\"id\", \"name\"])(payeesById[payeeId])\n        : { id: \"no-payee\", name: \"(no payee)\" }),\n      amount: sumByProp(\"amount\")(transactions) / divideBy\n    })),\n    groupByProp(\"payee_id\")\n  ])(transactions);\n\nexport const sanitizeName = name => name.replace(/[^a-zA-Z0-9 ]/g, \"\").trim();\n","import { useRef, useState } from \"react\";\nimport moment from \"moment\";\nimport { getSetting, setSetting } from \"./uiRepo\";\nimport { getFirstMonth } from \"./budgetUtils\";\n\nconst MAX_MONTHS_TO_COMPARE = 12;\n\nexport const useSelectedMonth = () => {\n  const [selectedMonth, setSelectedMonth] = useState(null);\n  const selectedMonthRef = useRef(selectedMonth);\n  selectedMonthRef.current = selectedMonth;\n\n  const onSelectMonth = month => {\n    setSelectedMonth(month === selectedMonthRef.current ? null : month);\n  };\n\n  return [selectedMonth, onSelectMonth];\n};\n\nexport const useSelectedEntityId = () => {\n  const [selectedEntityId, setSelectedEntityId] = useState(null);\n  const onSelectEntityId = entityId => {\n    setSelectedEntityId(entityId === selectedEntityId ? null : entityId);\n  };\n\n  return [selectedEntityId, onSelectEntityId];\n};\n\nexport const useTrendsShowAverage = budgetId => {\n  const [showAverage, setShowAverage] = useState(\n    getSetting(\"trendsShowAverage\", budgetId)\n  );\n  const onToggleShowAverage = () => {\n    setShowAverage(!showAverage);\n    setSetting(\"trendsShowAverage\", budgetId, !showAverage);\n  };\n\n  return [showAverage, onToggleShowAverage];\n};\n\nconst getMonths = (firstMonth, lastMonth) => {\n  const months = [firstMonth];\n  let m = firstMonth;\n\n  while (m !== lastMonth) {\n    m = moment(m)\n      .add(1, \"months\")\n      .format(\"YYYY-MM\");\n    months.push(m);\n  }\n\n  return months;\n};\n\nexport const useMonthExclusions = budget => {\n  const [excludeFirstMonth, setExcludeFirstMonth] = useState(\n    getSetting(\"excludeFirstMonth\", budget.id)\n  );\n  const [excludeLastMonth, setExcludeLastMonth] = useState(\n    getSetting(\"excludeLastMonth\", budget.id)\n  );\n\n  const firstBudgetMonth = getFirstMonth(budget);\n  const firstMonth = excludeFirstMonth\n    ? moment(firstBudgetMonth)\n        .add(1, \"months\")\n        .format(\"YYYY-MM\")\n    : firstBudgetMonth;\n  const lastMonth = excludeLastMonth\n    ? moment()\n        .subtract(1, \"months\")\n        .format(\"YYYY-MM\")\n    : moment().format(\"YYYY-MM\");\n  const months = getMonths(firstMonth, lastMonth);\n\n  const onSetExclusion = ({ month, exclude }) => {\n    if (month === \"first\") {\n      setExcludeFirstMonth(exclude);\n      setSetting(\"excludeFirstMonth\", budget.id, exclude);\n    } else {\n      setExcludeLastMonth(exclude);\n      setSetting(\"excludeLastMonth\", budget.id, exclude);\n    }\n  };\n\n  return { excludeFirstMonth, excludeLastMonth, months, onSetExclusion };\n};\n\nexport const useMonthsToCompare = budgetId => {\n  const [monthsToCompare, setMonthsToCompare] = useState(\n    getSetting(\"spendingMonthsToCompare\", budgetId)\n  );\n\n  const onDecrementMonths = () => {\n    const newMonths = Math.max(monthsToCompare - 1, 0);\n    setMonthsToCompare(newMonths);\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\n  };\n\n  const onIncrementMonths = () => {\n    const newMonths = Math.min(monthsToCompare + 1, MAX_MONTHS_TO_COMPARE);\n    setMonthsToCompare(newMonths);\n    setSetting(\"spendingMonthsToCompare\", budgetId, newMonths);\n  };\n\n  return { monthsToCompare, onDecrementMonths, onIncrementMonths };\n};\n\nexport const useFlagState = initial => {\n  const [flag, setFlag] = useState(initial);\n\n  return [\n    flag,\n    () => {\n      setFlag(false);\n    },\n    () => {\n      setFlag(true);\n    },\n    () => {\n      setFlag(!flag);\n    }\n  ];\n};\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Scroller extends Component {\n  static propTypes = {\n    action: PropTypes.string.isRequired,\n    children: PropTypes.func.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  toBeScrolled = null;\n\n  raf = null;\n\n  scrollPositions = {};\n\n  getSnapshotBeforeUpdate() {\n    return { scrollTop: this.toBeScrolled.scrollTop };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { action, location } = this.props;\n\n    if (location === prevProps.location) {\n      return;\n    }\n\n    if (action === \"POP\") {\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = this.scrollPositions[location] || 0;\n      });\n    }\n\n    if (action === \"PUSH\") {\n      this.scrollPositions[prevProps.location] = snapshot.scrollTop;\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = 0;\n      });\n    }\n\n    if (action === \"REPLACE\") {\n      this.raf = requestAnimationFrame(() => {\n        this.toBeScrolled.scrollTop = 0;\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.raf);\n  }\n\n  render() {\n    return this.props.children({\n      ref: el => {\n        this.toBeScrolled = el;\n      }\n    });\n  }\n}\n\nexport default Scroller;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport values from \"lodash/fp/values\";\nimport pages, { makeLink } from \"../pages\";\nimport { MinorText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\n\nconst routes = values(pages)\n  .filter(page => !!page.breadcrumbs)\n  .map(page => ({\n    path: page.path,\n    breadcrumbs: page.breadcrumbs.map(pageKey => ({\n      title: pages[pageKey].title,\n      path: pages[pageKey].path\n    }))\n  }));\n\nconst PageBreadcrumbs = ({ budget }) =>\n  budget ? (\n    <Switch>\n      {routes.map(({ path, breadcrumbs }) => (\n        <Route\n          key={path}\n          path={path}\n          exact\n          render={props => (\n            <MinorText style={{ lineHeight: 1, whiteSpace: \"normal\" }}>\n              {breadcrumbs.map(({ title, path }, index) => (\n                <Fragment key={path}>\n                  <Link\n                    to={makeLink(path, props.match.params)}\n                    style={{\n                      paddingBottom: 8,\n                      display: \"inline-block\"\n                    }}\n                  >\n                    {typeof title === \"function\"\n                      ? title(props.match.params, budget)\n                      : title}\n                  </Link>\n                  {index !== breadcrumbs.length - 1 && (\n                    <Icon\n                      icon=\"chevron-right\"\n                      style={{ padding: \"0 5px\", fontSize: 8 }}\n                    />\n                  )}\n                </Fragment>\n              ))}\n            </MinorText>\n          )}\n        />\n      ))}\n    </Switch>\n  ) : null;\n\nPageBreadcrumbs.propTypes = {\n  budget: PropTypes.object\n};\n\nexport default PageBreadcrumbs;\n","import React from \"react\";\nimport pages, { makeLink } from \"../pages\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport { SecondaryText } from \"./typeComponents\";\n\nconst PageActions = () => (\n  <Switch>\n    <Route\n      path={pages.currentMonth.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.groups.path, match.params)}>\n            Past Months\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.currentMonthGroup.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.group.path, match.params)}>Past Months</Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.currentMonthCategory.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.category.path, match.params)}>\n            Past Months\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.groups.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonth.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.group.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonthGroup.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n    <Route\n      path={pages.category.path}\n      exact\n      render={({ match }) => (\n        <SecondaryText>\n          <Link to={makeLink(pages.currentMonthCategory.path, match.params)}>\n            Current Month\n          </Link>\n        </SecondaryText>\n      )}\n    />\n  </Switch>\n);\n\nPageActions.propTypes = {};\n\nexport default PageActions;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { PageTitle } from \"./typeComponents\";\nimport Scroller from \"./Scroller\";\nimport PageBreadcrumbs from \"./PageBreadcrumbs\";\nimport PageActions from \"./PageActions\";\n\nconst Header = styled.div`\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  height: 60px;\n  padding-left: 0;\n  padding-right: 20px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border-bottom: 2px solid rgba(0, 0, 0, 0.1);\n  white-space: pre;\n  user-select: none;\n`;\n\nconst Body = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n`;\n\nconst PageLayout = ({\n  sidebarTrigger, // from PageWrapper\n  historyAction, // from PageWrapper\n  location, // from PageWrapper\n  budget,\n  title,\n  breadcrumbs,\n  fixedContent,\n  content\n}) => (\n  <Fragment>\n    <Header>\n      {sidebarTrigger}\n      <div style={{ flexGrow: 1 }}>\n        <PageBreadcrumbs budget={budget} />\n        <PageTitle style={{ lineHeight: 1 }}>{title}</PageTitle>\n      </div>\n      <PageActions />\n    </Header>\n    {fixedContent}\n    <Scroller action={historyAction} location={location}>\n      {({ ref }) => <Body ref={ref}>{content}</Body>}\n    </Scroller>\n  </Fragment>\n);\n\nPageLayout.propTypes = {\n  sidebarTrigger: PropTypes.node.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  budget: PropTypes.object,\n  breadcrumbs: PropTypes.node,\n  fixedContent: PropTypes.node,\n  content: PropTypes.node\n};\n\nexport default PageLayout;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport { StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\n\nconst Container = styled.div`\n  margin: ${props => (props.fullWidth ? \"0\" : \"2px\")};\n  background-color: #fff;\n  background-clip: padding-box;\n  border: ${props => (props.fullWidth ? \"0\" : \"1px\")} solid rgba(0, 0, 0, 0.05);\n  border-bottom-width: 1px;\n  border-radius: 2px;\n`;\n\nconst Header = styled(StrongText)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 20px;\n  user-select: none;\n`;\n\nconst SettingsContainer = styled.div`\n  padding: 0 10px;\n  margin-right: -10px;\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  margin-left: 5px;\n`;\n\nconst Body = styled.div`\n  padding: 0 ${props => (props.fullWidth ? \"22px\" : \"20px\")} 15px;\n`;\n\nconst CollapsibleSection = ({\n  actions,\n  children,\n  fullWidth,\n  hasSettings,\n  noPadding,\n  title,\n  onClickSettings\n}) => {\n  const [expanded, setExpanded] = useState(true);\n\n  return (\n    <Container fullWidth={fullWidth}>\n      <Header>\n        <div\n          style={{ display: \"flex\", alignItems: \"center\" }}\n          onClick={() => {\n            setExpanded(!expanded);\n          }}\n        >\n          {title}\n          <Icon\n            icon=\"chevron-right\"\n            transform={{ rotate: expanded ? 90 : 0 }}\n            style={{ marginLeft: 10 }}\n            faded\n          />\n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          {expanded && actions}\n          {hasSettings &&\n            expanded && (\n              <SettingsContainer onClick={onClickSettings}>\n                <Icon icon=\"cog\" faded />\n              </SettingsContainer>\n            )}\n        </div>\n      </Header>\n      <AnimateHeight isExpanded={expanded}>\n        <Body style={{ padding: noPadding && 0 }}>{children}</Body>\n      </AnimateHeight>\n    </Container>\n  );\n};\n\nCollapsibleSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.node,\n  fullWidth: PropTypes.bool,\n  hasSettings: PropTypes.bool,\n  noPadding: PropTypes.bool,\n  onClickSettings: PropTypes.func\n};\n\nexport default CollapsibleSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst CHART_DEFAULTS = {\n  chart: { height: 240, spacing: [0, 0, 0, 0] },\n  credits: { enabled: false },\n  legend: { enabled: false },\n  title: { text: \"\" },\n  subtitle: { text: \"\" },\n  tooltip: { enabled: false },\n  xAxis: { tickLength: 0 }\n};\n\nconst Chart = ({ options }) => (\n  <HighchartsReact\n    highcharts={Highcharts}\n    options={{\n      ...CHART_DEFAULTS,\n      ...options,\n      chart: { ...CHART_DEFAULTS.chart, ...options.chart },\n      xAxis: { ...CHART_DEFAULTS.xAxis, ...options.xAxis }\n    }}\n  />\n);\n\nChart.propTypes = {\n  options: PropTypes.object\n};\n\nexport default Chart;\n","import React from \"react\";\n\nconst CurrencyContext = React.createContext();\n\nexport default CurrencyContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport get from \"lodash/fp/get\";\nimport {\n  positiveColor as green,\n  negativeColor as red\n} from \"../styleVariables\";\nimport CurrencyContext from \"./CurrencyContext\";\n\nexport const addCommas = nStr => {\n  nStr += \"\";\n\n  const x = nStr.split(\".\");\n  let x1 = x[0];\n  const x2 = x.length > 1 ? \".\" + x[1] : \"\";\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, \"$1,$2\");\n  }\n  return x1 + x2;\n};\n\nconst Amount = ({\n  amount,\n  amountAfterDecimal,\n  expectNegative,\n  expectPositive,\n  showCurrencySymbol,\n  style\n}) => (\n  <CurrencyContext.Consumer>\n    {currencyFormat => (\n      <span\n        style={{\n          ...style,\n          color:\n            amount === 0\n              ? null\n              : amount > 0\n              ? expectPositive\n                ? null\n                : green\n              : expectNegative\n              ? null\n              : red\n        }}\n      >\n        {amount === 0\n          ? null\n          : amount > 0\n          ? expectPositive\n            ? null\n            : \"+\"\n          : expectNegative\n          ? null\n          : \"-\"}\n        {showCurrencySymbol && (get(\"symbol\")(currencyFormat) || \"$\")}\n        {addCommas(Math.abs(amount).toFixed(amountAfterDecimal))}\n      </span>\n    )}\n  </CurrencyContext.Consumer>\n);\n\nAmount.propTypes = {\n  amount: PropTypes.number.isRequired,\n  amountAfterDecimal: PropTypes.number,\n  expectNegative: PropTypes.bool,\n  expectPositive: PropTypes.bool,\n  showCurrencySymbol: PropTypes.bool,\n  style: PropTypes.object\n};\n\nAmount.defaultProps = {\n  amountAfterDecimal: 2\n};\n\nexport default Amount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport isNumber from \"lodash/fp/isNumber\";\nimport { MinorText, LargeNumber } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst ChartNumbers = ({ numbers, alwaysRound, expectPositive }) => {\n  const smallNumbers = numbers.some(({ amount }) => Math.abs(amount) < 100);\n  return (\n    <div\n      style={{\n        textAlign: \"right\",\n        lineHeight: \"16px\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        flexDirection: \"row-reverse\",\n        marginBottom: 8\n      }}\n    >\n      {numbers.map(({ amount, label, isMoney = true, decimalsToRound }) => (\n        <div key={label} style={{ marginLeft: 20 }}>\n          <LargeNumber style={{ lineHeight: \"16px\" }}>\n            <Amount\n              amount={amount}\n              amountAfterDecimal={\n                isNumber(decimalsToRound)\n                  ? decimalsToRound\n                  : smallNumbers && !alwaysRound\n                  ? 2\n                  : 0\n              }\n              showCurrencySymbol={isMoney}\n              expectNegative={!expectPositive}\n              expectPositive={expectPositive}\n            />\n          </LargeNumber>\n          <MinorText>{label}</MinorText>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nChartNumbers.propTypes = {\n  numbers: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      label: PropTypes.string.isRequired,\n      alwaysRound: PropTypes.bool,\n      decimalsToRound: PropTypes.number,\n      isMoney: PropTypes.bool\n    })\n  ).isRequired,\n  alwaysRound: PropTypes.bool,\n  expectPositive: PropTypes.bool\n};\n\nexport default ChartNumbers;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport tinyColor from \"tinycolor2\";\nimport compose from \"lodash/fp/compose\";\nimport isNumber from \"lodash/fp/isNumber\";\nimport padCharsStart from \"lodash/fp/padCharsStart\";\nimport range from \"lodash/fp/range\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport { groupByProp, sumByProp } from \"../dataUtils\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport { primaryColor, plotBandColor } from \"../styleVariables\";\nimport { MinorText } from \"./typeComponents\";\nimport Chart from \"./Chart\";\nimport ChartNumbers from \"./ChartNumbers\";\n\nconst DateLabels = styled.div`\n  border-top: 1px solid #ddd;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst getData = ({ month, transactionsByDate }) => {\n  const today = moment().format(\"YYYY-MM-DD\");\n  let cumulative = 0;\n  return range(-1, moment(month).daysInMonth()).map(numDays => {\n    const date =\n      numDays === -1\n        ? moment(month).add(-1, \"days\")\n        : `${month}-${padCharsStart(\"0\")(2)(numDays + 1)}`;\n\n    if (date > today) {\n      return null;\n    }\n\n    cumulative += -sumBy(\"amount\")(transactionsByDate[date] || []);\n\n    return cumulative;\n  });\n};\n\nclass SpendingChart extends PureComponent {\n  static propTypes = {\n    budgetId: PropTypes.string.isRequired,\n    currentMonth: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        amount: PropTypes.number.isRequired,\n        date: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    total: PropTypes.number\n  };\n\n  render() {\n    const {\n      total,\n      transactions,\n      highlightFunction,\n      currentMonth,\n      monthsToCompare\n    } = this.props;\n\n    const highlightedTransactions = highlightFunction\n      ? transactions.filter(highlightFunction)\n      : [];\n    const highlightData = getData({\n      month: currentMonth,\n      transactionsByDate: groupByProp(\"date\")(highlightedTransactions)\n    });\n    const highlightSeries = {\n      type: \"areaspline\",\n      data: highlightData,\n      enableMouseTracking: false,\n      marker: { enabled: false },\n      animation: false,\n      color: primaryColor,\n      lineWidth: 0,\n      fillOpacity: 0.8\n    };\n    const daysInMonth = moment(currentMonth).daysInMonth();\n    const firstDate = moment(currentMonth).add(-1, \"days\");\n    const lastDate = moment(currentMonth).add(daysInMonth - 1, \"days\");\n\n    const transactionsByDate = groupByProp(\"date\")(transactions);\n    const data = getData({ month: currentMonth, transactionsByDate });\n    const lineData = range(0, daysInMonth + 1).map(\n      day => (day / daysInMonth) * total\n    );\n    const firstDayOfWeek = parseInt(firstDate.format(\"d\"), 10);\n    const plotBands = range(0, 6).map(num => ({\n      color: plotBandColor,\n      from: num * 7 - 1.5 - firstDayOfWeek,\n      to: num * 7 + 0.5 - firstDayOfWeek\n    }));\n\n    const comparisonSeries = range(monthsToCompare, 0).map(numMonths => ({\n      type: \"spline\",\n      data: getData({\n        month: moment(currentMonth)\n          .subtract(numMonths, \"months\")\n          .format(\"YYYY-MM\"),\n        transactionsByDate\n      }),\n      enableMouseTracking: false,\n      color:\n        \"#\" +\n        tinyColor\n          .mix(\n            primaryColor,\n            \"#f2f2f2\",\n            30 + ((numMonths - 1) * 70) / monthsToCompare\n          )\n          .toHex(),\n      lineWidth: 1,\n      marker: { enabled: false },\n      animation: false\n    }));\n\n    const spent = compose([\n      sumByProp(\"amount\"),\n      takeWhile(\n        transaction => getTransactionMonth(transaction) === currentMonth\n      )\n    ])(transactions);\n    const chartNumbers = [{ amount: spent, label: \"spent\" }];\n    if (isNumber(total)) {\n      chartNumbers.push({ amount: -(total + spent), label: \"available\" });\n    }\n\n    return (\n      <Fragment>\n        <ChartNumbers numbers={chartNumbers} />\n        <Chart\n          key={monthsToCompare}\n          options={{\n            chart: { spacing: [0, 0, 0, 0], height: 140, animation: false },\n            xAxis: {\n              labels: { enabled: false },\n              plotBands\n            },\n            yAxis: { visible: false, endOnTick: false, startOnTick: false },\n            series: [\n              {\n                type: \"line\",\n                color: \"#aaa\",\n                dashStyle: \"Dot\",\n                lineWidth: 1,\n                data: lineData,\n                enableMouseTracking: false,\n                marker: { enabled: false },\n                animation: false\n              },\n              ...comparisonSeries,\n              {\n                type: \"spline\",\n                data,\n                enableMouseTracking: false,\n                color: primaryColor,\n                marker: { enabled: false },\n                animation: false,\n                ...(highlightFunction && {\n                  type: \"areaspline\",\n                  fillOpacity: 0.2\n                })\n              },\n              highlightSeries\n            ]\n          }}\n        />\n        <DateLabels>\n          <MinorText>{firstDate.format(\"MMM D\")}</MinorText>\n          <MinorText>{lastDate.format(\"MMM D\")}</MinorText>\n        </DateLabels>\n      </Fragment>\n    );\n  }\n}\n\nexport default SpendingChart;\n","import React, { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { StrongText } from \"./typeComponents\";\nimport { PrimaryButton } from \"./Button\";\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  opacity: 0;\n  transition: opacity 0.2s ease-in-out;\n`;\n\nconst ModalContent = styled.div`\n  position: relative;\n  min-width: 200px;\n  padding: 15px 20px;\n  margin-left: 20px;\n  margin-right: 20px;\n  background-color: #fff;\n  border-radius: 2px;\n  transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;\n`;\n\nconst ensureNextTick = callback =>\n  requestAnimationFrame(() => {\n    requestAnimationFrame(callback);\n  });\n\nclass Modal extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    title: PropTypes.string,\n    width: PropTypes.number\n  };\n\n  constructor() {\n    super();\n    this.el = document.createElement(\"div\");\n    this.state = { animationState: \"left\" };\n  }\n\n  componentDidMount() {\n    document.body.appendChild(this.el);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.open && this.props.open) {\n      ensureNextTick(() => {\n        this.setState({ animationState: \"entering\" });\n      });\n    }\n    if (prevProps.open && !this.props.open) {\n      ensureNextTick(() => {\n        this.setState({ animationState: \"leaving\" });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.el);\n  }\n\n  handleTransitionEnd = () => {\n    const { animationState } = this.state;\n\n    if (animationState === \"entering\") {\n      this.setState({ animationState: \"entered\" });\n    } else if (animationState === \"leaving\") {\n      this.setState({ animationState: \"left\" });\n    }\n  };\n\n  render() {\n    const { open, children, title, onClose, width } = this.props;\n    const { animationState } = this.state;\n\n    if (!open && animationState === \"left\") {\n      return null;\n    }\n\n    const shouldShow = [\"entering\", \"entered\"].includes(animationState);\n\n    return createPortal(\n      <Container>\n        <Overlay\n          onClick={onClose}\n          style={{ opacity: shouldShow ? 1 : 0 }}\n          onTransitionEnd={this.handleTransitionEnd}\n        />\n        <ModalContent\n          style={{\n            opacity: shouldShow ? 1 : 0,\n            transform: `translate3d(0, ${shouldShow ? \"0\" : \"20px\"}, 0)`,\n            width\n          }}\n        >\n          {title && (\n            <StrongText style={{ marginBottom: 10 }}>{title}</StrongText>\n          )}\n          {children}\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n              marginTop: 20\n            }}\n          >\n            <PrimaryButton onClick={onClose}>Done</PrimaryButton>\n          </div>\n        </ModalContent>\n      </Container>,\n      this.el\n    );\n  }\n}\n\nexport default Modal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"./Modal\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Button from \"./Button\";\n\nconst ChartSettingsModal = ({\n  open,\n  monthsToCompare,\n  onClose,\n  onDecrementMonths,\n  onIncrementMonths\n}) => (\n  <Modal open={open} title=\"Chart Settings\" onClose={onClose}>\n    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <div style={{ marginRight: 10 }}>\n        <Button onClick={onDecrementMonths}>-</Button>\n        <Button onClick={onIncrementMonths}>+</Button>\n      </div>\n      <SecondaryText>\n        Compare with the last {monthsToCompare} month\n        {monthsToCompare === 1 ? \"\" : \"s\"}\n      </SecondaryText>\n    </div>\n  </Modal>\n);\n\nChartSettingsModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  monthsToCompare: PropTypes.number.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onDecrementMonths: PropTypes.func.isRequired,\n  onIncrementMonths: PropTypes.func.isRequired\n};\n\nexport default ChartSettingsModal;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useMonthsToCompare, useFlagState } from \"../commonHooks\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport SpendingChart from \"./SpendingChart\";\nimport ChartSettingsModal from \"./ChartSettingsModal\";\n\nconst DayByDaySection = ({\n  actions,\n  budgetId,\n  currentMonth,\n  highlightFunction,\n  title,\n  total,\n  transactions\n}) => {\n  const [modalOpen, onCloseModal, onOpenModal] = useFlagState(false);\n  const {\n    monthsToCompare,\n    onIncrementMonths,\n    onDecrementMonths\n  } = useMonthsToCompare(budgetId);\n\n  return (\n    <Fragment>\n      <CollapsibleSection\n        actions={actions}\n        title={title}\n        hasSettings\n        onClickSettings={onOpenModal}\n      >\n        <SpendingChart\n          budgetId={budgetId}\n          currentMonth={currentMonth}\n          highlightFunction={highlightFunction}\n          monthsToCompare={monthsToCompare}\n          total={total}\n          transactions={transactions}\n        />\n      </CollapsibleSection>\n      <ChartSettingsModal\n        open={modalOpen}\n        monthsToCompare={monthsToCompare}\n        onClose={onCloseModal}\n        onDecrementMonths={onDecrementMonths}\n        onIncrementMonths={onIncrementMonths}\n      />\n    </Fragment>\n  );\n};\n\nDayByDaySection.propTypes = {\n  budgetId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  transactions: PropTypes.array.isRequired,\n  actions: PropTypes.node,\n  highlightFunction: PropTypes.func,\n  title: PropTypes.string,\n  total: PropTypes.number\n};\n\nDayByDaySection.defaultProps = { title: \"Day by Day\" };\n\nexport default DayByDaySection;\n","import styled from \"styled-components\";\n\nconst ListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 0;\n  user-select: none;\n\n  &:first-child {\n    padding-top: ${props => !props.isContinuing && 0};\n  }\n`;\n\nexport default ListItem;\n","import styled from \"styled-components\";\nimport { SecondaryText } from \"./typeComponents\";\n\nconst EmptyText = styled(SecondaryText)`\n  text-align: center;\n  margin: 10px;\n  opacity: 0.5;\n`;\n\nexport default EmptyText;\n","import React from \"react\";\nimport EmptyText from \"./EmptyText\";\n\nconst NoTransactions = () => <EmptyText>No transactions this month</EmptyText>;\n\nexport default NoTransactions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\n\nconst LabelWithMinorText = ({ label, minorText, inLink, to, bold }) => (\n  <SecondaryText\n    style={{\n      fontWeight: bold && 700,\n      display: \"flex\",\n      alignItems: \"baseline\",\n      whiteSpace: \"pre\",\n      overflow: \"hidden\",\n      color: inLink && \"inherit\"\n    }}\n  >\n    {to ? <Link to={to}>{label}</Link> : label}\n    {minorText && (\n      <MinorText\n        style={{\n          fontWeight: bold && 700,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\"\n        }}\n      >\n        &nbsp;&ndash; {minorText}\n      </MinorText>\n    )}\n  </SecondaryText>\n);\n\nLabelWithMinorText.propTypes = {\n  label: PropTypes.string.isRequired,\n  bold: PropTypes.bool,\n  inLink: PropTypes.bool,\n  minorText: PropTypes.string,\n  to: PropTypes.string\n};\n\nexport default LabelWithMinorText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst LabelWithTransactionCount = ({\n  label,\n  count,\n  inLink,\n  selected,\n  showCount,\n  to\n}) => (\n  <LabelWithMinorText\n    bold={selected}\n    label={label}\n    minorText={showCount && `${count} transaction${count === 1 ? \"\" : \"s\"}`}\n    inLink={inLink}\n    to={to}\n  />\n);\n\nLabelWithTransactionCount.propTypes = {\n  count: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  inLink: PropTypes.bool,\n  selected: PropTypes.bool,\n  showCount: PropTypes.bool,\n  to: PropTypes.string\n};\n\nLabelWithTransactionCount.defaultProps = { showCount: true };\n\nexport default LabelWithTransactionCount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst AmountWithPercentage = ({\n  amount,\n  expectNegative,\n  expectPositive,\n  total,\n  faded,\n  selected\n}) => (\n  <SecondaryText\n    style={{\n      display: \"flex\",\n      alignItems: \"baseline\",\n      opacity: faded ? 0.3 : 1,\n      fontWeight: selected && 700\n    }}\n  >\n    <Amount\n      amount={amount}\n      expectNegative={expectNegative}\n      expectPositive={expectPositive}\n    />\n    <MinorText\n      style={{ width: 44, textAlign: \"right\", fontWeight: selected && 700 }}\n    >\n      {total ? `${((amount / total) * 100).toFixed(1)}%` : `–`}\n    </MinorText>\n  </SecondaryText>\n);\n\nAmountWithPercentage.propTypes = {\n  amount: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  expectNegative: PropTypes.bool,\n  expectPositive: PropTypes.bool,\n  faded: PropTypes.bool,\n  selected: PropTypes.bool\n};\n\nexport default AmountWithPercentage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MinorText } from \"./typeComponents\";\n\nconst SeeAll = ({ count, pluralizedName, showAll, onToggle }) => (\n  <MinorText style={{ textAlign: \"center\", marginTop: 5 }} onClick={onToggle}>\n    {showAll ? \"see less\" : `see all ${count} ${pluralizedName}`}\n  </MinorText>\n);\n\nSeeAll.propTypes = {\n  count: PropTypes.number.isRequired,\n  pluralizedName: PropTypes.string.isRequired,\n  showAll: PropTypes.bool.isRequired,\n  onToggle: PropTypes.func.isRequired\n};\n\nexport default SeeAll;\n","import React, { Component, PureComponent, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport get from \"lodash/fp/get\";\nimport map from \"lodash/fp/map\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { groupBy, groupByProp, sumByProp } from \"../dataUtils\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport { Link } from \"react-router-dom\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport { SecondaryText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport NoTransactions from \"./NoTransactions\";\nimport LabelWithTransactionCount from \"./LabelWithTransactionCount\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\nimport SeeAll from \"./SeeAll\";\n\nconst mapWithKeys = map.convert({ cap: false });\nconst LIMIT = 5;\n\nconst keyToPluralizedName = {\n  category_group_id: \"category groups\",\n  category_id: \"categories\",\n  payee_id: \"payees\"\n};\n\nclass GenericEntitiesSection extends Component {\n  static propTypes = {\n    entitiesById: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n    entityKey: PropTypes.oneOf([\n      \"category_id\",\n      \"category_group_id\",\n      \"payee_id\"\n    ]),\n    emptyName: PropTypes.string,\n    entityFunction: PropTypes.func,\n    expectNegative: PropTypes.bool,\n    expectPositive: PropTypes.bool,\n    linkFunction: PropTypes.func,\n    limitShowing: PropTypes.bool,\n    numMonths: PropTypes.number,\n    reverse: PropTypes.bool,\n    selectedEntityId: PropTypes.string,\n    showAverage: PropTypes.bool,\n    showAverageToggle: PropTypes.bool,\n    showTransactionCount: PropTypes.bool,\n    onClickEntity: PropTypes.func,\n    onToggleAverage: PropTypes.func\n  };\n\n  static defaultProps = { emptyName: \"(none)\" };\n\n  state = { showAll: false, allMounted: false };\n\n  handleToggleShowAll = () => {\n    const { allMounted, showAll } = this.state;\n    if (allMounted) {\n      this.setState({ showAll: !showAll });\n    } else {\n      this.setState({ allMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ showAll: true });\n      });\n    }\n  };\n\n  render() {\n    const {\n      emptyName,\n      entityKey,\n      entityFunction,\n      entitiesById,\n      expectNegative,\n      expectPositive,\n      linkFunction,\n      limitShowing: limitShowingProp,\n      numMonths,\n      reverse,\n      selectedEntityId,\n      showAverage,\n      showAverageToggle,\n      showTransactionCount,\n      title,\n      transactions,\n      onClickEntity,\n      onToggleAverage\n    } = this.props;\n    const { allMounted, showAll } = this.state;\n    let total = 0;\n    const entities = compose([\n      sortBy(e => (reverse ? -e.amount : e.amount)),\n      mapWithKeys((transactions, entityId) => {\n        const amount = sumByProp(\"amount\")(transactions);\n        total += amount;\n\n        return {\n          entityId,\n          transactions: transactions.length,\n          amount\n        };\n      }),\n      entityFunction ? groupBy(entityFunction) : groupByProp(entityKey)\n    ])(transactions);\n\n    const limitShowing = limitShowingProp && entities.length > LIMIT + 1;\n    const topEntities = entities.slice(0, LIMIT);\n    const otherEntities = entities.slice(LIMIT);\n\n    return (\n      <CollapsibleSection\n        title={title}\n        actions={\n          showAverageToggle && (\n            <SecondaryText onClick={onToggleAverage}>\n              {showAverage ? \"average\" : \"total\"}\n            </SecondaryText>\n          )\n        }\n      >\n        {entities.length === 0 && <NoTransactions />}\n        {(limitShowing ? topEntities : entities).map(\n          ({ entityId, transactions, amount }) => (\n            <GenericItemLink\n              key={entityId}\n              showTransactionCount={showTransactionCount}\n              to={\n                linkFunction && !!entitiesById[entityId]\n                  ? linkFunction(entityId)\n                  : null\n              }\n              transactions={transactions}\n              name={get(\"name\")(entitiesById[entityId]) || emptyName}\n              amount={showAverage ? amount / numMonths : amount}\n              expectNegative={expectNegative}\n              expectPositive={expectPositive}\n              selected={entityId === selectedEntityId}\n              total={showAverage ? total / numMonths : total}\n              id={entityId}\n              onClick={onClickEntity}\n            />\n          )\n        )}\n        {allMounted && (\n          <AnimateHeight isExpanded={showAll}>\n            <Fragment>\n              {otherEntities.map(({ entityId, transactions, amount }) => (\n                <GenericItemLink\n                  key={entityId}\n                  showTransactionCount={showTransactionCount}\n                  to={\n                    linkFunction && !!entitiesById[entityId]\n                      ? linkFunction(entityId)\n                      : null\n                  }\n                  transactions={transactions}\n                  name={get(\"name\")(entitiesById[entityId]) || emptyName}\n                  amount={showAverage ? amount / numMonths : amount}\n                  expectNegative={expectNegative}\n                  expectPositive={expectPositive}\n                  selected={entityId === selectedEntityId}\n                  total={total}\n                  id={entityId}\n                  onClick={onClickEntity}\n                  isContinuing\n                />\n              ))}\n            </Fragment>\n          </AnimateHeight>\n        )}\n        {!!otherEntities.length && limitShowing && (\n          <SeeAll\n            count={entities.length}\n            pluralizedName={keyToPluralizedName[entityKey]}\n            showAll={showAll}\n            onToggle={this.handleToggleShowAll}\n          />\n        )}\n      </CollapsibleSection>\n    );\n  }\n}\n\nconst MaybeLink = ({ to, children, ...other }) =>\n  to ? (\n    <Link {...other} to={to}>\n      {children}\n    </Link>\n  ) : (\n    <span {...other}>{children}</span>\n  );\n\nclass GenericItemLink extends PureComponent {\n  render() {\n    const {\n      showTransactionCount,\n      to,\n      transactions,\n      name,\n      amount,\n      expectNegative,\n      expectPositive,\n      total,\n      selected,\n      id,\n      onClick,\n      isContinuing\n    } = this.props;\n    return (\n      <ListItem\n        isContinuing={isContinuing}\n        onClick={onClick && (() => onClick(id))}\n      >\n        {showTransactionCount ? (\n          <LabelWithTransactionCount\n            count={transactions}\n            label={name}\n            selected={selected}\n            to={to}\n          />\n        ) : (\n          <MaybeLink\n            to={to}\n            onClick={\n              to &&\n              (evt => {\n                evt.stopPropagation();\n              })\n            }\n          >\n            <SecondaryText\n              style={{\n                whiteSpace: \"pre\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n                color: \"inherit\",\n                fontWeight: selected && 700\n              }}\n            >\n              {name}\n            </SecondaryText>\n          </MaybeLink>\n        )}\n        <AmountWithPercentage\n          amount={amount}\n          expectNegative={expectNegative}\n          expectPositive={expectPositive}\n          selected={selected}\n          total={total}\n        />\n      </ListItem>\n    );\n  }\n}\n\nGenericItemLink.propTypes = {\n  amount: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  total: PropTypes.number.isRequired,\n  transactions: PropTypes.number.isRequired,\n  id: PropTypes.string,\n  isContinuing: PropTypes.bool,\n  selected: PropTypes.bool,\n  showTransactionCount: PropTypes.bool,\n  to: PropTypes.string\n};\n\nexport default GenericEntitiesSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport get from \"lodash/fp/get\";\nimport { SecondaryText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport Amount from \"./Amount\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst StyledListItem = styled(ListItem)`\n  border-top: 0;\n  padding-bottom: 0;\n`;\n\nconst DateSummaryTransaction = ({ category, payee, memo, amount }) => (\n  <StyledListItem isContinuing>\n    <div style={{ overflow: \"hidden\" }}>\n      <LabelWithMinorText\n        label={get(\"name\")(payee) || \"(no payee)\"}\n        minorText={\n          get(\"name\")(category) || \"(no category)\" + (memo ? ` (${memo})` : \"\")\n        }\n      />\n    </div>\n    <SecondaryText>\n      <Amount amount={amount} expectNegative />\n    </SecondaryText>\n  </StyledListItem>\n);\n\nDateSummaryTransaction.propTypes = {\n  amount: PropTypes.number.isRequired,\n  category: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  }),\n  isContinuing: PropTypes.bool,\n  memo: PropTypes.string,\n  payee: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n};\n\nexport default DateSummaryTransaction;\n","import React from \"react\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport Amount from \"./Amount\";\nimport styled from \"styled-components\";\nimport ListItem from \"./ListItem\";\n\nconst INDENTATION = 18;\n\nconst NodeWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: ${props => (props.isCompact ? \"0\" : \"8px 0\")};\n  user-select: none;\n\n  ${ListItem}:first-child > & {\n    padding-top: 0;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  box-sizing: border-box;\n  padding-left: 3px;\n  width: ${INDENTATION}px;\n  font-weight: 400;\n  color: #888;\n  font-size: 10px;\n`;\n\nconst ToggleNode = ({\n  expanded,\n  name,\n  id,\n  amount,\n  valueRenderer,\n  onToggle,\n  isCompact\n}) => (\n  <NodeWrapper onClick={onToggle} isCompact={isCompact}>\n    <SecondaryText\n      style={{ whiteSpace: \"pre\", display: \"flex\", alignItems: \"center\" }}\n    >\n      <IconWrapper>\n        <Icon icon=\"chevron-right\" transform={{ rotate: expanded ? 90 : 0 }} />\n      </IconWrapper>\n      {typeof name === \"function\" ? name({ expanded }) : name}\n    </SecondaryText>\n    {valueRenderer ? (\n      valueRenderer({ amount, id, faded: expanded })\n    ) : (\n      <SecondaryText style={{ opacity: expanded ? 0.3 : 1 }}>\n        <Amount amount={amount} expectNegative />\n      </SecondaryText>\n    )}\n  </NodeWrapper>\n);\n\nexport default ToggleNode;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport ListItem from \"./ListItem\";\nimport moment from \"moment\";\nimport { MinorText } from \"./typeComponents\";\nimport { sumByProp } from \"../dataUtils\";\nimport EmptyText from \"./EmptyText\";\nimport DateSummaryTransaction from \"./DateSummaryTransaction\";\nimport ToggleNode from \"./ToggleNode\";\n\nconst Container = styled(ListItem)`\n  display: block;\n`;\n\nconst DateSummary = ({\n  categoriesById,\n  date,\n  expanded,\n  payeesById,\n  transactions,\n  onToggleExpanded\n}) => (\n  <Container>\n    <ToggleNode\n      amount={sumByProp(\"amount\")(transactions)}\n      expanded={expanded}\n      name={\n        <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\n          {moment(date).calendar(null, {\n            sameDay: \"[Today]\",\n            nextDay: \"[Tomorrow]\",\n            nextWeek: \"dddd\",\n            lastDay: \"[Yesterday]\",\n            lastWeek: \"dddd\",\n            sameElse: \"DD/MM/YYYY\"\n          })}\n          {!expanded && (\n            <MinorText>\n              {\" \"}\n              &ndash; {transactions.length} transaction\n              {transactions.length === 1 ? \"\" : \"s\"}\n            </MinorText>\n          )}\n        </div>\n      }\n      onToggle={onToggleExpanded}\n      isCompact\n    />\n    <AnimateHeight isExpanded={expanded}>\n      <div style={{ paddingLeft: 18 }}>\n        {transactions.length ? (\n          transactions.map(transaction => (\n            <DateSummaryTransaction\n              key={transaction.id}\n              amount={transaction.amount}\n              payee={payeesById[transaction.payee_id]}\n              category={categoriesById[transaction.category_id]}\n              memo={transaction.memo}\n            />\n          ))\n        ) : (\n          <EmptyText style={{ margin: 0 }}>no transactions</EmptyText>\n        )}\n      </div>\n    </AnimateHeight>\n  </Container>\n);\n\nDateSummary.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  date: PropTypes.string.isRequired,\n  expanded: PropTypes.bool.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string,\n      payee_id: PropTypes.string\n    })\n  ).isRequired,\n  onToggleExpanded: PropTypes.func.isRequired\n};\n\nexport default DateSummary;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { groupByProp } from \"../dataUtils\";\nimport moment from \"moment\";\nimport range from \"lodash/fp/range\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport DateSummary from \"./DateSummary\";\n\nconst NUM_DAYS = 5;\n\nconst RecentSpending = ({\n  categoriesById,\n  currentMonth,\n  payeesById,\n  transactions\n}) => {\n  const transactionsByDate = groupByProp(\"date\")(transactions);\n  const recentDays = range(0, NUM_DAYS)\n    .map(n =>\n      moment()\n        .subtract(n, \"days\")\n        .format(\"YYYY-MM-DD\")\n    )\n    .filter(date => date.startsWith(currentMonth));\n\n  const [expanded, setExpanded] = useState(\n    recentDays.reduce((acc, date) => ({ ...acc, [date]: false }), {})\n  );\n\n  return (\n    <CollapsibleSection title=\"Recent Spending\">\n      {recentDays.map(date => (\n        <DateSummary\n          key={date}\n          categoriesById={categoriesById}\n          date={date}\n          expanded={!!expanded[date]}\n          onToggleExpanded={() => {\n            setExpanded({ ...expanded, [date]: !expanded[date] });\n          }}\n          payeesById={payeesById}\n          transactions={transactionsByDate[date] || []}\n        />\n      ))}\n    </CollapsibleSection>\n  );\n};\n\nRecentSpending.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired\n    })\n  ).isRequired\n};\n\nexport default RecentSpending;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport {\n  getTransactionMonth,\n  isTransfer,\n  isStartingBalanceOrReconciliation,\n  isIncome,\n  sanitizeName\n} from \"../budgetUtils\";\nimport { notAny } from \"../dataUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useSelectedEntityId } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport RecentSpending from \"./RecentSpending\";\n\nconst CurrentMonthPage = ({\n  budget,\n  currentMonth,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedGroupId, onSelectGroupId] = useSelectedEntityId();\n\n  const {\n    categoryGroupsById,\n    categoriesById,\n    payeesById,\n    id: budgetId\n  } = budget;\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\n  const transactions = budget.transactions.filter(\n    notAny([\n      isIncome(budget),\n      isTransfer(investmentAccounts),\n      isStartingBalanceOrReconciliation(budget)\n    ])\n  );\n  const transactionsThisMonth = takeWhile(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  )(transactions);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            budgetId={budget.id}\n            currentMonth={currentMonth}\n            transactions={transactions}\n            highlightFunction={\n              selectedGroupId &&\n              (transaction =>\n                categoriesById[transaction.category_id].category_group_id ===\n                selectedGroupId)\n            }\n            title={\n              selectedGroup\n                ? `Day by Day: ${sanitizeName(selectedGroup.name)}`\n                : \"Day by Day\"\n            }\n          />\n          <RecentSpending\n            categoriesById={categoriesById}\n            currentMonth={currentMonth}\n            payeesById={payeesById}\n            transactions={transactionsThisMonth}\n          />\n          <GenericEntitiesSection\n            entitiesById={categoryGroupsById}\n            entityFunction={transaction =>\n              categoriesById[transaction.category_id].category_group_id\n            }\n            entityKey=\"category_group_id\"\n            expectNegative\n            linkFunction={groupId =>\n              makeLink(pages.currentMonthGroup.path, {\n                budgetId,\n                categoryGroupId: groupId\n              })\n            }\n            selectedEntityId={selectedGroupId}\n            title=\"Category Groups\"\n            transactions={transactionsThisMonth}\n            showTransactionCount\n            onClickEntity={onSelectGroupId}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport findIndex from \"lodash/fp/findIndex\";\nimport { selectedPlotBandColor } from \"../styleVariables\";\nimport Chart from \"./Chart\";\n\nconst MonthlyChart = ({\n  average,\n  data,\n  height,\n  series,\n  selectedMonth,\n  stacked,\n  onSelectMonth\n}) => {\n  const yearLines = [];\n  const plotBands = [];\n  const categories = data.map(d => moment(d.month).format(\"MMM\"));\n  let highlights = null;\n\n  if (selectedMonth) {\n    highlights = { months: [selectedMonth], color: selectedPlotBandColor };\n  }\n\n  data.forEach(({ month }, index) => {\n    if (moment(month).format(\"MMM\") === \"Jan\") {\n      yearLines.push({\n        color: \"#ccc\",\n        width: 1,\n        value: index - 0.5,\n        zIndex: 3\n      });\n    }\n  });\n\n  if (highlights) {\n    highlights.months.forEach(month => {\n      const index = findIndex(d => d.month === month)(data);\n      plotBands.push({\n        color: highlights.color,\n        from: index - 0.5,\n        to: index + 0.5\n      });\n    });\n  }\n\n  return (\n    <Chart\n      key={data.length}\n      options={{\n        chart: {\n          animation: false,\n          height,\n          type: \"column\",\n          events: {\n            click: event => {\n              onSelectMonth &&\n                onSelectMonth(data[Math.round(event.xAxis[0].value)].month);\n            }\n          }\n        },\n        xAxis: {\n          categories,\n          plotBands,\n          plotLines: yearLines\n        },\n        yAxis: {\n          endOnTick: false,\n          startOnTick: false,\n          gridLineColor: \"#f0f0f0\",\n          labels: {\n            align: \"left\",\n            x: 0,\n            y: -2,\n            style: { color: \"#bbb\", fontSize: \"9px\" },\n            zIndex: 3\n          },\n          tickPixelInterval: 30,\n          title: { text: null },\n          plotLines: average && [\n            {\n              color: \"#aaa\",\n              dashStyle: \"Dot\",\n              width: 1,\n              value: -average,\n              zIndex: 2\n            }\n          ]\n        },\n        plotOptions: {\n          series: { animation: false, stacking: stacked ? \"normal\" : null }\n        },\n        series: series.map(s => {\n          if (s.type === \"line\") {\n            return {\n              color: s.color,\n              data: data.map(s.valueFunction),\n              enableMouseTracking: false,\n              type: \"line\",\n              lineWidth: 1,\n              marker: {\n                radius: 0\n              },\n              zIndex: 3\n            };\n          }\n\n          return {\n            borderWidth: 0,\n            color: s.color,\n            data: data.map(s.valueFunction),\n            enableMouseTracking: false,\n            states: { hover: { brightness: 0 } }\n          };\n        })\n      }}\n    />\n  );\n};\n\nMonthlyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      month: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  series: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string.isRequired,\n      valueFunction: PropTypes.func.isRequired,\n      type: PropTypes.oneOf([\"line\"])\n    })\n  ).isRequired,\n  average: PropTypes.number,\n  height: PropTypes.number,\n  selectedMonth: PropTypes.string,\n  stacked: PropTypes.bool,\n  onSelectMonth: PropTypes.func\n};\n\nMonthlyChart.defaultProps = { height: 140, stacked: true };\n\nexport default MonthlyChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { primaryColor } from \"../styleVariables\";\n\nconst PADDING = 2;\nconst WIDTH = 32;\nconst HEIGHT = 18;\n\nconst Track = styled.div`\n  box-sizing: border-box;\n  padding: ${PADDING}px;\n  display: inline-block;\n  width: ${WIDTH}px;\n  height: ${HEIGHT}px;\n  border-radius: ${HEIGHT / 2}px;\n  background-color: ${props => (props.on ? primaryColor : \"#ddd\")};\n  transition: background-color 0.15s ease-in-out;\n`;\n\nconst Handle = styled.div`\n  box-sizing: border-box;\n  height: ${HEIGHT - 2 * PADDING}px;\n  width: ${HEIGHT - 2 * PADDING}px;\n  border-radius: 50%;\n  background-color: #fff;\n  transform: translate3d(${props => (props.on ? WIDTH - HEIGHT : 0)}px, 0, 0);\n  transition: transform 0.15s ease-in-out;\n`;\n\nconst Toggle = ({ on, onClick }) => (\n  <Track on={on} onClick={onClick}>\n    <Handle on={on} />\n  </Track>\n);\n\nToggle.propTypes = {\n  on: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Toggle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Toggle from \"./Toggle\";\n\nconst Container = styled.div`\n  user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 10px 0;\n`;\n\nconst Label = styled.div``;\n\nconst ToggleWithLabel = ({ label, name, checked, onChange }) => (\n  <Container\n    onClick={() => {\n      onChange({ target: { name, checked: !checked } });\n    }}\n  >\n    <Label>{label}</Label>\n    <Toggle\n      on={checked}\n      onClick={() => {\n        onChange({ target: { name, checked: !checked } });\n      }}\n    />\n  </Container>\n);\n\nToggleWithLabel.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default ToggleWithLabel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Modal from \"./Modal\";\nimport ToggleWithLabel from \"./ToggleWithLabel\";\nimport { MinorText } from \"./typeComponents\";\n\nconst MonthByMonthSettingsModal = ({\n  excludeFirstMonth,\n  excludeLastMonth,\n  open,\n  onClose,\n  onSetExclusion\n}) => (\n  <Modal open={open} onClose={onClose} title=\"Chart Settings\" width={240}>\n    <ToggleWithLabel\n      checked={excludeFirstMonth}\n      label=\"Exclude first month\"\n      name=\"excludeFirstMonth\"\n      onChange={() => {\n        onSetExclusion({ month: \"first\", exclude: !excludeFirstMonth });\n      }}\n    />\n    <ToggleWithLabel\n      checked={excludeLastMonth}\n      label=\"Exclude last month\"\n      name=\"excludeLastMonth\"\n      onChange={() => {\n        onSetExclusion({ month: \"last\", exclude: !excludeLastMonth });\n      }}\n    />\n    <MinorText style={{ marginTop: 5 }}>\n      Excluding incomplete months may lead to more representative averages\n    </MinorText>\n  </Modal>\n);\n\nMonthByMonthSettingsModal.propTypes = {\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired\n};\n\nexport default MonthByMonthSettingsModal;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport { groupBy, sumByProp } from \"../dataUtils\";\nimport { lightPrimaryColor, lighterPrimaryColor } from \"../styleVariables\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport MonthlyChart from \"./MonthlyChart\";\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\n\nconst MonthByMonthSection = ({\n  excludeFirstMonth,\n  excludeLastMonth,\n  expectPositive,\n  highlightFunction,\n  months,\n  selectedMonth,\n  title,\n  transactions,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n\n  let total = 0;\n  let selectedMonthTotal = 0;\n\n  const transactionsByMonth = groupBy(getTransactionMonth)(transactions);\n  const data = months.map(month => {\n    const grouped = groupBy(highlightFunction || (() => false))(\n      transactionsByMonth[month] || []\n    );\n    const amount = sumByProp(\"amount\")(grouped.false || []);\n    const highlighted = sumByProp(\"amount\")(grouped.true || []);\n    total += highlightFunction ? highlighted : amount;\n    if (month === selectedMonth) {\n      selectedMonthTotal = highlightFunction ? highlighted : amount;\n    }\n\n    return {\n      month,\n      amount: expectPositive ? amount : -amount,\n      highlighted: expectPositive ? highlighted : -highlighted\n    };\n  });\n\n  const chartNumbers = selectedMonth\n    ? [\n        { amount: total / months.length, label: \"average\" },\n        {\n          amount: selectedMonthTotal,\n          label: moment(selectedMonth).format(\"MMM YYYY\")\n        }\n      ]\n    : [\n        { amount: total / months.length, label: \"average\" },\n        {\n          amount: total,\n          label: \"total\"\n        }\n      ];\n  const series = [\n    {\n      color: highlightFunction ? lightPrimaryColor : lighterPrimaryColor,\n      valueFunction: d => d.amount\n    }\n  ];\n\n  if (highlightFunction) {\n    series.push({\n      color: lighterPrimaryColor,\n      valueFunction: d => d.highlighted\n    });\n  }\n\n  return (\n    <CollapsibleSection\n      title={title}\n      hasSettings\n      onClickSettings={() => {\n        setSettingsModalOpen(true);\n      }}\n    >\n      <ChartNumbers numbers={chartNumbers} expectPositive={expectPositive} />\n      <MonthlyChart\n        data={data}\n        average={total / months.length}\n        series={series}\n        selectedMonth={selectedMonth}\n        onSelectMonth={onSelectMonth}\n      />\n      <MonthByMonthSettingsModal\n        excludeFirstMonth={excludeFirstMonth}\n        excludeLastMonth={excludeLastMonth}\n        open={settingsModalOpen}\n        onClose={() => {\n          setSettingsModalOpen(false);\n        }}\n        onSetExclusion={onSetExclusion}\n      />\n    </CollapsibleSection>\n  );\n};\n\nMonthByMonthSection.propTypes = {\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  highlightFunction: PropTypes.func,\n  selectedMonth: PropTypes.string,\n  title: PropTypes.string\n};\n\nMonthByMonthSection.defaultProps = { title: \"Month by Month\" };\n\nexport default MonthByMonthSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport {\n  useFlagState,\n  useMonthExclusions,\n  useSelectedEntityId,\n  useSelectedMonth\n} from \"../commonHooks\";\nimport { notAny, simpleMemoize } from \"../dataUtils\";\nimport {\n  getFirstMonth,\n  getTransactionMonth,\n  isIncome,\n  isStartingBalanceOrReconciliation,\n  isTransfer,\n  sanitizeName\n} from \"../budgetUtils\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst getFilteredTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\n    const firstMonth = getFirstMonth(budget);\n    const lastMonth = moment().format(\"YYYY-MM\");\n    return budget.transactions.filter(\n      notAny([\n        isStartingBalanceOrReconciliation(budget),\n        isTransfer(investmentAccounts),\n        transaction =>\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\n        transaction =>\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\n      ])\n    );\n  }\n);\n\nconst getFilteredIncomeTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\n    getFilteredTransactions(\n      budget,\n      investmentAccounts,\n      excludeFirstMonth,\n      excludeLastMonth\n    ).filter(transaction => isIncome(budget)(transaction))\n);\n\nconst IncomePage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [selectedPayeeId, onSelectPayeeId] = useSelectedEntityId();\n  const [showAverage, , , onToggleShowAverage] = useFlagState(true);\n\n  const { payeesById } = budget;\n  const filteredTransactions = getFilteredIncomeTransactions(\n    budget,\n    investmentAccounts,\n    excludeFirstMonth,\n    excludeLastMonth\n  );\n  const transactionsInSelectedMonth =\n    selectedMonth &&\n    filteredTransactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            expectPositive\n            highlightFunction={\n              selectedPayeeId &&\n              (transaction => transaction.payee_id === selectedPayeeId)\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            title={\n              selectedPayeeId\n                ? `Month by Month: ${sanitizeName(\n                    budget.payeesById[selectedPayeeId].name\n                  )}`\n                : \"Month by Month\"\n            }\n            transactions={filteredTransactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={`payee-${selectedMonth || \"all\"}`}\n            entityKey=\"payee_id\"\n            entitiesById={payeesById}\n            numMonths={selectedMonth ? 1 : months.length}\n            reverse\n            title={\n              selectedMonth\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Payees\"\n            }\n            transactions={transactionsInSelectedMonth || filteredTransactions}\n            selectedEntityId={selectedPayeeId}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage}\n            onClickEntity={onSelectPayeeId}\n            onToggleAverage={onToggleShowAverage}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nIncomePage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default IncomePage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport { SecondaryText, MinorText } from \"./typeComponents\";\nimport ListItem from \"./ListItem\";\nimport Amount from \"./Amount\";\nimport LabelWithMinorText from \"./LabelWithMinorText\";\n\nconst Transaction = ({ category, payee, memo, date, amount, isContinuing }) => (\n  <ListItem isContinuing={isContinuing}>\n    <div style={{ overflow: \"hidden\" }}>\n      <LabelWithMinorText\n        label={get(\"name\")(payee) || \"(no payee)\"}\n        minorText={(get(\"name\")(category) || \"\") + (memo ? ` (${memo})` : \"\")}\n      />\n      <MinorText>{moment(date).format(\"dddd, MMM D\")}</MinorText>\n    </div>\n    <SecondaryText>\n      <Amount amount={amount} expectNegative />\n    </SecondaryText>\n  </ListItem>\n);\n\nTransaction.propTypes = {\n  amount: PropTypes.number.isRequired,\n  date: PropTypes.string.isRequired,\n  category: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  }),\n  isContinuing: PropTypes.bool,\n  memo: PropTypes.string,\n  payee: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n};\n\nexport default Transaction;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Transaction from \"./Transaction\";\nimport NoTransactions from \"./NoTransactions\";\n\nconst TransactionsSection = ({\n  transactions,\n  title,\n  categoriesById,\n  payeesById\n}) => (\n  <CollapsibleSection title={title}>\n    {transactions.length ? (\n      transactions.map(\n        ({\n          id,\n          category_id: categoryId,\n          payee_id: payeeId,\n          date,\n          memo,\n          amount\n        }) => (\n          <Transaction\n            key={id}\n            amount={amount}\n            category={categoriesById[categoryId]}\n            date={date}\n            memo={memo}\n            payee={payeesById[payeeId]}\n          />\n        )\n      )\n    ) : (\n      <NoTransactions />\n    )}\n  </CollapsibleSection>\n);\n\nTransactionsSection.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      payee_id: PropTypes.string\n    })\n  ).isRequired,\n  title: PropTypes.string\n};\n\nTransactionsSection.defaultProps = { title: \"Transactions\" };\n\nexport default TransactionsSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport { sumByProp } from \"../dataUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport TransactionsSection from \"./TransactionsSection\";\nimport { useSelectedEntityId } from \"../commonHooks\";\n\nconst CurrentMonthGroupPage = ({\n  budget,\n  categoryGroupId,\n  currentMonth,\n  historyAction,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedCategoryId, onSelectCategoryId] = useSelectedEntityId();\n  const {\n    id: budgetId,\n    payeesById,\n    categories: allCategories,\n    categoriesById,\n    transactions: allTransactions\n  } = budget;\n\n  const selectedCategory =\n    selectedCategoryId && categoriesById[selectedCategoryId];\n  const categories = allCategories.filter(\n    category => category.category_group_id === categoryGroupId\n  );\n  const categoryIds = categories.map(category => category.id);\n  const transactionsInGroup = allTransactions.filter(transaction =>\n    categoryIds.includes(transaction.category_id)\n  );\n  const transactionsInGroupForMonth = transactionsInGroup.filter(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  );\n  const highlightedTransactions =\n    selectedCategoryId &&\n    transactionsInGroupForMonth.filter(\n      transaction => transaction.category_id === selectedCategoryId\n    );\n\n  const spent = -sumByProp(\"activity\")(categories);\n  const available = sumByProp(\"balance\")(categories);\n\n  return (\n    <PageLayout\n      location={location}\n      historyAction={historyAction}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            budgetId={budgetId}\n            currentMonth={currentMonth}\n            highlightFunction={\n              selectedCategoryId &&\n              (transaction => transaction.category_id === selectedCategoryId)\n            }\n            title={\n              selectedCategory\n                ? `Day by Day: ${sanitizeName(selectedCategory.name)}`\n                : \"Day by Day\"\n            }\n            transactions={transactionsInGroup}\n            total={spent + available}\n          />\n          <GenericEntitiesSection\n            entityKey=\"category_id\"\n            entitiesById={categoriesById}\n            expectNegative\n            linkFunction={categoryId =>\n              makeLink(pages.currentMonthCategory.path, {\n                budgetId,\n                categoryGroupId,\n                categoryId\n              })\n            }\n            selectedEntityId={selectedCategoryId}\n            title=\"Categories\"\n            transactions={transactionsInGroupForMonth}\n            showTransactionCount\n            onClickEntity={onSelectCategoryId}\n          />\n          <TransactionsSection\n            categoriesById={categoriesById}\n            payeesById={payeesById}\n            transactions={\n              highlightedTransactions || transactionsInGroupForMonth\n            }\n            title={\n              selectedCategory\n                ? `Transactions: ${sanitizeName(selectedCategory.name)}`\n                : \"Transactions\"\n            }\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthGroupPage.propTypes = {\n  budget: PropTypes.shape({\n    categories: PropTypes.array.isRequired,\n    id: PropTypes.string.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    transactions: PropTypes.array.isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthGroupPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport PageLayout from \"./PageLayout\";\nimport DayByDaySection from \"./DayByDaySection\";\nimport TransactionsSection from \"./TransactionsSection\";\n\nconst CurrentMonthCategoryPage = ({\n  budget,\n  currentMonth,\n  categoryId,\n  historyAction,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    id: budgetId,\n    payeesById,\n    categoriesById,\n    transactions: allTransactions\n  } = budget;\n\n  const category = categoriesById[categoryId];\n  const transactionsInCategory = allTransactions.filter(\n    transaction => transaction.category_id === categoryId\n  );\n  const transactionsInCategoryForMonth = transactionsInCategory.filter(\n    transaction => getTransactionMonth(transaction) === currentMonth\n  );\n\n  const spent = -category.activity;\n  const available = category.balance;\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <DayByDaySection\n            key={category ? category.name : \"day-by-day\"}\n            budgetId={budgetId}\n            currentMonth={currentMonth}\n            title=\"Day by Day\"\n            transactions={transactionsInCategory}\n            total={spent + available}\n          />\n          <TransactionsSection\n            categoriesById={categoriesById}\n            payeesById={payeesById}\n            transactions={transactionsInCategoryForMonth}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nCurrentMonthCategoryPage.propTypes = {\n  budget: PropTypes.shape({\n    categories: PropTypes.array.isRequired,\n    id: PropTypes.string.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    transactions: PropTypes.array.isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  categoryId: PropTypes.string.isRequired,\n  currentMonth: PropTypes.string.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default CurrentMonthCategoryPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useTrendsShowAverage } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst GroupsPage = ({\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  sidebarTrigger,\n  title,\n  transactions,\n  selectedMonth,\n  selectedGroupId,\n  onSelectGroup,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\n\n  const { categoryGroupsById, categoriesById, id: budgetId } = budget;\n  const selectedGroup = selectedGroupId && categoryGroupsById[selectedGroupId];\n\n  const transactionsForMonth =\n    selectedMonth &&\n    transactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            highlightFunction={\n              selectedGroupId &&\n              (transaction =>\n                categoriesById[transaction.category_id].category_group_id ===\n                selectedGroupId)\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            title={\n              selectedGroup\n                ? `Month by Month: ${sanitizeName(selectedGroup.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={selectedMonth || \"all\"}\n            entityFunction={transaction =>\n              categoriesById[transaction.category_id].category_group_id\n            }\n            entityKey=\"category_group_id\"\n            entitiesById={categoryGroupsById}\n            expectNegative\n            linkFunction={categoryGroupId =>\n              makeLink(pages.group.path, { budgetId, categoryGroupId })\n            }\n            selectedEntityId={selectedGroupId}\n            title={\n              selectedMonth\n                ? `Category Groups: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Category Groups\"\n            }\n            transactions={transactionsForMonth || transactions}\n            onClickEntity={onSelectGroup}\n            numMonths={months.length}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage && !selectedMonth}\n            onToggleAverage={onToggleShowAverage}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nGroupsPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectGroup: PropTypes.func.isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedGroupId: PropTypes.string,\n  selectedMonth: PropTypes.string\n};\n\nexport default GroupsPage;\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Transaction from \"./Transaction\";\nimport NoTransactions from \"./NoTransactions\";\nimport SeeAll from \"./SeeAll\";\n\nconst LIMIT = 3;\n\nclass TransactionsByMonthSection extends Component {\n  static propTypes = {\n    categoriesById: PropTypes.object.isRequired,\n    payeesById: PropTypes.object.isRequired,\n    selectedMonth: PropTypes.string.isRequired,\n    transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n    limitShowing: PropTypes.bool,\n    selectedCategoryId: PropTypes.string,\n    selectedPayeeId: PropTypes.string\n  };\n\n  static defaultProps = { limitShowing: true };\n\n  state = { allMounted: false, showAll: false };\n\n  handleToggleShowAll = () => {\n    const { allMounted, showAll } = this.state;\n\n    if (allMounted) {\n      this.setState({ showAll: !showAll });\n    } else {\n      this.setState({ allMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ showAll: true });\n      });\n    }\n  };\n\n  render() {\n    const {\n      categoriesById,\n      payeesById,\n      selectedCategoryId,\n      selectedPayeeId,\n      selectedMonth,\n      transactions,\n      limitShowing: limitShowingProp\n    } = this.props;\n    const { allMounted, showAll } = this.state;\n\n    const selectedCategory =\n      selectedCategoryId && categoriesById[selectedCategoryId];\n    const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\n    const month = moment(selectedMonth).format(\"MMMM\");\n    const transactionsForMonth = compose([\n      limitShowingProp\n        ? sortBy(\"amount\")\n        : transactions => transactions.reverse(),\n      transactions =>\n        transactions.filter(\n          transaction =>\n            getTransactionMonth(transaction) === selectedMonth &&\n            (!selectedCategoryId ||\n              transaction.category_id === selectedCategoryId) &&\n            (!selectedPayeeId || transaction.payee_id === selectedPayeeId)\n        )\n    ])(transactions);\n    const limitShowing =\n      limitShowingProp && transactionsForMonth.length > LIMIT + 2;\n    const topTransactions = limitShowing\n      ? transactionsForMonth.slice(0, LIMIT)\n      : transactionsForMonth;\n    const otherTransactions = limitShowing\n      ? transactionsForMonth.slice(LIMIT)\n      : [];\n\n    return (\n      <CollapsibleSection\n        title={\n          selectedPayee\n            ? `Transactions: ${month}, ${selectedPayee.name}`\n            : selectedCategory\n              ? `Transactions: ${month}, ${selectedCategory.name}`\n              : `Transactions: ${month}`\n        }\n      >\n        {topTransactions.length ? (\n          topTransactions.map(\n            ({\n              id,\n              date,\n              amount,\n              memo,\n              payee_id: payeeId,\n              category_id: categoryId\n            }) => (\n              <Transaction\n                key={id}\n                amount={amount}\n                category={categoriesById[categoryId]}\n                date={date}\n                memo={memo}\n                payee={payeesById[payeeId]}\n              />\n            )\n          )\n        ) : (\n          <NoTransactions />\n        )}\n        {allMounted && (\n          <AnimateHeight isExpanded={showAll}>\n            <Fragment>\n              {otherTransactions.map(\n                ({\n                  id,\n                  date,\n                  amount,\n                  payee_id: payeeId,\n                  category_id: categoryId\n                }) => (\n                  <Transaction\n                    key={id}\n                    amount={amount}\n                    category={categoriesById[categoryId]}\n                    date={date}\n                    payee={payeesById[payeeId]}\n                    isContinuing\n                  />\n                )\n              )}\n            </Fragment>\n          </AnimateHeight>\n        )}\n        {!!otherTransactions.length && (\n          <SeeAll\n            count={transactionsForMonth.length}\n            pluralizedName=\"transactions\"\n            showAll={showAll}\n            onToggle={this.handleToggleShowAll}\n          />\n        )}\n      </CollapsibleSection>\n    );\n  }\n}\n\nexport default TransactionsByMonthSection;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport compose from \"lodash/fp/compose\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport { useTrendsShowAverage } from \"../commonHooks\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\n\nconst GroupPage = ({\n  budget,\n  categoryGroupId,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  selectedMonth,\n  selectedCategoryId,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSelectCategory,\n  onSetExclusion\n}) => {\n  const [showAverage, onToggleShowAverage] = useTrendsShowAverage(budget.id);\n\n  const {\n    categories,\n    categoriesById,\n    categoryGroupsById,\n    payeesById,\n    id: budgetId\n  } = budget;\n  const categoryGroup = categoryGroupsById[categoryGroupId];\n  const selectedCategory =\n    selectedCategoryId && categoriesById[selectedCategoryId];\n  const categoriesInGroup = categories.filter(\n    category => category.category_group_id === categoryGroup.id\n  );\n  const categoryIds = categoriesInGroup.map(category => category.id);\n  const transactionsInGroup = transactions.filter(transaction =>\n    categoryIds.includes(transaction.category_id)\n  );\n  const transactionsInSelectedMonth =\n    selectedMonth &&\n    compose([\n      sortBy(\"amount\"),\n      transactions =>\n        transactions.filter(\n          transaction => getTransactionMonth(transaction) === selectedMonth\n        )\n    ])(transactionsInGroup);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            highlightFunction={\n              selectedCategoryId &&\n              (transaction => transaction.category_id === selectedCategoryId)\n            }\n            selectedMonth={selectedMonth}\n            title={\n              selectedCategory\n                ? `Month by Month: ${sanitizeName(selectedCategory.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactionsInGroup}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            key={`categories-${selectedMonth || \"all\"}`}\n            entityKey=\"category_id\"\n            entitiesById={categoriesById}\n            expectNegative\n            linkFunction={categoryId =>\n              makeLink(pages.category.path, {\n                budgetId,\n                categoryGroupId: categoryGroup.id,\n                categoryId\n              })\n            }\n            title={\n              selectedMonth\n                ? `Categories: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Categories\"\n            }\n            transactions={transactionsInSelectedMonth || transactionsInGroup}\n            selectedEntityId={selectedCategoryId}\n            onClickEntity={onSelectCategory}\n            showAverageToggle={!selectedMonth}\n            showAverage={showAverage && !selectedMonth}\n            numMonths={months.length}\n            onToggleAverage={onToggleShowAverage}\n            limitShowing\n          />\n          {selectedMonth && transactionsInSelectedMonth.length > 0 && (\n            <TransactionsByMonthSection\n              key={`transactions-${selectedMonth ||\n                \"all\"}-${selectedCategoryId || \"all\"}`}\n              categoriesById={categoriesById}\n              payeesById={payeesById}\n              selectedMonth={selectedMonth}\n              selectedCategoryId={selectedCategoryId}\n              transactions={transactionsInSelectedMonth}\n            />\n          )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nGroupPage.propTypes = {\n  budget: PropTypes.shape({\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        categoryId: PropTypes.string\n      })\n    ).isRequired,\n    payeesById: PropTypes.object.isRequired,\n    categoryGroupsById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  categoryGroupId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectCategory: PropTypes.func.isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedCategoryId: PropTypes.string,\n  selectedMonth: PropTypes.string\n};\n\nexport default GroupPage;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst INITIAL_STATE = {\n  selectedMonth: null,\n  selectedGroupId: null,\n  selectedCategoryId: null,\n  selectedPayeeId: null\n};\n\nclass CategoriesState extends Component {\n  static propTypes = {\n    action: PropTypes.oneOf([\"PUSH\", \"POP\", \"REPLACE\"]).isRequired,\n    children: PropTypes.func.isRequired,\n    location: PropTypes.string.isRequired\n  };\n\n  state = INITIAL_STATE;\n\n  cachedStates = {};\n\n  getSnapshotBeforeUpdate() {\n    return this.state;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const { location, action } = this.props;\n\n    if (location === prevProps.location) {\n      return;\n    }\n\n    if (action === \"POP\") {\n      this.cachedStates[prevProps.location] = snapshot;\n      this.setState(this.cachedStates[location]);\n    }\n\n    if (action === \"PUSH\") {\n      this.cachedStates[prevProps.location] = snapshot;\n      this.setState(INITIAL_STATE);\n    }\n\n    if (action === \"REPLACE\") {\n      this.setState(INITIAL_STATE);\n    }\n  }\n\n  handleSelectMonth = month => {\n    this.setState(state => ({\n      ...state,\n      selectedMonth: state.selectedMonth === month ? null : month\n    }));\n  };\n\n  handleSelectGroup = groupId => {\n    this.setState(state => ({\n      ...state,\n      selectedGroupId: state.selectedGroupId === groupId ? null : groupId\n    }));\n  };\n\n  handleSelectCategory = categoryId => {\n    this.setState(state => ({\n      ...state,\n      selectedCategoryId:\n        state.selectedCategoryId === categoryId ? null : categoryId\n    }));\n  };\n\n  handleSelectPayee = payeeId => {\n    this.setState(state => ({\n      ...state,\n      selectedPayeeId: state.selectedPayeeId === payeeId ? null : payeeId\n    }));\n  };\n\n  render() {\n    return this.props.children({\n      ...this.state,\n      onSelectMonth: this.handleSelectMonth,\n      onSelectGroup: this.handleSelectGroup,\n      onSelectCategory: this.handleSelectCategory,\n      onSelectPayee: this.handleSelectPayee,\n      onSetExclusion: this.handleSetExclusion\n    });\n  }\n}\n\nexport default CategoriesState;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { getTransactionMonth, sanitizeName } from \"../budgetUtils\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\n\nconst CategoryPage = ({\n  categoryId,\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  selectedMonth,\n  selectedPayeeId,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSelectPayee,\n  onSetExclusion\n}) => {\n  const { categoriesById, payeesById, id: budgetId } = budget;\n  const category = categoriesById[categoryId];\n  const selectedPayee = selectedPayeeId && payeesById[selectedPayeeId];\n  const transactionsForCategory = transactions.filter(\n    transaction => transaction.category_id === categoryId\n  );\n  const transactionsForMonth =\n    selectedMonth &&\n    transactionsForCategory.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            onSetExclusion={onSetExclusion}\n            highlightFunction={\n              selectedPayeeId &&\n              (transaction => transaction.payee_id === selectedPayeeId)\n            }\n            selectedMonth={selectedMonth}\n            title={\n              selectedPayee\n                ? `Month by Month: ${sanitizeName(selectedPayee.name)}`\n                : \"Month by Month\"\n            }\n            transactions={transactionsForCategory}\n            onSelectMonth={onSelectMonth}\n          />\n          <GenericEntitiesSection\n            key={`payees-${selectedMonth || \"all\"}`}\n            emptyName=\"(no payee)\"\n            entitiesById={payeesById}\n            entityKey=\"payee_id\"\n            expectNegative\n            linkFunction={payeeId =>\n              makeLink(pages.categoryPayee.path, {\n                budgetId,\n                categoryGroupId: category.category_group_id,\n                categoryId: categoryId,\n                payeeId\n              })\n            }\n            title={\n              selectedMonth\n                ? `Payees: ${moment(selectedMonth).format(\"MMMM\")}`\n                : \"Payees\"\n            }\n            transactions={transactionsForMonth || transactionsForCategory}\n            selectedEntityId={selectedPayeeId}\n            onClickEntity={onSelectPayee}\n            limitShowing\n          />\n          {selectedMonth &&\n            transactionsForMonth.length > 0 && (\n              <TransactionsByMonthSection\n                key={`transactions-${selectedMonth ||\n                  \"all\"}-${selectedPayeeId || \"all\"}`}\n                categoriesById={categoriesById}\n                payeesById={payeesById}\n                transactions={transactionsForMonth}\n                selectedMonth={selectedMonth}\n                selectedPayeeId={selectedPayeeId}\n              />\n            )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nCategoryPage.propTypes = {\n  budget: PropTypes.shape({\n    categoriesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        payee_id: PropTypes.string\n      })\n    ).isRequired,\n    payeesById: PropTypes.object.isRequired\n  }).isRequired,\n  categoryId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSelectPayee: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string,\n  selectedPayeeId: PropTypes.string\n};\n\nexport default CategoryPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport TransactionsByMonthSection from \"./TransactionsByMonthSection\";\n\nconst CategoryPayeePage = ({\n  budget,\n  categoryId,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  location,\n  months,\n  payeeId,\n  selectedMonth,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSelectMonth,\n  onSetExclusion\n}) => {\n  const { categoriesById, payeesById } = budget;\n  const transactionsForCategoryAndPayee = transactions.filter(\n    transaction =>\n      transaction.category_id === categoryId && transaction.payee_id === payeeId\n  );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      budget={budget}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            months={months}\n            selectedMonth={selectedMonth}\n            transactions={transactionsForCategoryAndPayee}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          {selectedMonth && (\n            <TransactionsByMonthSection\n              categoriesById={categoriesById}\n              payeesById={payeesById}\n              selectedMonth={selectedMonth}\n              transactions={transactionsForCategoryAndPayee}\n              limitShowing={false}\n            />\n          )}\n        </Fragment>\n      }\n    />\n  );\n};\n\nCategoryPayeePage.propTypes = {\n  budget: PropTypes.shape({\n    payeesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    categoriesById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  categoryId: PropTypes.string.isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  payeeId: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      payee_id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  onSetExclusion: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default CategoryPayeePage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  primaryColor,\n  lightPrimaryColor,\n  negativeChartColor\n} from \"../styleVariables\";\nimport MonthlyChart from \"./MonthlyChart\";\n\nconst IncomeVsExpensesChart = ({ data, onSelectMonth, selectedMonth }) => (\n  <MonthlyChart\n    data={data}\n    height={180}\n    selectedMonth={selectedMonth}\n    series={[\n      { color: lightPrimaryColor, valueFunction: d => d.income },\n      { color: negativeChartColor, valueFunction: d => d.expenses },\n      {\n        type: \"line\",\n        color: primaryColor,\n        valueFunction: d => d.income + d.expenses\n      }\n    ]}\n    onSelectMonth={onSelectMonth}\n  />\n);\n\nIncomeVsExpensesChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      expenses: PropTypes.number.isRequired,\n      income: PropTypes.number.isRequired,\n      month: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default IncomeVsExpensesChart;\n","import React, { Component, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\nimport ListItem from \"./ListItem\";\nimport ToggleNode from \"./ToggleNode\";\n\nconst INDENTATION = 18;\n\nclass BreakdownNode extends Component {\n  static propTypes = {\n    amount: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n    isTopLevel: PropTypes.bool.isRequired,\n    name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    nodes: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired\n      })\n    ),\n    valueRenderer: PropTypes.func\n  };\n\n  state = { expanded: false, childrenMounted: false };\n\n  handleToggleExpand = () => {\n    const { expanded, childrenMounted } = this.state;\n\n    if (childrenMounted) {\n      this.setState({ expanded: !expanded });\n    } else {\n      this.setState({ childrenMounted: true });\n      requestAnimationFrame(() => {\n        this.setState({ expanded: true });\n      });\n    }\n  };\n\n  render() {\n    const { name, id, amount, nodes, isTopLevel, valueRenderer } = this.props;\n    const { expanded, childrenMounted } = this.state;\n    const hasChildNodes = !!nodes && nodes.length > 0;\n\n    return (\n      <Container hasChildNodes={hasChildNodes} isTopLevel={isTopLevel}>\n        {hasChildNodes ? (\n          <ToggleNode\n            id={id}\n            name={name}\n            amount={amount}\n            expanded={expanded}\n            onToggle={this.handleToggleExpand}\n            valueRenderer={valueRenderer}\n          />\n        ) : (\n          <LeafNode\n            id={id}\n            name={name}\n            amount={amount}\n            valueRenderer={valueRenderer}\n          />\n        )}\n\n        {hasChildNodes &&\n          childrenMounted && (\n            <AnimateHeight isExpanded={expanded}>\n              <Nodes nodes={nodes} valueRenderer={valueRenderer} />\n            </AnimateHeight>\n          )}\n      </Container>\n    );\n  }\n}\n\nclass Nodes extends PureComponent {\n  render() {\n    const { nodes, valueRenderer } = this.props;\n    return (\n      <div style={{ paddingLeft: INDENTATION }}>\n        {nodes.map(node => (\n          <BreakdownNode\n            {...node}\n            key={node.id}\n            isTopLevel={false}\n            valueRenderer={valueRenderer}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst NodeWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n  user-select: none;\n\n  ${ListItem}:first-child > & {\n    padding-top: 0;\n  }\n`;\n\nconst LeafNode = ({ name, id, amount, valueRenderer }) => (\n  <NodeWrapper>\n    <SecondaryText>{name}</SecondaryText>\n    {valueRenderer ? (\n      valueRenderer({ amount, id })\n    ) : (\n      <SecondaryText>\n        <Amount amount={amount} />\n      </SecondaryText>\n    )}\n  </NodeWrapper>\n);\n\nconst Container = ({ isTopLevel, hasChildNodes, children }) =>\n  isTopLevel ? (\n    <ListItem style={{ display: \"block\", padding: 0 }}>{children}</ListItem>\n  ) : (\n    children\n  );\n\nexport default BreakdownNode;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BreakdownNode from \"./BreakdownNode\";\n\nconst Breakdown = ({ nodes, valueRenderer }) =>\n  nodes.map(({ id, name, amount, nodes }) => (\n    <BreakdownNode\n      key={id}\n      id={id}\n      name={name}\n      amount={amount}\n      nodes={nodes}\n      valueRenderer={valueRenderer}\n      isTopLevel\n    />\n  ));\n\nBreakdown.propTypes = {\n  nodes: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      id: PropTypes.string.isRequired,\n      name: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n      nodes: PropTypes.array\n    })\n  ).isRequired,\n  valueRenderer: PropTypes.func\n};\n\nBreakdown.defaultProps = { reverse: false };\n\nexport default Breakdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport concat from \"lodash/fp/concat\";\nimport mapRaw from \"lodash/fp/map\";\nimport omit from \"lodash/fp/omit\";\nimport pick from \"lodash/fp/pick\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { sumByProp, groupByProp } from \"../dataUtils\";\nimport { getPayeeNodes } from \"../budgetUtils\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst ExpensesBreakdown = ({\n  categoriesById,\n  categoryGroupsById,\n  transactions,\n  totalIncome,\n  payeesById,\n  divideBy\n}) => {\n  const categoryNodes = compose([\n    map((transactions, categoryId) => {\n      const payeeNodes = getPayeeNodes({ payeesById, transactions }, divideBy);\n      return {\n        ...pick([\"id\", \"name\", \"category_group_id\"])(\n          categoriesById[categoryId]\n        ),\n        nodes: sortBy(\"amount\")(payeeNodes),\n        amount: sumByProp(\"amount\")(payeeNodes)\n      };\n    }),\n    groupByProp(\"category_id\")\n  ])(transactions);\n\n  const groupNodes = compose([\n    map((nodes, categoryGroupId) => {\n      const categoryNodes = map(omit(\"category_group_id\"))(nodes);\n      return {\n        ...pick([\"id\", \"name\"])(categoryGroupsById[categoryGroupId]),\n        nodes: sortBy(\"amount\")(categoryNodes),\n        amount: sumByProp(\"amount\")(categoryNodes)\n      };\n    }),\n    groupByProp(\"category_group_id\")\n  ])(categoryNodes);\n\n  const rootPayeeNodes = getPayeeNodes(\n    {\n      payeesById,\n      transactions: transactions.filter(transaction => !transaction.category_id)\n    },\n    divideBy\n  );\n\n  const nodes = compose([\n    nodes =>\n      concat(nodes)([\n        {\n          id: \"net\",\n          amount: -totalIncome - sumByProp(\"amount\")(nodes),\n          name: \"Net Income\"\n        }\n      ]),\n    sortBy(\"amount\"),\n    concat(rootPayeeNodes)\n  ])(groupNodes);\n\n  return (\n    <CollapsibleSection title=\"Expenses Breakdown\">\n      <Breakdown\n        nodes={nodes}\n        valueRenderer={node => (\n          <AmountWithPercentage {...node} expectNegative total={-totalIncome} />\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nExpensesBreakdown.propTypes = {\n  categoriesById: PropTypes.objectOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      category_group_id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  categoryGroupsById: PropTypes.objectOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  divideBy: PropTypes.number.isRequired,\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\n  totalIncome: PropTypes.number.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      category_id: PropTypes.string\n    })\n  ).isRequired\n};\n\nExpensesBreakdown.defaultProps = { divideBy: 1 };\n\nexport default ExpensesBreakdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport { getPayeeNodes } from \"../budgetUtils\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport AmountWithPercentage from \"./AmountWithPercentage\";\n\nconst IncomeBreakdown = ({ transactions, payeesById, divideBy }) => {\n  const nodes = getPayeeNodes({ payeesById, transactions }, divideBy);\n  const total = sumBy(\"amount\")(nodes);\n  return (\n    <CollapsibleSection title=\"Income Breakdown\">\n      <Breakdown\n        nodes={sortBy(\"amount\")(nodes).reverse()}\n        total={total}\n        valueRenderer={node => (\n          <AmountWithPercentage {...node} expectPositive total={total} />\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nIncomeBreakdown.propTypes = {\n  divideBy: PropTypes.number.isRequired,\n  payeesById: PropTypes.objectOf(PropTypes.object).isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      categoryId: PropTypes.string\n    })\n  ).isRequired\n};\n\nIncomeBreakdown.defaultProps = { divideBy: 1 };\n\nexport default IncomeBreakdown;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { sumByProp } from \"../dataUtils\";\nimport ExpensesBreakdown from \"./ExpensesBreakdown\";\nimport IncomeBreakdown from \"./IncomeBreakdown\";\n\nconst Breakdowns = ({\n  categoriesById,\n  categoryGroupsById,\n  payeesById,\n  expenseTransactions,\n  incomeTransactions,\n  divideBy\n}) => (\n  <Fragment>\n    <ExpensesBreakdown\n      categoriesById={categoriesById}\n      categoryGroupsById={categoryGroupsById}\n      payeesById={payeesById}\n      transactions={expenseTransactions}\n      totalIncome={sumByProp(\"amount\")(incomeTransactions) / divideBy}\n      divideBy={divideBy}\n    />\n    <IncomeBreakdown\n      payeesById={payeesById}\n      transactions={incomeTransactions}\n      divideBy={divideBy}\n    />\n  </Fragment>\n);\n\nBreakdowns.propTypes = {\n  categoriesById: PropTypes.object.isRequired,\n  categoryGroupsById: PropTypes.object.isRequired,\n  expenseTransactions: PropTypes.array.isRequired,\n  incomeTransactions: PropTypes.array.isRequired,\n  payeesById: PropTypes.object.isRequired,\n  divideBy: PropTypes.number.isRequired\n};\n\nexport default Breakdowns;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compact from \"lodash/fp/compact\";\nimport compose from \"lodash/fp/compose\";\nimport find from \"lodash/fp/find\";\nimport flatMap from \"lodash/fp/flatMap\";\nimport mapRaw from \"lodash/fp/map\";\nimport matchesProperty from \"lodash/fp/matchesProperty\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport { sumByProp, groupBy, simpleMemoize } from \"../dataUtils\";\nimport { getTransactionMonth, isIncome } from \"../budgetUtils\";\nimport { SecondaryText } from \"./typeComponents\";\nimport PageLayout from \"./PageLayout\";\nimport IncomeVsExpensesChart from \"./IncomeVsExpensesChart\";\nimport Breakdowns from \"./Breakdowns\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport MonthByMonthSettingsModal from \"./MonthByMonthSettingsModal\";\nimport { useSelectedMonth } from \"../commonHooks\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst getSummaries = simpleMemoize((transactions, investmentAccounts, budget) =>\n  compose([\n    sortBy(\"month\"),\n    map((transactions, month) => {\n      const grouped = groupBy(isIncome(budget))(transactions);\n\n      return {\n        month,\n        expenseTransactions: grouped.false || [],\n        incomeTransactions: grouped.true || [],\n        income: sumByProp(\"amount\")(grouped.true || []),\n        expenses: sumByProp(\"amount\")(grouped.false || [])\n      };\n    }),\n    groupBy(getTransactionMonth)\n  ])(transactions)\n);\n\nconst IncomeVsExpensesPage = ({\n  budget,\n  excludeFirstMonth,\n  excludeLastMonth,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title,\n  transactions,\n  onSetExclusion\n}) => {\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [settingsModalOpen, setSettingsModalOpen] = useState(false);\n  const [showTotals, setShowTotals] = useState(false);\n  const { categoriesById, categoryGroupsById, payeesById } = budget;\n\n  const allSummaries = getSummaries(transactions, investmentAccounts, budget);\n  const summaries = selectedMonth\n    ? [find(matchesProperty(\"month\", selectedMonth))(allSummaries)]\n    : allSummaries;\n\n  const incomeTransactions = flatMap(summary => summary.incomeTransactions)(\n    compact(summaries)\n  );\n  const expenseTransactions = flatMap(summary => summary.expenseTransactions)(\n    compact(summaries)\n  );\n\n  const totalExpenses = sumByProp(\"amount\")(expenseTransactions);\n  const totalIncome = sumByProp(\"amount\")(incomeTransactions);\n  const denominator = showTotals ? 1 : summaries.length;\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <CollapsibleSection\n            title=\"Monthly Trend\"\n            hasSettings\n            onClickSettings={() => {\n              setSettingsModalOpen(true);\n            }}\n            actions={\n              <SecondaryText\n                onClick={() => {\n                  setShowTotals(!showTotals);\n                }}\n              >\n                {showTotals ? \"show average\" : \"show total\"}\n              </SecondaryText>\n            }\n          >\n            <ChartNumbers\n              expectPositive\n              numbers={[\n                {\n                  label: \"net income\",\n                  amount: (totalExpenses + totalIncome) / denominator\n                },\n                {\n                  label: \"expenses\",\n                  amount: -totalExpenses / denominator\n                },\n                {\n                  label: \"income\",\n                  amount: totalIncome / denominator\n                }\n              ]}\n            />\n            <IncomeVsExpensesChart\n              data={allSummaries}\n              selectedMonth={selectedMonth}\n              onSelectMonth={onSelectMonth}\n            />\n            <MonthByMonthSettingsModal\n              excludeFirstMonth={excludeFirstMonth}\n              excludeLastMonth={excludeLastMonth}\n              open={settingsModalOpen}\n              onClose={() => {\n                setSettingsModalOpen(false);\n              }}\n              onSetExclusion={onSetExclusion}\n            />\n          </CollapsibleSection>\n          <Breakdowns\n            categoriesById={categoriesById}\n            categoryGroupsById={categoryGroupsById}\n            payeesById={payeesById}\n            expenseTransactions={expenseTransactions}\n            incomeTransactions={incomeTransactions}\n            divideBy={showTotals ? 1 : summaries.length}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nIncomeVsExpensesPage.propTypes = {\n  budget: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    months: PropTypes.arrayOf(\n      PropTypes.shape({\n        month: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  excludeFirstMonth: PropTypes.bool.isRequired,\n  excludeLastMonth: PropTypes.bool.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSetExclusion: PropTypes.func.isRequired\n};\n\nexport default IncomeVsExpensesPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport includes from \"lodash/fp/includes\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport { groupBy } from \"../dataUtils\";\nimport {\n  primaryColor,\n  lightPrimaryColor,\n  negativeChartColor\n} from \"../styleVariables\";\nimport MonthlyChart from \"./MonthlyChart\";\n\nconst CREDIT_ACCOUNTS = [\"mortgage\", \"creditCard\"];\nconst getStack = ({ type, id, mortgageAccounts }) => {\n  if (mortgageAccounts[id]) {\n    return \"liability\";\n  }\n\n  return includes(type)(CREDIT_ACCOUNTS) ? \"liability\" : \"asset\";\n};\n\nconst NetWorthChart = ({\n  data,\n  months,\n  mortgageAccounts,\n  selectedMonth,\n  onSelectMonth\n}) => {\n  const groupedData = groupBy(d =>\n    getStack({ type: d.type, id: d.id, mortgageAccounts })\n  )(data);\n  const monthlyData = months.map((month, index) => ({\n    month,\n    assets: sumBy(d => d.data[index])(groupedData.asset),\n    liabilities: sumBy(d => d.data[index])(groupedData.liability)\n  }));\n\n  return (\n    <MonthlyChart\n      selectedMonth={selectedMonth}\n      onSelectMonth={onSelectMonth}\n      data={monthlyData}\n      height={180}\n      series={[\n        {\n          color: negativeChartColor,\n          valueFunction: d => Math.max(-d.liabilities, 0)\n        },\n        {\n          color: lightPrimaryColor,\n          valueFunction: d => Math.max(d.assets, 0)\n        },\n        {\n          color: primaryColor,\n          type: \"line\",\n          valueFunction: d => d.assets + d.liabilities\n        }\n      ]}\n      stacked={false}\n    />\n  );\n};\n\nNetWorthChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      data: PropTypes.arrayOf(PropTypes.number).isRequired,\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  months: PropTypes.arrayOf(PropTypes.string).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onSelectMonth: PropTypes.func.isRequired,\n  selectedMonth: PropTypes.string\n};\n\nexport default NetWorthChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport every from \"lodash/fp/every\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport mapRaw from \"lodash/fp/map\";\nimport propEq from \"lodash/fp/propEq\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport startCase from \"lodash/fp/startCase\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\nimport Toggle from \"./Toggle\";\n\nconst map = mapRaw.convert({ cap: false });\n\nconst getNodes = ({ accounts, investmentAccounts, mortgageAccounts }) => {\n  const accountsByGroup = groupBy(account => {\n    if (investmentAccounts[account.id]) {\n      return \"Investments\";\n    }\n\n    if (mortgageAccounts[account.id]) {\n      return \"Mortgages\";\n    }\n\n    return startCase(account.type);\n  })(accounts);\n\n  return compose([\n    accounts => accounts.reverse(),\n    sortBy(\"amount\"),\n    map((accounts, name) => ({\n      name,\n      accounts,\n      amount: sumBy(\"balance\")(accounts),\n      id: name,\n      nodes: compose([\n        sortBy(\"balance\"),\n        map(({ id, name, balance }) => ({\n          amount: balance,\n          id,\n          name\n        }))\n      ])(accounts)\n    }))\n  ])(accountsByGroup);\n};\n\nconst NetWorthAccounts = ({\n  accounts,\n  hiddenAccounts,\n  onToggleAccounts,\n  investmentAccounts,\n  mortgageAccounts\n}) => {\n  const accountsById = keyBy(\"id\")(accounts);\n  const nodes = getNodes({\n    accounts,\n    investmentAccounts,\n    mortgageAccounts\n  });\n\n  return (\n    <CollapsibleSection title=\"Accounts\">\n      <AccountBreakdown\n        accountsById={accountsById}\n        hiddenAccounts={hiddenAccounts}\n        nodes={nodes}\n        onToggleAccounts={onToggleAccounts}\n      />\n    </CollapsibleSection>\n  );\n};\n\nNetWorthAccounts.propTypes = {\n  accounts: PropTypes.arrayOf(\n    PropTypes.shape({\n      balance: PropTypes.number.isRequired,\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  hiddenAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onToggleAccounts: PropTypes.func.isRequired\n};\n\nconst AccountBreakdown = ({\n  accountsById,\n  hiddenAccounts,\n  nodes,\n  onToggleAccounts\n}) => (\n  <Breakdown\n    nodes={nodes}\n    valueRenderer={({ id, amount }) => {\n      const node = nodes.find(propEq(\"id\", id));\n      const accounts = node ? node.accounts : [accountsById[id]];\n\n      return (\n        <SecondaryText style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Amount amount={amount} />\n          <div\n            style={{ display: \"flex\", alignItems: \"center\", marginLeft: 10 }}\n          >\n            <Toggle\n              onClick={evt => {\n                evt.stopPropagation();\n                onToggleAccounts({ ids: map(\"id\")(accounts) });\n              }}\n              on={!every(account => hiddenAccounts[account.id])(accounts)}\n            />\n          </div>\n        </SecondaryText>\n      );\n    }}\n  />\n);\n\nexport default NetWorthAccounts;\n","import React from \"react\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport moment from \"moment\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport Breakdown from \"./Breakdown\";\nimport { SecondaryText } from \"./typeComponents\";\nimport Amount from \"./Amount\";\n\nconst NetWorthChanges = ({ months, accountSummaries, hiddenAccounts }) => {\n  const totals = months.map(month => ({ month, total: 0 }));\n  accountSummaries.forEach(({ id, data }) => {\n    if (hiddenAccounts[id]) {\n      return;\n    }\n\n    data.forEach((num, index) => {\n      totals[index].total += num;\n    });\n  });\n\n  const changes = totals\n    .map((t, i) => ({\n      year: t.month.slice(0, 4),\n      month: t.month,\n      change: i === 0 ? null : t.total - totals[i - 1].total\n    }))\n    .reverse();\n\n  const years = groupBy(\"year\")(changes);\n\n  const nodes = Object.keys(years)\n    .sort()\n    .reverse()\n    .map(year => ({\n      amount: sumBy(\"change\")(years[year]),\n      id: year,\n      name: year,\n      nodes: years[year].map(v => ({\n        amount: v.change,\n        name: moment(v.month).format(\"MMMM\"),\n        id: v.month\n      }))\n    }));\n\n  return (\n    <CollapsibleSection title=\"Net Worth Changes\">\n      <Breakdown\n        nodes={nodes}\n        valueRenderer={({ faded, amount }) => (\n          <SecondaryText style={{ opacity: faded ? 0.3 : 1 }}>\n            <Amount amount={amount} positiveColor=\"green\" negativeColor=\"red\" />\n          </SecondaryText>\n        )}\n      />\n    </CollapsibleSection>\n  );\n};\n\nexport default NetWorthChanges;\n","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport compose from \"lodash/fp/compose\";\nimport constant from \"lodash/fp/constant\";\nimport eq from \"lodash/fp/eq\";\nimport filter from \"lodash/fp/filter\";\nimport findIndex from \"lodash/fp/findIndex\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport identity from \"lodash/fp/identity\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport keys from \"lodash/fp/keys\";\nimport last from \"lodash/fp/last\";\nimport map from \"lodash/fp/map\";\nimport mapValues from \"lodash/fp/mapValues\";\nimport omitBy from \"lodash/fp/omitBy\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sum from \"lodash/fp/sum\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport values from \"lodash/fp/values\";\nimport { simpleMemoize } from \"../dataUtils\";\nimport { useSelectedMonth } from \"../commonHooks\";\nimport { getSetting, setSetting } from \"../uiRepo\";\nimport PageLayout from \"./PageLayout\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ChartNumbers from \"./ChartNumbers\";\nimport NetWorthChart from \"./NetWorthChart\";\nimport NetWorthAccounts from \"./NetWorthAccounts\";\nimport NetWorthChanges from \"./NetWorthChanges\";\n\nconst useHiddenAccounts = budget => {\n  const [hiddenAccounts, setHiddenAccounts] = useState(\n    getSetting(\"netWorthHiddenAccounts\", budget.id)\n  );\n\n  const onToggleHiddenAccounts = ({ ids }) => {\n    const shouldHide = ids.some(id => !hiddenAccounts[id]);\n    const newHiddenAccounts = ids.reduce(\n      (acc, id) => ({ ...acc, [id]: shouldHide }),\n      hiddenAccounts\n    );\n\n    setHiddenAccounts(newHiddenAccounts);\n    setSetting(\"netWorthHiddenAccounts\", budget.id, newHiddenAccounts);\n  };\n\n  return { hiddenAccounts, onToggleHiddenAccounts };\n};\n\nconst cumulative = arr =>\n  arr.reduce(\n    (acc, curr) => (acc.length === 0 ? [curr] : acc.concat(last(acc) + curr)),\n    []\n  );\n\nconst groupByMonthAndAccount = simpleMemoize(\n  compose([\n    mapValues(groupBy(\"account_id\")),\n    groupBy(({ date }) => date.slice(0, 7))\n  ])\n);\n\nconst getMonths = simpleMemoize(budget =>\n  compose([sortBy(identity), keys, groupByMonthAndAccount])(budget.transactions)\n);\n\nconst getSummaryByAccount = simpleMemoize(budget => {\n  const groupedTransactions = groupByMonthAndAccount(budget.transactions);\n  const months = getMonths(budget);\n  return map(({ id }) => ({\n    id,\n    data: compose([\n      cumulative,\n      map(month => sumBy(\"amount\")(groupedTransactions[month][id]))\n    ])(months)\n  }))(budget.accounts);\n});\n\nconst getSelectedBalances = simpleMemoize((selectedMonth, budget) => {\n  const months = getMonths(budget);\n  const selectedMonthIndex = findIndex(eq(selectedMonth))(months);\n  const accountSummaries = getSummaryByAccount(budget);\n\n  return compose([\n    mapValues(({ data }) =>\n      selectedMonthIndex > -1 ? data[selectedMonthIndex] : last(data)\n    ),\n    keyBy(\"id\")\n  ])(accountSummaries);\n});\n\nconst NetWorthPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  mortgageAccounts,\n  sidebarTrigger,\n  title\n}) => {\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const { hiddenAccounts, onToggleHiddenAccounts } = useHiddenAccounts(budget);\n  const months = getMonths(budget);\n  const accountSummaries = getSummaryByAccount(budget);\n  const selectedBalances = getSelectedBalances(selectedMonth, budget);\n  const filterHidden = omitBy((_, id) => hiddenAccounts[id]);\n  const selectedLiabilities = compose([\n    sum,\n    filter(b => b < 0),\n    values,\n    filterHidden\n  ])(selectedBalances);\n  const selectedAssets = compose([\n    sum,\n    filter(b => b > 0),\n    values,\n    filterHidden\n  ])(selectedBalances);\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <CollapsibleSection title=\"Monthly Trend\">\n            <ChartNumbers\n              alwaysRound\n              expectPositive\n              numbers={[\n                {\n                  amount: selectedAssets + selectedLiabilities,\n                  label: \"Net Worth\"\n                },\n                { amount: selectedAssets, label: \"Assets\" },\n                { amount: -selectedLiabilities, label: \"Liabilities\" }\n              ]}\n            />\n            <NetWorthChart\n              data={map(({ id, data }) => ({\n                data: hiddenAccounts[id] ? data.map(constant(0)) : data,\n                type: budget.accountsById[id].type,\n                id\n              }))(accountSummaries)}\n              months={months}\n              mortgageAccounts={mortgageAccounts}\n              selectedMonth={selectedMonth}\n              onSelectMonth={onSelectMonth}\n            />\n          </CollapsibleSection>\n          <NetWorthAccounts\n            accounts={map(account => ({\n              ...account,\n              balance: selectedBalances[account.id]\n            }))(budget.accounts)}\n            hiddenAccounts={hiddenAccounts}\n            investmentAccounts={investmentAccounts}\n            mortgageAccounts={mortgageAccounts}\n            onToggleAccounts={onToggleHiddenAccounts}\n          />\n          <NetWorthChanges\n            accountSummaries={accountSummaries}\n            hiddenAccounts={hiddenAccounts}\n            months={months}\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nNetWorthPage.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    accountsById: PropTypes.objectOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        account_id: PropTypes.string.isRequired,\n        amount: PropTypes.number.isRequired,\n        date: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  location: PropTypes.string.isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default NetWorthPage;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport keys from \"lodash/fp/keys\";\nimport get from \"lodash/fp/get\";\nimport EmptyText from \"./EmptyText\";\nimport { Link } from \"react-router-dom\";\nimport pages, { makeLink } from \"../pages\";\nimport PageLayout from \"./PageLayout\";\nimport MonthByMonthSection from \"./MonthByMonthSection\";\nimport { getTransactionMonth } from \"../budgetUtils\";\nimport GenericEntitiesSection from \"./GenericEntitiesSection\";\nimport {\n  useMonthExclusions,\n  useSelectedEntityId,\n  useSelectedMonth\n} from \"../commonHooks\";\n\nconst isContribution = investmentAccounts => transaction =>\n  !!investmentAccounts[transaction.account_id] &&\n  !!transaction.transfer_account_id &&\n  !investmentAccounts[transaction.transfer_account_id];\n\nconst isCapitalGainOrLoss = (investmentAccounts, payeesById) => transaction =>\n  !!investmentAccounts[transaction.account_id] &&\n  !transaction.transfer_account_id &&\n  get([transaction.payee_id, \"name\"])(payeesById) !== \"Starting Balance\";\n\nconst isInvestmentTransaction = (\n  investmentAccounts,\n  payeesById\n) => transaction =>\n  isContribution(investmentAccounts)(transaction) ||\n  isCapitalGainOrLoss(investmentAccounts, payeesById)(transaction);\n\nconst InvestmentsPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  sidebarTrigger,\n  title\n}) => {\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n  const [selectedMonth, onSelectMonth] = useSelectedMonth();\n  const [selectedBreakdown, onSelectBreakdown] = useSelectedEntityId();\n\n  const { payeesById } = budget;\n\n  if (keys(investmentAccounts).length === 0) {\n    return (\n      <EmptyText>\n        You don't have any accounts marked as investment accounts.{\" \"}\n        <Link to={makeLink(pages.settings.path, { budgetId: budget.id })}>\n          Go to Settings\n        </Link>\n      </EmptyText>\n    );\n  }\n\n  const investmentTransactions = budget.transactions.filter(\n    isInvestmentTransaction(investmentAccounts, payeesById)\n  );\n  const transactionsInMonth =\n    selectedMonth &&\n    investmentTransactions.filter(\n      transaction => getTransactionMonth(transaction) === selectedMonth\n    );\n\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <MonthByMonthSection\n            excludeFirstMonth={excludeFirstMonth}\n            excludeLastMonth={excludeLastMonth}\n            expectPositive\n            highlightFunction={\n              selectedBreakdown &&\n              (transaction =>\n                selectedBreakdown === \"contribution\"\n                  ? isContribution(investmentAccounts)(transaction)\n                  : isCapitalGainOrLoss(investmentAccounts, payeesById)(\n                      transaction\n                    ))\n            }\n            months={months}\n            selectedMonth={selectedMonth}\n            transactions={investmentTransactions}\n            onSelectMonth={onSelectMonth}\n            onSetExclusion={onSetExclusion}\n          />\n          <GenericEntitiesSection\n            transactions={transactionsInMonth || investmentTransactions}\n            entitiesById={{\n              contribution: { name: \"Contributions\" },\n              capitalGain: { name: \"Capital Gains/Losses\" }\n            }}\n            expectPositive\n            title=\"Growth Breakdown\"\n            onClickEntity={onSelectBreakdown}\n            selectedEntityId={selectedBreakdown}\n            entityFunction={transaction =>\n              isContribution(investmentAccounts)(transaction)\n                ? \"contribution\"\n                : \"capitalGain\"\n            }\n            positiveIsRed\n          />\n        </Fragment>\n      }\n    />\n  );\n};\n\nInvestmentsPage.propTypes = {\n  budget: PropTypes.object.isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.object.isRequired,\n  location: PropTypes.string.isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default InvestmentsPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  primaryColor,\n  negativeColor,\n  selectedPlotBandColor\n} from \"../styleVariables\";\nimport Chart from \"./Chart\";\n\nconst ProjectionsChart = ({\n  investmentsProjection,\n  mortgageProjection,\n  amountNeededToRetire,\n  yearsUntilRetirement\n}) => (\n  <Chart\n    options={{\n      chart: {\n        type: \"column\"\n      },\n      xAxis: {\n        type: \"category\",\n        plotBands: [\n          {\n            color: selectedPlotBandColor,\n            from: Math.floor(yearsUntilRetirement) - 0.5,\n            to: Math.floor(yearsUntilRetirement) + 0.5\n          }\n        ]\n      },\n      yAxis: {\n        title: { text: null },\n        endOnTick: false,\n        plotLines: [\n          {\n            value: amountNeededToRetire,\n            color: \"#ccc\",\n            width: 1\n          }\n        ]\n      },\n      legend: {\n        enabled: false\n      },\n      series: [\n        { data: investmentsProjection, color: primaryColor, borderWidth: 0 },\n        { data: mortgageProjection, color: negativeColor, borderWidth: 0 }\n      ]\n    }}\n  />\n);\n\nProjectionsChart.propTypes = {\n  amountNeededToRetire: PropTypes.number.isRequired,\n  investmentsProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  mortgageProjection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  yearsUntilRetirement: PropTypes.number.isRequired\n};\n\nexport default ProjectionsChart;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst isDescendant = (parent, child) => {\n  let node = child.parentNode;\n  while (node !== null) {\n    if (node === parent) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n  return false;\n};\n\nclass ClickOff extends Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n    onClickOff: PropTypes.func\n  };\n\n  parent = null;\n\n  componentDidMount() {\n    document.body.addEventListener(\"click\", this.handleBodyClick);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.handleBodyClick);\n  }\n\n  handleBodyClick = evt => {\n    if (this.props.onClickOff && !isDescendant(this.parent, evt.target)) {\n      this.props.onClickOff();\n    }\n  };\n\n  render() {\n    return this.props.children({\n      ref: el => {\n        this.parent = el;\n      }\n    });\n  }\n}\n\nexport default ClickOff;\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport AnimateHeight from \"react-animate-height-auto\";\nimport ClickOff from \"./ClickOff\";\nimport Button from \"./Button\";\n\nconst bodyEl = document.getElementsByTagName(\"body\")[0];\n\nconst Container = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: #fff;\n`;\n\nconst ProjectionsSlider = ({\n  name,\n  formatter,\n  label,\n  value,\n  onBlur,\n  onChange,\n  onReset,\n  rangeOptions\n}) =>\n  createPortal(\n    <ClickOff onClickOff={name && onBlur}>\n      {({ ref }) => (\n        <Container ref={ref}>\n          <AnimateHeight isExpanded={!!name}>\n            <div style={{ borderTop: \"1px solid #bbb\", padding: \"15px 20px\" }}>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  marginBottom: 15\n                }}\n              >\n                {label}: {formatter(value || 0)}\n                <Button\n                  onClick={() => {\n                    onReset(name);\n                  }}\n                >\n                  reset\n                </Button>\n              </div>\n              <Range\n                {...rangeOptions}\n                name={name}\n                value={value || 0}\n                onChange={onChange}\n              />\n            </div>\n          </AnimateHeight>\n        </Container>\n      )}\n    </ClickOff>,\n    bodyEl\n  );\n\nProjectionsSlider.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  formatter: PropTypes.func,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  value: PropTypes.number\n};\n\nProjectionsSlider.defaultProps = {\n  formatter: val => val\n};\n\nconst Range = ({ name, onReset, ...other }) => (\n  <input\n    {...other}\n    name={name}\n    type=\"range\"\n    style={{ display: \"block\", width: \"100%\" }}\n  />\n);\n\nexport default ProjectionsSlider;\n","import React, { Fragment, PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport chunk from \"lodash/fp/chunk\";\nimport compose from \"lodash/fp/compose\";\nimport get from \"lodash/fp/get\";\nimport head from \"lodash/fp/head\";\nimport map from \"lodash/fp/map\";\nimport pick from \"lodash/fp/pick\";\nimport range from \"lodash/fp/range\";\nimport { simpleMemoize, keyByProp } from \"../dataUtils\";\nimport { selectedPlotBandColor } from \"../styleVariables\";\nimport {\n  getMortgageRate,\n  getReturnOnInvestments,\n  getAverageContribution,\n  getCurrentInvestments,\n  getAverageExpensesWithoutMortgage,\n  getProjection,\n  getProjectionWithRetirement\n} from \"../projectionUtils\";\nimport PageLayout from \"./PageLayout\";\nimport Icon from \"./Icon\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport ProjectionsChart from \"./ProjectionsChart\";\nimport ProjectionsSlider from \"./ProjectionsSlider\";\nimport ChartNumbers from \"./ChartNumbers\";\n\nconst YEARS_TO_PROJECT = 50;\n\nconst adjustableEntries = [\n  {\n    label: \"Average monthly contribution\",\n    name: \"averageContribution\",\n    formatter: val => `$${Math.round(val)}`\n  },\n  {\n    label: \"Average return on investments\",\n    name: \"returnOnInvestments\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  },\n  {\n    label: \"Average expenses without mortgage\",\n    name: \"averageExpenses\",\n    formatter: val => `$${Math.round(val)}`\n  },\n  {\n    label: \"Return on investment after retirement\",\n    name: \"retirementReturns\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  },\n  {\n    label: \"Average tax rate after retirement\",\n    name: \"retirementTaxRate\",\n    formatter: val => `${(val * 100).toFixed(1)}%`\n  }\n];\n\nconst adjustableEntriesByName = keyByProp(\"name\")(adjustableEntries);\n\nconst getInitialState = simpleMemoize(\n  (budget, investmentAccounts, mortgageAccounts) => {\n    const {\n      paymentsLeft: remainingMortgagePayments,\n      mortgagePayment,\n      principalProjection: mortgageProjection\n    } = getMortgageRate(budget, mortgageAccounts) || {};\n    const returnOnInvestments = getReturnOnInvestments(\n      budget,\n      investmentAccounts\n    );\n    const averageContribution = getAverageContribution(\n      budget,\n      investmentAccounts\n    );\n    const currentInvestments = getCurrentInvestments(\n      budget,\n      investmentAccounts\n    );\n    const averageExpenses = getAverageExpensesWithoutMortgage(\n      budget,\n      investmentAccounts,\n      mortgageAccounts\n    );\n\n    return {\n      mortgagePayment,\n      remainingMortgagePayments,\n      mortgageProjection,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      averageExpenses,\n      retirementReturns: 0.04,\n      retirementTaxRate: 0.15,\n      maxAverageExpenses: Math.ceil((averageExpenses * 2) / 1000) * 1000,\n      maxAverageContribution: Math.ceil((averageContribution * 2) / 1000) * 1000\n    };\n  }\n);\n\nclass ProjectionsPage extends PureComponent {\n  static propTypes = {\n    budget: PropTypes.shape({\n      transactions: PropTypes.array.isRequired\n    }).isRequired,\n    historyAction: PropTypes.string.isRequired,\n    investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n    location: PropTypes.string.isRequired,\n    mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n    sidebarTrigger: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...getInitialState(\n        props.budget,\n        props.investmentAccounts,\n        props.mortgageAccounts\n      ),\n      adjustingName: null\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: parseFloat(e.target.value) });\n  };\n\n  handleSelectAdjusting = name => {\n    this.setState(state => ({\n      adjustingName: state.adjustingName === name ? null : name\n    }));\n  };\n\n  handleClearSelection = () => {\n    this.setState({ adjustingName: null });\n  };\n\n  handleResetCalculation = calculation => {\n    const { budget, investmentAccounts, mortgageAccounts } = this.props;\n    this.setState(\n      pick(calculation)(\n        getInitialState(budget, investmentAccounts, mortgageAccounts)\n      )\n    );\n  };\n\n  render() {\n    const { historyAction, location, sidebarTrigger, title } = this.props;\n    const {\n      mortgagePayment,\n      remainingMortgagePayments,\n      mortgageProjection,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      averageExpenses,\n      retirementReturns,\n      retirementTaxRate,\n      maxAverageExpenses,\n      maxAverageContribution,\n      adjustingName\n    } = this.state;\n\n    const projection = getProjection({\n      numMonths: YEARS_TO_PROJECT * 12,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments\n    });\n    const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\n    const amountNeededToRetire =\n      averageExpenses / (monthlyRetirementReturn * (1 - retirementTaxRate));\n    let m = 0;\n\n    while (m < projection.length) {\n      if (m < remainingMortgagePayments) {\n        const remainingMortgage = range(\n          0,\n          remainingMortgagePayments - m\n        ).reduce(\n          (acc, curr) =>\n            acc +\n            mortgagePayment /\n              (1 + monthlyRetirementReturn * (1 - retirementTaxRate)) ** curr,\n          0\n        );\n        if (\n          (projection[m] - remainingMortgage) *\n            monthlyRetirementReturn *\n            (1 - retirementTaxRate) >\n          averageExpenses\n        ) {\n          break;\n        }\n      } else {\n        if (\n          projection[m] * monthlyRetirementReturn * (1 - retirementTaxRate) >\n          averageExpenses\n        ) {\n          break;\n        }\n      }\n      m += 1;\n    }\n\n    const projectionWithRetirement = getProjectionWithRetirement({\n      numMonths: YEARS_TO_PROJECT * 12,\n      returnOnInvestments,\n      averageContribution,\n      currentInvestments,\n      monthsBeforeRetirement: m,\n      monthlyExpenses: averageExpenses,\n      retirementReturns,\n      retirementTaxRate,\n      remainingMortgagePayments,\n      mortgagePayment\n    });\n    const hasMortgage = !!mortgagePayment;\n\n    const yearsUntilRetirement = m / 12;\n    const projectionByYear = compose([map(head), chunk(12)])(\n      projectionWithRetirement\n    );\n    const mortgageProjectionByYear = compose([map(head), chunk(12)])(\n      mortgageProjection\n    );\n\n    const nameToRangeOptions = {\n      averageContribution: { min: 0, max: maxAverageContribution, step: 50 },\n      returnOnInvestments: { min: 0, max: 0.2, step: 0.001 },\n      averageExpenses: { min: 0, max: maxAverageExpenses, step: 50 },\n      retirementReturns: { min: 0, max: 0.2, step: 0.001 },\n      retirementTaxRate: { min: 0, max: 0.5, step: 0.001 }\n    };\n\n    return (\n      <PageLayout\n        historyAction={historyAction}\n        location={location}\n        sidebarTrigger={sidebarTrigger}\n        title={title}\n        content={\n          <Fragment>\n            <CollapsibleSection title=\"Projection\">\n              <ChartNumbers\n                numbers={[\n                  {\n                    amount: -amountNeededToRetire,\n                    label: \"needed for retirement\",\n                    decimalsToRound: 0\n                  },\n                  {\n                    amount: -yearsUntilRetirement,\n                    label: \"years to retirement\",\n                    isMoney: false,\n                    decimalsToRound: 1\n                  }\n                ]}\n              />\n              <ProjectionsChart\n                investmentsProjection={projectionByYear}\n                mortgageProjection={mortgageProjectionByYear}\n                amountNeededToRetire={amountNeededToRetire}\n                yearsUntilRetirement={yearsUntilRetirement}\n              />\n            </CollapsibleSection>\n            <CollapsibleSection title=\"Assumptions\">\n              {adjustableEntries.map(({ label, name, formatter }) => (\n                <AdjustableEntry\n                  key={name}\n                  label={label}\n                  name={name}\n                  value={this.state[name]}\n                  formatter={formatter}\n                  isAdjusting={adjustingName === name}\n                  onSelect={this.handleSelectAdjusting}\n                  onReset={this.handleResetCalculation}\n                  onChange={this.handleChange}\n                />\n              ))}\n              {hasMortgage && (\n                <Fragment>\n                  <Entry\n                    label=\"Mortgage payment\"\n                    value={mortgagePayment}\n                    formatter={val => `$${val.toFixed(2)}`}\n                  />\n                  <Entry\n                    label=\"Time remaining on mortgage\"\n                    value={remainingMortgagePayments}\n                    formatter={val => `${(val / 12).toFixed(1)} years`}\n                  />\n                </Fragment>\n              )}\n            </CollapsibleSection>\n            <ProjectionsSlider\n              name={adjustingName}\n              label={get([adjustingName, \"label\"])(adjustableEntriesByName)}\n              onReset={this.handleResetCalculation}\n              onChange={this.handleChange}\n              onBlur={this.handleClearSelection}\n              formatter={get([adjustingName, \"formatter\"])(\n                adjustableEntriesByName\n              )}\n              value={this.state[adjustingName]}\n              rangeOptions={nameToRangeOptions[adjustingName]}\n            />\n          </Fragment>\n        }\n      />\n    );\n  }\n}\n\nconst AdjustableEntry = ({\n  label,\n  value,\n  formatter,\n  name,\n  onSelect,\n  isAdjusting\n}) => (\n  <Entry\n    label={label}\n    value={value}\n    formatter={formatter}\n    onClick={() => {\n      onSelect(name);\n    }}\n    highlightValue={isAdjusting}\n    isAdjustable\n  />\n);\n\nconst Entry = ({\n  label,\n  value,\n  onClick,\n  highlightValue,\n  isAdjustable,\n  formatter = a => a\n}) => (\n  <div\n    style={{\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      padding: \"2px 0\"\n    }}\n  >\n    {label}:\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\n      <strong\n        style={{\n          backgroundColor: highlightValue ? selectedPlotBandColor : null,\n          padding: isAdjustable && \"0 4px\",\n          borderRadius: 2\n        }}\n      >\n        {formatter(value)}\n      </strong>\n      {isAdjustable && <Icon icon=\"pencil\" faded style={{ marginLeft: 4 }} />}\n    </div>\n  </div>\n);\n\nexport default ProjectionsPage;\n","import moment from \"moment\";\nimport add from \"lodash/fp/add\";\nimport compose from \"lodash/fp/compose\";\nimport concat from \"lodash/fp/concat\";\nimport filter from \"lodash/fp/filter\";\nimport find from \"lodash/fp/find\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport head from \"lodash/fp/head\";\nimport identity from \"lodash/fp/identity\";\nimport includes from \"lodash/fp/includes\";\nimport keys from \"lodash/fp/keys\";\nimport last from \"lodash/fp/last\";\nimport map from \"lodash/fp/map\";\nimport matches from \"lodash/fp/matches\";\nimport multiply from \"lodash/fp/multiply\";\nimport prop from \"lodash/fp/prop\";\nimport range from \"lodash/fp/range\";\nimport reduce from \"lodash/fp/reduce\";\nimport reject from \"lodash/fp/reject\";\nimport sortBy from \"lodash/fp/sortBy\";\nimport sumBy from \"lodash/fp/sumBy\";\nimport takeWhile from \"lodash/fp/takeWhile\";\nimport takeRightWhile from \"lodash/fp/takeRightWhile\";\nimport uniq from \"lodash/fp/uniq\";\nimport { getTransactionMonth } from \"./budgetUtils\";\n\nexport const getMortgageRate = (\n  { accounts, transactions: allTransactions },\n  mortgageAccounts\n) => {\n  const mortgageAccount = find(account => mortgageAccounts[account.id])(\n    accounts\n  );\n\n  if (!mortgageAccount) {\n    return null;\n  }\n\n  const transactions = compose([\n    sortBy(\"date\"),\n    filter(matches({ account_id: mortgageAccount.id }))\n  ])(allTransactions);\n  const lastMonth = compose([t => t.date.slice(0, 7), last])(transactions);\n  const lastMonthTransactions = takeRightWhile(\n    t => t.date.slice(0, 7) === lastMonth\n  )(transactions);\n\n  const P = -compose([\n    sumBy(\"amount\"),\n    takeWhile(t => t.date.slice(0, 7) !== lastMonth)\n  ])(transactions);\n  const P1 = P - sumBy(\"amount\")(lastMonthTransactions);\n  const c = compose([prop(\"amount\"), find(prop(\"transfer_account_id\"))])(\n    lastMonthTransactions\n  );\n  const r = (P1 + c) / P - 1;\n  const N = -Math.log(1 - (r * P) / c) / Math.log(1 + r);\n\n  const rate = r * 12;\n  const paymentsLeft = N - 1;\n\n  const projection = map(n => (1 + r) ** n * P - (((1 + r) ** n - 1) / r) * c)(\n    range(1, N)\n  );\n\n  return {\n    rate,\n    mortgagePayment: c,\n    paymentsLeft,\n    principalProjection: projection\n  };\n};\n\nexport const getCurrentInvestments = (\n  { accounts, transactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  return compose([\n    sumBy(\"amount\"),\n    filter(({ account_id: accountId }) =>\n      includes(accountId)(investmentAccountIds)\n    )\n  ])(transactions);\n};\n\nexport const getReturnOnInvestments = (\n  { accounts, payees, transactions: allTransactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const transactionsByMonth = compose([\n    groupBy(tr => tr.date.slice(0, 7)),\n    reject(t => includes(t.transfer_account_id)(investmentAccountIds)), // remove transfers between investment accounts\n    filter(t => includes(t.account_id)(investmentAccountIds))\n  ])(allTransactions);\n\n  let startForMonth = 0;\n  const returnRates = [];\n\n  const months = compose([sortBy(identity), keys])(transactionsByMonth);\n  map(month => transactionsByMonth[month])(months).forEach(trs => {\n    const contributions = compose([\n      sumBy(\"amount\"),\n      filter(prop(\"transfer_account_id\"))\n    ])(trs);\n    const gains = reject(prop(\"transfer_account_id\"))(trs);\n    const returns = sumBy(\"amount\")(gains);\n\n    if (startForMonth && gains.length) {\n      returnRates.push(returns / (startForMonth + 0.5 * contributions));\n    }\n\n    startForMonth += returns + contributions;\n  });\n\n  const totalReturn = compose([reduce(multiply, 1), map(add(1))])(returnRates);\n  const numMonths = returnRates.length;\n\n  return totalReturn ** (12 / numMonths) - 1;\n};\n\nexport const getAverageContribution = (\n  { accounts, transactions: allTransactions },\n  investmentAccounts\n) => {\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const contributions = compose([\n    filter(\n      ({ transfer_account_id: transferAccountId }) =>\n        transferAccountId && !includes(transferAccountId)(investmentAccountIds)\n    ),\n    filter(({ account_id: accountId }) =>\n      includes(accountId)(investmentAccountIds)\n    )\n  ])(allTransactions);\n\n  const months = compose([\n    sortBy(identity),\n    uniq,\n    map(d => d.slice(0, 7)),\n    map(\"date\")\n  ])(contributions);\n\n  const totalContributions = sumBy(\"amount\")(contributions);\n  const numMonths =\n    moment(last(months)).diff(moment(head(months)), \"months\") + 1;\n\n  return totalContributions / numMonths;\n};\n\nexport const getAverageExpensesWithoutMortgage = (\n  { transactions, accounts, payees, categoriesById, categoryGroupsById },\n  investmentAccounts,\n  mortgageAccounts\n) => {\n  const startingBalanceId = compose([\n    prop(\"id\"),\n    find(matches({ name: \"Starting Balance\" }))\n  ])(payees);\n  const months = compose([sortBy(identity), uniq, map(getTransactionMonth)])(\n    transactions\n  );\n\n  const mortgageAccountIds = compose([\n    filter(id => mortgageAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const investmentAccountIds = compose([\n    filter(id => investmentAccounts[id]),\n    map(\"id\")\n  ])(accounts);\n\n  const totalExpenses = compose([\n    sumBy(\"amount\"),\n    reject(\n      tr =>\n        tr.amount > 0 &&\n        !tr.transfer_account_id &&\n        (!tr.category_id ||\n          !categoryGroupsById[categoriesById[tr.category_id].category_group_id])\n    ),\n    reject(tr =>\n      includes(tr.transfer_account_id)(\n        concat(mortgageAccountIds, investmentAccountIds)\n      )\n    ),\n    reject(tr =>\n      includes(tr.account_id)(concat(mortgageAccountIds, investmentAccountIds))\n    ),\n    reject(tr =>\n      includes(getTransactionMonth(tr))([head(months), last(months)])\n    ),\n    reject(matches({ payee_id: startingBalanceId }))\n  ])(transactions);\n\n  return -totalExpenses / (months.length - 2);\n};\n\nexport const getProjection = ({\n  numMonths,\n  returnOnInvestments,\n  averageContribution,\n  currentInvestments\n}) => {\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\n  let amount = currentInvestments;\n  let projection = [];\n\n  do {\n    projection.push(amount);\n    amount +=\n      averageContribution + (amount + 0.5 * averageContribution) * monthlyRate;\n  } while (projection.length < numMonths);\n\n  return projection;\n};\n\nexport const getProjectionWithRetirement = ({\n  numMonths,\n  returnOnInvestments,\n  averageContribution,\n  currentInvestments,\n  monthsBeforeRetirement,\n  monthlyExpenses,\n  retirementReturns,\n  retirementTaxRate,\n  remainingMortgagePayments,\n  mortgagePayment\n}) => {\n  const monthlyRate = (1 + returnOnInvestments) ** (1 / 12) - 1;\n  const monthlyRetirementReturn = (1 + retirementReturns) ** (1 / 12) - 1;\n  let amount = currentInvestments;\n  let projection = [];\n\n  do {\n    projection.push(amount);\n    if (projection.length < monthsBeforeRetirement) {\n      amount +=\n        averageContribution +\n        (amount + 0.5 * averageContribution) * monthlyRate;\n    } else {\n      amount +=\n        amount * monthlyRetirementReturn * (1 - retirementTaxRate) -\n        monthlyExpenses;\n      if (projection.length < remainingMortgagePayments) {\n        amount -= mortgagePayment;\n      }\n    }\n  } while (projection.length < numMonths);\n\n  return projection;\n};\n","import styled from \"styled-components\";\n\nconst Section = styled.div`\n  margin: ${props => (props.top ? \"0\" : \"3px\")};\n  padding: ${props =>\n    props.noPadding ? \"0\" : props.top ? \"15px 23px\" : \"15px 20px\"};\n  background-color: #fff;\n  border: 1px solid #e5e5e5;\n  border-width: ${props => (props.top ? \"0 0 1px\" : \"1px\")};\n  border-radius: 2px;\n`;\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport omit from \"lodash/fp/omit\";\nimport ToggleWithLabel from \"./ToggleWithLabel\";\n\nconst AccountsSelectionForm = ({ accounts, value, onChange }) =>\n  accounts.map(({ id, name }) => (\n    <ToggleWithLabel\n      key={id}\n      checked={!!value[id]}\n      name={id}\n      onChange={evt => {\n        const { name, checked } = evt.target;\n\n        onChange(\n          checked\n            ? {\n                ...value,\n                [name]: true\n              }\n            : omit(name)(value)\n        );\n      }}\n      label={name}\n    />\n  ));\n\nAccountsSelectionForm.propTypes = {\n  accounts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  value: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default AccountsSelectionForm;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport EmptyText from \"./EmptyText\";\nimport Modal from \"./Modal\";\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\nimport { useFlagState } from \"../commonHooks\";\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SettingsInvestmentAccounts = ({ budget, investmentAccounts, onUpdateAccounts }) => {\n  const [\n    investmentModalOpen,\n    closeInvestmentModal,\n    openInvestmentModal\n  ] = useFlagState(false);\n\n  const potentialInvestmentAccounts = budget.accounts.filter(\n    account => account.type === \"otherAsset\" && !account.on_budget\n  );\n  const investmentAccountsList = budget.accounts.filter(\n    ({ id }) => investmentAccounts[id]\n  );\n\n  return (\n    <Fragment>\n      <SectionHeader>\n        <StrongText>Investment Accounts</StrongText>\n        <span onClick={openInvestmentModal}>\n          <Icon icon=\"pencil\" />\n        </span>\n      </SectionHeader>\n      {investmentAccountsList.length ? (\n        investmentAccountsList.map(({ id, name }) => (\n          <SecondaryText key={id}>{name}</SecondaryText>\n        ))\n      ) : (\n        <EmptyText>No accounts marked as investment</EmptyText>\n      )}\n      <MinorText style={{ marginTop: 10 }}>\n        Transfers to investment accounts are not counted as spending since it's\n        assumed it's for retirement or some other savings goal.\n      </MinorText>\n      <Modal\n        open={investmentModalOpen}\n        onClose={closeInvestmentModal}\n        title=\"Investment Accounts\"\n      >\n        <AccountsSelectionForm\n          accounts={potentialInvestmentAccounts}\n          value={investmentAccounts}\n          onChange={accountsObject => {\n            onUpdateAccounts({\n              type: \"investment\",\n              value: accountsObject\n            });\n          }}\n        />\n      </Modal>\n    </Fragment>\n  );\n};\n\nSettingsInvestmentAccounts.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        on_budget: PropTypes.bool.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired,\n};\n\nexport default SettingsInvestmentAccounts;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { MinorText, SecondaryText, StrongText } from \"./typeComponents\";\nimport Icon from \"./Icon\";\nimport EmptyText from \"./EmptyText\";\nimport Modal from \"./Modal\";\nimport AccountsSelectionForm from \"./AccountsSelectionForm\";\nimport { useFlagState } from \"../commonHooks\";\n\nconst SectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst SettingsMortgageAccounts = ({\n  budget,\n  mortgageAccounts,\n  onUpdateAccounts\n}) => {\n  const [\n    mortgageModalOpen,\n    closeMortgageModal,\n    openMortgageModal\n  ] = useFlagState(false);\n\n  const potentialMortageAccounts = budget.accounts.filter(\n    account => account.type === \"otherLiability\" && !account.on_budget\n  );\n  const mortgageAccountList = budget.accounts.filter(\n    ({ id }) => mortgageAccounts[id]\n  );\n\n  return (\n    <Fragment>\n      <SectionHeader>\n        <StrongText>Mortgage Accounts</StrongText>\n        <span onClick={openMortgageModal}>\n          <Icon icon=\"pencil\" />\n        </span>\n      </SectionHeader>\n      {mortgageAccountList.length ? (\n        mortgageAccountList.map(({ id, name }) => (\n          <SecondaryText key={id}>{name}</SecondaryText>\n        ))\n      ) : (\n        <EmptyText>No accounts marked as mortgage</EmptyText>\n      )}\n      <MinorText style={{ marginTop: 10 }}>\n        Mortgage accounts are used in the retirement calculator since it's a\n        significant expense you won't have in your retirement presumably.\n      </MinorText>\n      <Modal\n        open={mortgageModalOpen}\n        onClose={closeMortgageModal}\n        title=\"Mortgage Account\"\n      >\n        <AccountsSelectionForm\n          accounts={potentialMortageAccounts}\n          value={mortgageAccounts}\n          onChange={accountsObject => {\n            onUpdateAccounts({\n              type: \"mortgage\",\n              value: accountsObject\n            });\n          }}\n        />\n      </Modal>\n    </Fragment>\n  );\n};\n\nSettingsMortgageAccounts.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        type: PropTypes.string.isRequired,\n        on_budget: PropTypes.bool.isRequired,\n        id: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired\n};\n\nexport default SettingsMortgageAccounts;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Section from \"./Section\";\nimport PageLayout from \"./PageLayout\";\nimport SettingsInvestmentAccounts from \"./SettingsInvestmentAccounts\";\nimport SettingsMortgageAccounts from \"./SettingsMortgageAccounts\";\n\nconst Space = styled.div`\n  height: 20px;\n`;\n\nconst SettingsPage = ({\n  budget,\n  historyAction,\n  investmentAccounts,\n  location,\n  mortgageAccounts,\n  sidebarTrigger,\n  title,\n  onUpdateAccounts\n}) => {\n  return (\n    <PageLayout\n      historyAction={historyAction}\n      location={location}\n      sidebarTrigger={sidebarTrigger}\n      title={title}\n      content={\n        <Fragment>\n          <Section>\n            <SettingsInvestmentAccounts\n              budget={budget}\n              investmentAccounts={investmentAccounts}\n              onUpdateAccounts={onUpdateAccounts}\n            />\n            <Space />\n            <SettingsMortgageAccounts\n              budget={budget}\n              mortgageAccounts={mortgageAccounts}\n              onUpdateAccounts={onUpdateAccounts}\n            />\n          </Section>\n        </Fragment>\n      }\n    />\n  );\n};\n\nSettingsPage.propTypes = {\n  budget: PropTypes.shape({\n    accounts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n      })\n    ).isRequired\n  }).isRequired,\n  historyAction: PropTypes.string.isRequired,\n  investmentAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  location: PropTypes.string.isRequired,\n  mortgageAccounts: PropTypes.objectOf(PropTypes.bool).isRequired,\n  sidebarTrigger: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  onUpdateAccounts: PropTypes.func.isRequired\n};\n\nexport default SettingsPage;\n","import React, { memo } from \"react\";\nimport { Switch, Route } from \"react-router\";\nimport moment from \"moment\";\nimport pages, { makeLink } from \"../pages\";\nimport CurrentMonthPage from \"./CurrentMonthPage\";\nimport IncomePage from \"./IncomePage\";\nimport CurrentMonthGroupPage from \"./CurrentMonthGroupPage\";\nimport CurrentMonthCategoryPage from \"./CurrentMonthCategoryPage\";\nimport GroupsPage from \"./GroupsPage\";\nimport GroupPage from \"./GroupPage\";\nimport { Link } from \"react-router-dom\";\nimport CategoriesState from \"./CategoriesState\";\nimport { notAny, simpleMemoize } from \"../dataUtils\";\nimport {\n  getFirstMonth,\n  getTransactionMonth,\n  isIncome,\n  isStartingBalanceOrReconciliation,\n  isTransfer\n} from \"../budgetUtils\";\nimport { useMonthExclusions } from \"../commonHooks\";\nimport CategoryPage from \"./CategoryPage\";\nimport CategoryPayeePage from \"./CategoryPayeePage\";\nimport IncomeVsExpensesPage from \"./IncomeVsExpensesPage\";\nimport NetWorthPage from \"./NetWorthPage\";\nimport InvestmentsPage from \"./InvestmentsPage\";\nimport ProjectionsPage from \"./ProjectionsPage\";\nimport SettingsPage from \"./SettingsPage\";\n\nconst getFilteredTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) => {\n    const firstMonth = getFirstMonth(budget);\n    const lastMonth = moment().format(\"YYYY-MM\");\n    return budget.transactions.filter(\n      notAny([\n        isStartingBalanceOrReconciliation(budget),\n        isTransfer(investmentAccounts),\n        transaction =>\n          excludeFirstMonth && getTransactionMonth(transaction) === firstMonth,\n        transaction =>\n          excludeLastMonth && getTransactionMonth(transaction) === lastMonth\n      ])\n    );\n  }\n);\n\nconst getFilteredSpendingTransactions = simpleMemoize(\n  (budget, investmentAccounts, excludeFirstMonth, excludeLastMonth) =>\n    getFilteredTransactions(\n      budget,\n      investmentAccounts,\n      excludeFirstMonth,\n      excludeLastMonth\n    ).filter(transaction => !isIncome(budget)(transaction))\n);\n\nconst PageContent = props => {\n  const {\n    budget,\n    currentMonth,\n    historyAction,\n    investmentAccounts,\n    location,\n    mortgageAccounts,\n    sidebarTrigger,\n    onUpdateAccounts\n  } = props;\n  const {\n    excludeFirstMonth,\n    excludeLastMonth,\n    months,\n    onSetExclusion\n  } = useMonthExclusions(budget);\n\n  if (!budget) {\n    return null;\n  }\n\n  return (\n    <Switch>\n      <Route\n        path={pages.currentMonth.path}\n        exact\n        render={() => (\n          <CurrentMonthPage\n            budget={budget}\n            currentMonth={currentMonth}\n            investmentAccounts={investmentAccounts}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonth.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.currentMonthGroup.path}\n        exact\n        render={({ match }) => (\n          <CurrentMonthGroupPage\n            budget={budget}\n            categoryGroupId={match.params.categoryGroupId}\n            currentMonth={currentMonth}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonthGroup.title(match.params, budget)}\n          />\n        )}\n      />\n      <Route\n        path={pages.currentMonthCategory.path}\n        exact\n        render={({ match }) => (\n          <CurrentMonthCategoryPage\n            categoryId={match.params.categoryId}\n            budget={budget}\n            currentMonth={currentMonth}\n            categoryGroupId={match.params.categoryGroupId}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.currentMonthCategory.title(match.params, budget)}\n          />\n        )}\n      />\n      <Route\n        path={pages.income.path}\n        exact\n        render={() => (\n          <IncomePage\n            investmentAccounts={investmentAccounts}\n            budget={budget}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.income.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.incomeVsExpenses.path}\n        exact\n        render={() => {\n          const filteredTransactions = getFilteredTransactions(\n            props.budget,\n            props.investmentAccounts,\n            excludeFirstMonth,\n            excludeLastMonth\n          );\n\n          return (\n            <IncomeVsExpensesPage\n              budget={budget}\n              excludeFirstMonth={excludeFirstMonth}\n              excludeLastMonth={excludeLastMonth}\n              investmentAccounts={investmentAccounts}\n              historyAction={historyAction}\n              location={location}\n              sidebarTrigger={sidebarTrigger}\n              title={pages.incomeVsExpenses.title}\n              transactions={filteredTransactions}\n              onSetExclusion={onSetExclusion}\n            />\n          );\n        }}\n      />\n      <Route\n        path={pages.netWorth.path}\n        exact\n        render={() => (\n          <NetWorthPage\n            budget={budget}\n            historyAction={historyAction}\n            investmentAccounts={investmentAccounts}\n            location={location}\n            mortgageAccounts={mortgageAccounts}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.netWorth.title}\n          />\n        )}\n      />\n      <Route\n        path={pages.investments.path}\n        exact\n        render={() => (\n          <InvestmentsPage\n            budget={budget}\n            investmentAccounts={investmentAccounts}\n            title={pages.investments.title}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n          />\n        )}\n      />\n      <Route\n        path={pages.projections.path}\n        exact\n        render={() => (\n          <ProjectionsPage\n            budget={budget}\n            investmentAccounts={investmentAccounts}\n            mortgageAccounts={mortgageAccounts}\n            title={pages.projections.title}\n            historyAction={historyAction}\n            location={location}\n            sidebarTrigger={sidebarTrigger}\n          />\n        )}\n      />\n      <Route\n        path={pages.settings.path}\n        exact\n        render={() => (\n          <SettingsPage\n            budget={budget}\n            historyAction={historyAction}\n            investmentAccounts={investmentAccounts}\n            location={location}\n            mortgageAccounts={mortgageAccounts}\n            sidebarTrigger={sidebarTrigger}\n            title={pages.settings.title}\n            onUpdateAccounts={onUpdateAccounts}\n          />\n        )}\n      />\n      <Route\n        path={pages.groups.path}\n        render={() => {\n          const filteredTransactions = getFilteredSpendingTransactions(\n            budget,\n            investmentAccounts,\n            excludeFirstMonth,\n            excludeLastMonth\n          );\n\n          return (\n            <CategoriesState action={historyAction} location={location}>\n              {({\n                selectedMonth,\n                selectedGroupId,\n                selectedCategoryId,\n                selectedPayeeId,\n                onSelectMonth,\n                onSelectGroup,\n                onSelectCategory,\n                onSelectPayee\n              }) => (\n                <Switch>\n                  <Route\n                    path={pages.groups.path}\n                    exact\n                    render={() => (\n                      <GroupsPage\n                        budget={budget}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedGroupId={selectedGroupId}\n                        selectedMonth={selectedMonth}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.groups.title}\n                        transactions={filteredTransactions}\n                        onSelectGroup={onSelectGroup}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.group.path}\n                    exact\n                    render={({ match }) => (\n                      <GroupPage\n                        budget={budget}\n                        categoryGroupId={match.params.categoryGroupId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedMonth={selectedMonth}\n                        selectedCategoryId={selectedCategoryId}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.group.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSelectCategory={onSelectCategory}\n                        onSelectMonth={onSelectMonth}\n                        onSetExclusion={onSetExclusion}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.category.path}\n                    exact\n                    render={({ match }) => (\n                      <CategoryPage\n                        budget={budget}\n                        categoryId={match.params.categoryId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        selectedMonth={selectedMonth}\n                        selectedPayeeId={selectedPayeeId}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.category.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                        onSelectPayee={onSelectPayee}\n                      />\n                    )}\n                  />\n                  <Route\n                    path={pages.categoryPayee.path}\n                    exact\n                    render={({ match }) => (\n                      <CategoryPayeePage\n                        budget={budget}\n                        categoryId={match.params.categoryId}\n                        excludeFirstMonth={excludeFirstMonth}\n                        excludeLastMonth={excludeLastMonth}\n                        historyAction={historyAction}\n                        location={location}\n                        months={months}\n                        payeeId={match.params.payeeId}\n                        selectedMonth={selectedMonth}\n                        sidebarTrigger={sidebarTrigger}\n                        title={pages.categoryPayee.title(match.params, budget)}\n                        transactions={filteredTransactions}\n                        onSetExclusion={onSetExclusion}\n                        onSelectMonth={onSelectMonth}\n                      />\n                    )}\n                  />\n                </Switch>\n              )}\n            </CategoriesState>\n          );\n        }}\n      />\n      <Route\n        render={() => (\n          <div style={{ padding: 20 }}>\n            <Link\n              to={makeLink(pages.currentMonth.path, {\n                budgetId: budget.id\n              })}\n            >\n              Return to {pages.currentMonth.title}\n            </Link>\n          </div>\n        )}\n      />\n    </Switch>\n  );\n};\n\nconst areEqual = (prevProps, nextProps) =>\n  [\n    \"budget\",\n    \"currentMonth\",\n    \"historyAction\",\n    \"investmentAccounts\",\n    \"location\",\n    \"mortgageAccounts\"\n  ].every(key => prevProps[key] === nextProps[key]);\n\nexport default memo(PageContent, areEqual);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Section from \"./Section\";\nimport { PageTitle, StrongText, SecondaryText } from \"./typeComponents\";\nimport { PrimaryButton } from \"./Button\";\n\nconst Unauthorized = ({ onAuthorize }) => (\n  <Section>\n    <PageTitle>Budget Reports</PageTitle>\n    <div style={{ marginBottom: 10 }}>Get various insights from your YNAB account.</div>\n    <PrimaryButton onClick={onAuthorize}>\n      Authorize YNAB\n    </PrimaryButton>\n    <StrongText style={{ marginTop: 30 }}>Privacy Policy</StrongText>\n    <SecondaryText>\n      This website does not store any information from you or your YNAB account\n      on it's server. All data retrieved from the YNAB API is stored only in\n      your browser's local storage and is never transmitted to any other location or\n      third-party.\n    </SecondaryText>\n  </Section>\n);\n\nUnauthorized.propTypes = {\n  onAuthorize: PropTypes.func.isRequired\n};\n\nexport default Unauthorized;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  padding: 10px 20px;\n`;\n\n\nconst ErrorPage = ({ message }) => (\n  <Container>\n    <h3>{message}</h3>\n    <div>\n      <Link to=\"/\">Home</Link>\n    </div>\n  </Container>\n);\n\nErrorPage.propTypes = {\n  message: PropTypes.string.isRequired\n};\n\nexport default ErrorPage;\n","import React from \"react\";\nimport ErrorPage from \"./ErrorPage\";\n\nconst NotFound = () => <ErrorPage message=\"Page not found\" />;\n\nexport default NotFound;\n","/* global Rollbar */\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ErrorPage from \"./ErrorPage\";\n\nclass ErrorBoundary extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    message: PropTypes.string\n  };\n\n  static defaultProps = {\n    message: \"Something went wrong\"\n  };\n\n  state = { hasError: false };\n\n  componentDidCatch(error) {\n    Rollbar.error(error);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorPage message={this.props.message} />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport pages, { makeLink } from \"../pages\";\nimport { StrongText } from \"./typeComponents\";\nimport Section from \"./Section\";\nimport Loading from \"./Loading\";\n\nclass Budgets extends Component {\n  static propTypes = {\n    budgets: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired\n      })\n    ).isRequired,\n    budgetsLoaded: PropTypes.bool.isRequired,\n    onRequestBudgets: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {\n    if (!this.props.budgetsLoaded) {\n      this.props.onRequestBudgets();\n    }\n  }\n\n  render() {\n    const { budgets, budgetsLoaded } = this.props;\n\n    if (!budgetsLoaded) {\n      return <Loading />;\n    }\n\n    return (\n      <Section>\n        <StrongText>Select a budget:</StrongText>\n        {budgets.map(({ id, name }) => (\n          <div key={id}>\n            <Link to={makeLink(pages.currentMonth.path, { budgetId: id })}>\n              {name}\n            </Link>\n          </div>\n        ))}\n      </Section>\n    );\n  }\n}\n\nexport default Budgets;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Switch } from \"react-router-dom\";\nimport moment from \"moment\";\nimport get from \"lodash/fp/get\";\nimport keyBy from \"lodash/fp/keyBy\";\nimport {\n  getBudgets,\n  getUpdatedBudget,\n  AUTHORIZE_URL,\n  setLastLocation\n} from \"../ynabRepo\";\nimport { setSetting, getSetting } from \"../uiRepo\";\nimport PageWrapper from \"./PageWrapper\";\nimport PageContent from \"./PageContent\";\nimport Unauthorized from \"./Unauthorized\";\nimport NotFound from \"./NotFound\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport Budgets from \"./Budgets\";\nimport CurrencyContext from \"./CurrencyContext\";\n\nclass App extends Component {\n  static propTypes = {\n    hasToken: PropTypes.bool.isRequired\n  };\n\n  state = {\n    authorized: true,\n    budgetsLoaded: false,\n    budgetIds: [],\n    budgets: {},\n    budgetDetails: {},\n    currentMonth: moment().format(\"YYYY-MM\")\n  };\n\n  handleRequestBudgets = callback => {\n    getBudgets().then(({ budgets }) => {\n      this.setState(\n        {\n          budgetsLoaded: true,\n          budgetIds: budgets.map(b => b.id),\n          budgets: keyBy(\"id\")(budgets)\n        },\n        callback\n      );\n    });\n  };\n\n  handleRequestBudget = id => {\n    getUpdatedBudget(id).then(({ budget, authorized }) => {\n      this.setState(state => ({\n        ...state,\n        authorized,\n        budgetDetails: {\n          ...state.budgetDetails,\n          [id]: budget\n        }\n      }));\n    });\n  };\n\n  handleAuthorize = () => {\n    setLastLocation();\n    window.location.replace(AUTHORIZE_URL);\n  };\n\n  render() {\n    const { hasToken } = this.props;\n    const {\n      authorized,\n      budgetsLoaded,\n      budgetIds,\n      budgets,\n      budgetDetails,\n      currentMonth\n    } = this.state;\n\n    if (!hasToken) {\n      return <Unauthorized onAuthorize={this.handleAuthorize} />;\n    }\n\n    return (\n      <ErrorBoundary>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            render={() => (\n              <Budgets\n                budgets={budgetIds.map(id => budgets[id])}\n                budgetsLoaded={budgetsLoaded}\n                onRequestBudgets={this.handleRequestBudgets}\n              />\n            )}\n          />\n          <Route\n            path=\"/budgets/:budgetId\"\n            render={({ match, history, location }) => {\n              const { budgetId } = match.params;\n              const budget = budgetDetails[budgetId];\n\n              return (\n                <PageWrapper\n                  authorized={authorized}\n                  budgetId={budgetId}\n                  budgetLoaded={!!budget}\n                  hasMultipleBudgets={budgetIds.length > 1}\n                  location={location.pathname}\n                  onAuthorize={this.handleAuthorize}\n                  onRequestBudget={this.handleRequestBudget}\n                >\n                  {({ sidebarTrigger }) => (\n                    <CurrencyContext.Provider\n                      value={get(\"currencyFormat\")(budget)}\n                    >\n                      <PageContent\n                        sidebarTrigger={sidebarTrigger}\n                        historyAction={history.action}\n                        location={location.pathname}\n                        budget={budget}\n                        currentMonth={currentMonth}\n                        investmentAccounts={getSetting(\n                          \"investmentAccounts\",\n                          budgetId\n                        )}\n                        mortgageAccounts={getSetting(\n                          \"mortgageAccounts\",\n                          budgetId\n                        )}\n                        onUpdateAccounts={({ type, value }) => {\n                          if (type === \"investment\") {\n                            setSetting(\"investmentAccounts\", budgetId, value);\n                          }\n                          if (type === \"mortgage\") {\n                            setSetting(\"mortgageAccounts\", budgetId, value);\n                          }\n                          this.forceUpdate();\n                        }}\n                      />\n                    </CurrencyContext.Provider>\n                  )}\n                </PageWrapper>\n              );\n            }}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { getAuthorizeToken, initializeYnabApi } from \"./ynabRepo\";\nimport App from \"./components/App\";\n\nconst token = getAuthorizeToken();\n\nif (token) {\n  initializeYnabApi(token);\n}\n\n/***\n * You play the game to get points, but the point of the game is not\n * the points, it's the joy you get getting those points. Whether you\n * end up with a lot of points or very few points, you get the most\n * value by having played the game to the best of your ability and\n * getting maximal enjoyment from your time playing.\n ***/\n\nReactDOM.render(\n  <HashRouter>\n    <App hasToken={!!token} />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}